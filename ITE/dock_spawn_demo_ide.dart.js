// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.DartError = {"": "Object;",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function() {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$.StackTrace = {"": "Object;stack",
  toString$0: function() {
    var t1 = this.stack;
    return !(t1 == null) ? t1 : "";
  }
};

$$.Closure = {"": "Object;",
  toString$0: function() {
    return "Closure";
  }
};

$$.Null = {"": "Object;"};

$$.MetaInfo = {"": "Object;_tag>,_tags,_set>"};

$$.JSSyntaxRegExp = {"": "Object;_pattern,_isMultiLine,_isCaseSensitive",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    m = $.regExpExec(this, $.checkString(str));
    if (m == null)
      return;
    matchStart = m.index;
    t1 = $.length($.$$index(m, 0));
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(), str, matchStart, matchStart + t1, m);
  },
  hasMatch$1: function(str) {
    return $.regExpTest(this, $.checkString(str));
  },
  allMatches$1: function(str) {
    $.checkString(str);
    return $._AllMatchesIterable$(this, str);
  },
  get$pattern: function() {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  },
  $isJSSyntaxRegExp: true
};

$$._MatchImplementation = {"": "Object;pattern>,str,start,end,_groups",
  $index: function(index) {
    var t1 = this._groups;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index(t1, index);
  }
};

$$._AllMatchesIterable = {"": "Iterable;_re,_str",
  get$iterator: function() {
    return $._AllMatchesIterator$(this._re, this._str);
  }
};

$$._AllMatchesIterator = {"": "Object;_re,_str,_liblib1$_current",
  get$current: function() {
    return this._liblib1$_current;
  },
  moveNext$0: function() {
    this._liblib1$_current = this._re.firstMatch$1(this._str);
    return !(this._liblib1$_current == null);
  }
};

$$.StringMatch = {"": "Object;start,str,pattern>",
  $index: function(g) {
    return this.group$1(g);
  },
  group$1: function(group_) {
    if ($.$$eq(group_, 0) !== true)
      throw $.$$throw($.RangeError$value(group_));
    return this.pattern;
  }
};

$$.JsStringBuffer = {"": "Object;_contents",
  get$length: function() {
    return this._contents.length;
  },
  get$isEmpty: function() {
    var t1 = this.get$length();
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  add$1: function(obj) {
    var t1, t2;
    if (typeof obj !== "string")
      return this.add$1$bailout(1, obj);
    t1 = this._contents;
    t2 = obj;
    this._contents = t1 + t2;
  },
  add$1$bailout: function(state0, obj) {
    var t1, t2;
    t1 = this._contents;
    t2 = typeof obj === "string" ? obj : $.S(obj);
    this._contents = t1 + t2;
  },
  addAll$1: function(objects) {
    var t1, t2, t3;
    for (t1 = $.iterator(objects); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      t3 = this._contents;
      t2 = typeof t2 === "string" ? t2 : $.S(t2);
      this._contents = t3 + t2;
    }
  },
  clear$0: function() {
    this._contents = "";
  },
  toString$0: function() {
    return this._contents;
  }
};

$$.Collection = {"": "Iterable;",
  addAll$1: function(elements) {
    var t1;
    for (t1 = $.iterator(elements); t1.moveNext$0() === true;)
      this.add$1(t1.get$current());
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  clear$0: function() {
    $.IterableMixinWorkaround_removeMatching(this, new $.Collection_clear_anon());
  },
  $isCollection: function() {
    return true;
  }
};

$$.NullThrownError = {"": "Object;",
  toString$0: function() {
    return "Throw of null.";
  }
};

$$.ArgumentError = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (!(t1 == null))
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {"": "ArgumentError;message",
  toString$0: function() {
    return "RangeError: " + $.S(this.message);
  }
};

$$.NoSuchMethodError = {"": "Object;_receiver,_memberName,_arguments,_namedArguments,_existingArgumentNames",
  toString$0: function() {
    var t1, t2, t3, t4, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.JsStringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(1, t1, t2);
    for (; $.$$lt(t1.i_1, t2.length) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
      if ($.$$gt(t1.i_1, 0) === true)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 !== (t4 | 0))
        throw $.iae(t4);
      if (t4 < 0 || t4 >= t2.length)
        throw $.ioore(t4);
      $.add(t3, $.Error_safeToString(t2[t4]));
    }
    t2 = this._namedArguments;
    if (!(t2 == null))
      $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.toString$0$bailout1(2, t1, t2);
    actualParameters = $.toString(t1.sb_0);
    t1.sb_0 = $.JsStringBuffer$("");
    for (i = 0; i < t2.length; ++i) {
      if (i > 0)
        $.add(t1.sb_0, ", ");
      t3 = t1.sb_0;
      if (i >= t2.length)
        throw $.ioore(i);
      $.add(t3, t2[i]);
    }
    formalParameters = $.toString(t1.sb_0);
    t2 = this._memberName;
    return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
  },
  toString$0$bailout1: function(state0, t1, t2) {
    switch (state0) {
      case 0:
        t1 = {};
        t1.sb_0 = $.JsStringBuffer$("");
        t1.i_1 = 0;
        t2 = this._arguments;
      case 1:
        state0 = 0;
        if (!(t2 == null))
          for (t3 = $.getInterceptor$JSArrayJSString(t2); $.$$lt(t1.i_1, t3.get$length(t2)) === true; t1.i_1 = $.$$add(t1.i_1, 1)) {
            if ($.$$gt(t1.i_1, 0) === true)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, $.Error_safeToString(t3.$index(t2, t1.i_1)));
          }
        t2 = this._namedArguments;
        if (!(t2 == null))
          $.forEach(t2, new $.NoSuchMethodError_toString_anon(t1));
        t2 = this._existingArgumentNames;
      case 2:
        var t3, actualParameters, i, formalParameters;
        state0 = 0;
        if (t2 == null)
          return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Arguments: [" + $.S(t1.sb_0) + "]";
        else {
          actualParameters = $.toString(t1.sb_0);
          t1.sb_0 = $.JsStringBuffer$("");
          for (t3 = $.getInterceptor$JSArrayJSString(t2), i = 0; $.CONSTANT5.$lt(i, t3.get$length(t2)); ++i) {
            if (i > 0)
              $.add(t1.sb_0, ", ");
            $.add(t1.sb_0, t3.$index(t2, i));
          }
          formalParameters = $.toString(t1.sb_0);
          t2 = this._memberName;
          return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t2) + "'\n" + "Receiver: " + $.S($.Error_safeToString(this._receiver)) + "\n" + "Tried calling: " + $.S(t2) + "(" + $.S(actualParameters) + ")\n" + "Found: " + $.S(t2) + "(" + $.S(formalParameters) + ")";
        }
    }
  }
};

$$.UnsupportedError = {"": "Object;message>",
  toString$0: function() {
    return "Unsupported operation: " + $.S(this.get$message());
  }
};

$$.UnimplementedError = {"": "Object;message>",
  toString$0: function() {
    var t1 = this.message;
    return !(t1 == null) ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {"": "Object;message",
  toString$0: function() {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {"": "Object;modifiedObject",
  toString$0: function() {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {"": "Object;",
  toString$0: function() {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {"": "Object;message",
  toString$0: function() {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {"": "Object;message",
  toString$0: function() {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {"": "Object;message",
  toString$0: function() {
    return "FormatException: " + $.S(this.message);
  },
  $isException: true
};

$$.IllegalJSRegExpException = {"": "FormatException;message"};

$$.Iterable = {"": "Object;",
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  contains$1: function(element) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      if ($.$$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    var iterator, buffer;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = this.get$iterator();
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.JsStringBuffer$("");
    if (separator === "")
      do
        buffer.add$1($.S(iterator.get$current()));
      while (iterator.moveNext$0() === true);
    else {
      buffer.add$1($.S(iterator.get$current()));
      for (; iterator.moveNext$0() === true;) {
        buffer.add$1(separator);
        buffer.add$1($.S(iterator.get$current()));
      }
    }
    return buffer.toString$0();
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer;
    iterator = this.get$iterator();
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.JsStringBuffer$("");
    if (separator == null || $.$$eq(separator, "") === true)
      do
        buffer.add$1($.S(iterator.get$current()));
      while (iterator.moveNext$0() === true);
    else {
      buffer.add$1($.S(iterator.get$current()));
      for (; iterator.moveNext$0() === true;) {
        buffer.add$1(separator);
        buffer.add$1($.S(iterator.get$current()));
      }
    }
    return buffer.toString$0();
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$length: function() {
    var it, count;
    it = this.get$iterator();
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function() {
    return this.get$iterator().moveNext$0() !== true;
  },
  get$last: function() {
    var it, result;
    it = this.get$iterator();
    if (it.moveNext$0() !== true)
      throw $.$$throw($.StateError$("No elements"));
    do
      result = it.get$current();
    while (it.moveNext$0() === true);
    return result;
  }
};

$$.Iterator = {"": "Object;"};

$$.Object = {"": ";",
  $eq: function(other) {
    if (other == null)
      return false;
    return this === other;
  },
  get$hashCode: function() {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function() {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.ObjectInterceptor = {"": "Object;",
  $and: function(receiver, a0) {
    return receiver.$and(a0);
  },
  $mul: function(receiver, a0) {
    return receiver.$mul(a0);
  },
  $add: function(receiver, a0) {
    return receiver.$add(a0);
  },
  $sub: function(receiver, a0) {
    return receiver.$sub(a0);
  },
  $div: function(receiver, a0) {
    return receiver.$div(a0);
  },
  $lt: function(receiver, a0) {
    return receiver.$lt(a0);
  },
  $shl: function(receiver, a0) {
    return receiver.$shl(a0);
  },
  $le: function(receiver, a0) {
    return receiver.$le(a0);
  },
  $eq: function(receiver, a0) {
    return receiver.$eq(a0);
  },
  $gt: function(receiver, a0) {
    return receiver.$gt(a0);
  },
  $ge: function(receiver, a0) {
    return receiver.$ge(a0);
  },
  add$1: function(receiver, a0) {
    return receiver.add$1(a0);
  },
  addAll$1: function(receiver, a0) {
    return receiver.addAll$1(a0);
  },
  addLast$1: function(receiver, a0) {
    return receiver.addLast$1(a0);
  },
  allMatches$1: function(receiver, a0) {
    return receiver.allMatches$1(a0);
  },
  ceil$0: function(receiver) {
    return receiver.ceil$0();
  },
  charCodeAt$1: function(receiver, a0) {
    return receiver.charCodeAt$1(a0);
  },
  clear$0: function(receiver) {
    return receiver.clear$0();
  },
  codeUnitAt$1: function(receiver, a0) {
    return receiver.codeUnitAt$1(a0);
  },
  get$contains: function(receiver) {
    return receiver.get$contains();
  },
  contains$1: function(receiver, a0) {
    return receiver.contains$1(a0);
  },
  endsWith$1: function(receiver, a0) {
    return receiver.endsWith$1(a0);
  },
  floor$0: function(receiver) {
    return receiver.floor$0();
  },
  forEach$1: function(receiver, a0) {
    return receiver.forEach$1(a0);
  },
  getRange$2: function(receiver, a0, a1) {
    return receiver.getRange$2(a0, a1);
  },
  get$hashCode: function(receiver) {
    return receiver.get$hashCode();
  },
  indexOf$1: function(receiver, a0) {
    return receiver.indexOf$1(a0);
  },
  indexOf$2: function(receiver, a0, a1) {
    return receiver.indexOf$2(a0, a1);
  },
  get$isEmpty: function(receiver) {
    return receiver.get$isEmpty();
  },
  get$isInfinite: function(receiver) {
    return receiver.get$isInfinite();
  },
  get$isNaN: function(receiver) {
    return receiver.get$isNaN();
  },
  get$isNegative: function(receiver) {
    return receiver.get$isNegative();
  },
  join$1: function(receiver, a0) {
    return receiver.join$1(a0);
  },
  get$last: function(receiver) {
    return receiver.get$last();
  },
  get$length: function(receiver) {
    return receiver.get$length();
  },
  set$length: function(receiver, value) {
    return receiver.set$length(value);
  },
  remove$1: function(receiver, a0) {
    return receiver.remove$1(a0);
  },
  removeAll$1: function(receiver, a0) {
    return receiver.removeAll$1(a0);
  },
  removeLast$0: function(receiver) {
    return receiver.removeLast$0();
  },
  removeMatching$1: function(receiver, a0) {
    return receiver.removeMatching$1(a0);
  },
  removeRange$2: function(receiver, a0, a1) {
    return receiver.removeRange$2(a0, a1);
  },
  replaceAll$2: function(receiver, a0, a1) {
    return receiver.replaceAll$2(a0, a1);
  },
  split$1: function(receiver, a0) {
    return receiver.split$1(a0);
  },
  substring$1: function(receiver, a0) {
    return receiver.substring$1(a0);
  },
  toInt$0: function(receiver) {
    return receiver.toInt$0();
  },
  toList$0: function(receiver) {
    return receiver.toList$0();
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase$0();
  },
  toSet$0: function(receiver) {
    return receiver.toSet$0();
  },
  toString$0: function(receiver) {
    return receiver.toString$0();
  },
  trim$0: function(receiver) {
    return receiver.trim$0();
  },
  truncate$0: function(receiver) {
    return receiver.truncate$0();
  },
  where$1: function(receiver, a0) {
    return receiver.where$1(a0);
  },
  $index: function(receiver, a0) {
    return receiver.$index(a0);
  },
  $indexSet: function(receiver, a0, a1) {
    return receiver.$indexSet(a0, a1);
  },
  $xor: function(receiver, a0) {
    return receiver.$xor(a0);
  },
  get$iterator: function(receiver) {
    return receiver.get$iterator();
  },
  $negate: function(receiver) {
    return receiver.$negate();
  },
  $or: function(receiver, a0) {
    return receiver.$or(a0);
  },
  $tdiv: function(receiver, a0) {
    return receiver.$tdiv(a0);
  }
};

$$.JSFunction = {"": "Object;",
  toString$0: function(receiver) {
    return "Closure";
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSBool = {"": "Object;",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNull = {"": "Object;",
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  },
  $eq: function(receiver, a) {
    return receiver == a;
  }
};

$$.JSArray = {"": "Object;",
  add$1: function(receiver, value) {
    $.checkGrowable(receiver, "add");
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    $.checkGrowable(receiver, "removeLast");
    if (receiver.length === 0)
      throw $.$$throw($.RangeError$value(-1));
    return receiver.pop();
  },
  remove$1: function(receiver, element) {
    var i;
    $.checkGrowable(receiver, "remove");
    for (i = 0; i < receiver.length; ++i)
      if ($.$$eq(receiver[i], element) === true) {
        receiver.splice(i, 1);
        return;
      }
  },
  removeAll$1: function(receiver, elements) {
    $.IterableMixinWorkaround_removeAllList(receiver, elements);
  },
  removeMatching$1: function(receiver, test) {
    $.IterableMixinWorkaround_removeMatchingList(receiver, test);
  },
  where$1: function(receiver, f) {
    return $.WhereIterable$(receiver, f);
  },
  addAll$1: function(receiver, collection) {
    var t1;
    for (t1 = $.iterator(collection); t1.moveNext$0() === true;)
      this.add$1(receiver, t1.get$current());
  },
  addLast$1: function(receiver, value) {
    $.checkGrowable(receiver, "addLast");
    receiver.push(value);
  },
  clear$0: function(receiver) {
    this.set$length(receiver, 0);
  },
  forEach$1: function(receiver, f) {
    var t1;
    for (t1 = this.get$iterator(receiver); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(receiver, separator) {
    var list, i, t1;
    if (separator == null)
      separator = "";
    list = $.List_List(receiver.length);
    for (i = 0; i < receiver.length; ++i) {
      t1 = $.S(receiver[i]);
      if (i >= list.length)
        throw $.ioore(i);
      list[i] = t1;
    }
    return list.join(separator);
  },
  getRange$2: function(receiver, start, $length) {
    var t1, end;
    if (0 === $length)
      return [];
    $.checkNull(start);
    $.checkNull($length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof $length === "number" && Math.floor($length) === $length))
      throw $.$$throw($.ArgumentError$($length));
    t1 = $length < 0;
    if (t1)
      throw $.$$throw($.ArgumentError$($length));
    if (start < 0)
      throw $.$$throw($.RangeError$value(start));
    end = start + $length;
    if (end > receiver.length)
      throw $.$$throw($.RangeError$value($length));
    if (t1)
      throw $.$$throw($.ArgumentError$($length));
    return receiver.slice(start, end);
  },
  get$last: function(receiver) {
    var t1 = receiver.length;
    if (t1 > 0)
      return receiver[t1 - 1];
    throw $.$$throw($.StateError$("No elements"));
  },
  removeRange$2: function(receiver, start, $length) {
    var receiverLength, t1, t2;
    $.checkGrowable(receiver, "removeRange");
    if ($length === 0)
      return;
    $.checkNull(start);
    $.checkNull($length);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if ($length < 0)
      throw $.$$throw($.ArgumentError$($length));
    receiverLength = receiver.length;
    if (start < 0 || start >= receiverLength)
      throw $.$$throw($.RangeError$value(start));
    t1 = start + $length;
    if (t1 > receiverLength)
      throw $.$$throw($.RangeError$value(t1));
    t2 = receiverLength - $length;
    $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
    this.set$length(receiver, t2);
  },
  indexOf$2: function(receiver, element, start) {
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  },
  indexOf$1: function($receiver, element) {
    return this.indexOf$2($receiver, element, 0);
  },
  contains$1: function(receiver, other) {
    var t1, i;
    for (t1 = $.getInterceptor(other), i = 0; i < receiver.length; ++i)
      if (t1.$eq(other, receiver[i]) === true)
        return true;
    return false;
  },
  get$contains: function(receiver) {
    return new $.BoundClosure$i1(this, "contains$1", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return $.ToString_collectionToString(receiver);
  },
  toList$0: function(receiver) {
    return $.List_List$from(receiver);
  },
  toSet$0: function(receiver) {
    return $.HashSet_HashSet$from(receiver);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (!(typeof newLength === "number" && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    $.checkMutable(receiver, "indexed set");
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    receiver[index] = value;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSNumber = {"": "Object;",
  get$isNegative: function(receiver) {
    return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
  },
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  toInt$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver) === true)
      throw $.$$throw($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver) === true)
      throw $.$$throw($.UnsupportedError$("Infinity"));
    truncated = this.truncate$0(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  ceil$0: function(receiver) {
    return Math.ceil(receiver);
  },
  floor$0: function(receiver) {
    return Math.floor(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  truncate$0: function(receiver) {
    return receiver < 0 ? this.ceil$0(receiver) : this.floor$0(receiver);
  },
  toString$0: function(receiver) {
    if (receiver === 0 && (1 / receiver) < 0)
      return "-0.0";
    else
      return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $negate: function(receiver) {
    return -receiver;
  },
  $add: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver - other;
  },
  $div: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver / other;
  },
  $mul: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver * other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.$$throw($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return (receiver << other) >>> 0;
  },
  $and: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver & other) >>> 0;
  },
  $or: function(receiver, other) {
    return (receiver | other) >>> 0;
  },
  $xor: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return (receiver ^ other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (!(typeof other === "number"))
      throw $.$$throw($.ArgumentError$(other));
    return receiver >= other;
  },
  $isJSNumber: true,
  $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSInt = {"": "JSNumber;", $is$int: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSDouble = {"": "JSNumber;", $is$double: true, $isnum: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$.JSString = {"": "Object;",
  charCodeAt$1: function(receiver, index) {
    return this.codeUnitAt$1(receiver, index);
  },
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.$$throw($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.$$throw($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  allMatches$1: function(receiver, str) {
    $.checkString(str);
    return $.allMatchesInStringUnchecked(receiver, str);
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    $.checkString(other);
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    $.checkString(to);
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    $.checkNull(pattern);
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    var t1;
    $.checkNum(startIndex);
    if (endIndex == null)
      endIndex = receiver.length;
    $.checkNum(endIndex);
    t1 = $.getInterceptor$JSNumber(startIndex);
    if (t1.$lt(startIndex, 0) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if (t1.$gt(startIndex, endIndex) === true)
      throw $.$$throw($.RangeError$value(startIndex));
    if ($.$$gt(endIndex, receiver.length) === true)
      throw $.$$throw($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  toLowerCase$0: function(receiver) {
    return receiver.toLowerCase();
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    $.checkNull(other);
    if (!(typeof start === "number" && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof other === "string"))
      throw $.$$throw($.ArgumentError$(other));
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  indexOf$1: function($receiver, other) {
    return this.indexOf$2($receiver, other, 0);
  },
  contains$2: function(receiver, other, startIndex) {
    $.checkNull(other);
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  contains$1: function($receiver, other) {
    return this.contains$2($receiver, other, 0);
  },
  get$contains: function(receiver) {
    return new $.Bound_contains_JSString(this, "contains$2", receiver);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i, hash0, hash1;
    for (hash = 0, i = 0; i < receiver.length; ++i, hash = hash1) {
      hash0 = 536870911 & hash + receiver.charCodeAt(i);
      hash1 = 536870911 & hash0 + ((524287 & hash0) << 10 >>> 0);
      hash1 = hash1 ^ (hash1 >> 6);
    }
    hash0 = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash0 = hash0 ^ (hash0 >> 11);
    return 536870911 & hash0 + ((16383 & hash0) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (!(typeof index === "number" && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.$$throw($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true,
  $eq: function(receiver, a) {
    return receiver === a;
  }
};

$$._HashMapImpl = {"": "Object;_keys>,_values>,_loadLimit,_numberOfEntries,_numberOfDeleted",
  _probeForAdding$1: function(key) {
    var t1, t3, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    t1 = $.hashCode(key);
    t3 = this._keys.length;
    if (t1 !== (t1 | 0))
      return this._probeForAdding$1$bailout(1, key, t1);
    hash = (t1 & t3 - 1) >>> 0;
    for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null) {
        if (insertionIndex < 0)
          return hash;
        return insertionIndex;
      } else if ($.$$eq(existingKey, key) === true)
        return hash;
      else if (insertionIndex < 0 && existingKey === $.CONSTANT3)
        insertionIndex = hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
      if (hash !== (hash | 0))
        return this._probeForAdding$1$bailout(2, key, 0, hash, numberOfProbes0, insertionIndex);
    }
  },
  _probeForAdding$1$bailout: function(state0, key, t1, hash, numberOfProbes0, insertionIndex) {
    switch (state0) {
      case 0:
        if (key == null)
          throw $.$$throw($.ArgumentError$(null));
        t1 = $.hashCode(key);
      case 1:
        state0 = 0;
        hash = $.$$and(t1, this._keys.length - 1);
        numberOfProbes = 1;
        insertionIndex = -1;
      case 2:
        var numberOfProbes, existingKey;
        L0:
          while (true)
            switch (state0) {
              case 0:
                if (!true)
                  break L0;
                t1 = this._keys;
                if (hash !== (hash | 0))
                  throw $.iae(hash);
                if (hash < 0 || hash >= t1.length)
                  throw $.ioore(hash);
                existingKey = t1[hash];
                if (existingKey == null) {
                  if (insertionIndex < 0)
                    return hash;
                  return insertionIndex;
                } else if ($.$$eq(existingKey, key) === true)
                  return hash;
                else if (insertionIndex < 0 && existingKey === $.CONSTANT3)
                  insertionIndex = hash;
                numberOfProbes0 = numberOfProbes + 1;
                hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
              case 2:
                state0 = 0;
                numberOfProbes = numberOfProbes0;
            }
    }
  },
  _probeForLookup$1: function(key) {
    var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
    if (key == null)
      throw $.$$throw($.ArgumentError$(null));
    hash = $.$$and($.hashCode(key), this._keys.length - 1);
    if (hash !== (hash | 0))
      return this._probeForLookup$1$bailout(1, key, hash);
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _probeForLookup$1$bailout: function(state0, key, hash) {
    var numberOfProbes, t1, existingKey, numberOfProbes0;
    for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
      t1 = this._keys;
      if (hash !== (hash | 0))
        throw $.iae(hash);
      if (hash < 0 || hash >= t1.length)
        throw $.ioore(hash);
      existingKey = t1[hash];
      if (existingKey == null)
        return -1;
      if ($.$$eq(existingKey, key) === true)
        return hash;
      numberOfProbes0 = numberOfProbes + 1;
      hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
    }
  },
  _ensureCapacity$0: function() {
    var newNumberOfEntries, capacity, t1;
    newNumberOfEntries = $.$$add(this._numberOfEntries, 1);
    if ($.$$ge(newNumberOfEntries, this._loadLimit) === true) {
      this._grow$1(this._keys.length * 2);
      return;
    }
    capacity = this._keys.length;
    if (typeof newNumberOfEntries !== "number")
      throw $.iae(newNumberOfEntries);
    t1 = this._numberOfDeleted;
    if (t1 > capacity - newNumberOfEntries - t1)
      this._grow$1(capacity);
  },
  _grow$1: function(newCapacity) {
    var capacity, oldKeys, oldValues, i, key, value, newIndex, t1;
    capacity = this._keys.length;
    this._loadLimit = $.$$tdiv($.$$mul(newCapacity, 3), 4);
    oldKeys = this._keys;
    oldValues = this._values;
    this._keys = $.List_List$fixedLength(newCapacity, null);
    this._values = $.List_List$fixedLength(newCapacity, null);
    for (i = 0; i < capacity; ++i) {
      if (i >= oldKeys.length)
        throw $.ioore(i);
      key = oldKeys[i];
      if (key == null || key === $.CONSTANT3)
        continue;
      if (i >= oldValues.length)
        throw $.ioore(i);
      value = oldValues[i];
      newIndex = this._probeForAdding$1(key);
      t1 = this._keys;
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = key;
      t1 = this._values;
      if (newIndex >= t1.length)
        throw $.ioore(newIndex);
      t1[newIndex] = value;
    }
    this._numberOfDeleted = 0;
  },
  clear$0: function() {
    var t1, $length, t2, t3, i;
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    t1 = this._keys;
    $length = t1.length;
    for (t2 = this._values, t3 = t2.length, i = 0; i < $length; ++i) {
      t1[i] = null;
      if (i >= t3)
        throw $.ioore(i);
      t2[i] = null;
    }
  },
  $indexSet: function(key, value) {
    var index, t1;
    this._ensureCapacity$0();
    index = this._probeForAdding$1(key);
    t1 = this._keys;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    t1 = t1[index];
    if (t1 == null || t1 === $.CONSTANT3) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.$$indexSet$bailout(1, key, value, t1, index);
      this._numberOfEntries = t1 + 1;
    }
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = key;
    t1 = this._values;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = value;
  },
  $$indexSet$bailout: function(state0, key, value, t1, index) {
    switch (state0) {
      case 0:
        this._ensureCapacity$0();
        index = this._probeForAdding$1(key);
        t1 = this._keys;
        if (index !== (index | 0))
          throw $.iae(index);
        if (index < 0 || index >= t1.length)
          throw $.ioore(index);
        t1 = t1[index];
      case 1:
        if (state0 === 1 || state0 === 0 && (t1 == null || t1 === $.CONSTANT3))
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 1:
              state0 = 0;
              this._numberOfEntries = $.$$add(t1, 1);
          }
        t1 = this._keys;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = key;
        t1 = this._values;
        if (index >= t1.length)
          throw $.ioore(index);
        t1[index] = value;
    }
  },
  $index: function(key) {
    var index, t1;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.$$index$bailout(1, index);
    if (index < 0)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index) {
    var t1;
    if ($.$$lt(index, 0) === true)
      return;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  remove$1: function(key) {
    var index, t1, t3, value;
    index = this._probeForLookup$1(key);
    if (typeof index !== "number")
      return this.remove$1$bailout(1, index);
    if (index >= 0) {
      t1 = this._numberOfEntries;
      if (typeof t1 !== "number")
        return this.remove$1$bailout(2, index, t1);
      this._numberOfEntries = t1 - 1;
      t3 = this._values;
      if (index !== (index | 0))
        throw $.iae(index);
      if (index < 0 || index >= t3.length)
        throw $.ioore(index);
      value = t3[index];
      t3[index] = null;
      t3 = this._keys;
      if (index >= t3.length)
        throw $.ioore(index);
      t3[index] = $.CONSTANT3;
      this._numberOfDeleted = this._numberOfDeleted + 1;
      return value;
    }
    return;
  },
  remove$1$bailout: function(state0, index, t1) {
    switch (state0) {
      case 0:
        index = this._probeForLookup$1(key);
      case 1:
        state0 = 0;
      case 2:
        var t3, value;
        if (state0 === 2 || state0 === 0 && $.$$ge(index, 0) === true)
          switch (state0) {
            case 0:
              t1 = this._numberOfEntries;
            case 2:
              state0 = 0;
              this._numberOfEntries = $.$$sub(t1, 1);
              t3 = this._values;
              if (index !== (index | 0))
                throw $.iae(index);
              if (index < 0 || index >= t3.length)
                throw $.ioore(index);
              value = t3[index];
              t3[index] = null;
              t3 = this._keys;
              if (index >= t3.length)
                throw $.ioore(index);
              t3[index] = $.CONSTANT3;
              this._numberOfDeleted = this._numberOfDeleted + 1;
              return value;
          }
        return;
    }
  },
  get$isEmpty: function() {
    var t1 = this._numberOfEntries;
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  get$length: function() {
    return this._numberOfEntries;
  },
  forEach$1: function(f) {
    var it, t1, t2, t3;
    it = $._HashMapImplIndexIterator$(this);
    for (; it.moveNext$0() === true;) {
      t1 = this._keys;
      t2 = it.get$current();
      if (t2 !== (t2 | 0))
        throw $.iae(t2);
      if (t2 < 0 || t2 >= t1.length)
        throw $.ioore(t2);
      t2 = t1[t2];
      t1 = this._values;
      t3 = it.get$current();
      if (t3 !== (t3 | 0))
        throw $.iae(t3);
      if (t3 < 0 || t3 >= t1.length)
        throw $.ioore(t3);
      f.call$2(t2, t1[t3]);
    }
  },
  get$keys: function() {
    return $._HashMapImplKeyIterable$(this);
  },
  get$values: function() {
    return $._HashMapImplValueIterable$(this);
  },
  containsKey$1: function(key) {
    return $.$$eq(this._probeForLookup$1(key), -1) !== true;
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  _HashMapImpl$0: function() {
    this._numberOfEntries = 0;
    this._numberOfDeleted = 0;
    this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
    this._keys = $.List_List$fixedLength(8, null);
    this._values = $.List_List$fixedLength(8, null);
  },
  $isMap: function() {
    return true;
  }
};

$$._HashMapImplKeyIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplKeyIterator$(this._map);
  }
};

$$._HashMapImplValueIterable = {"": "Iterable;_map",
  get$iterator: function() {
    return $._HashMapImplValueIterator$(this._map);
  }
};

$$._HashMapImplIterator = {"": "Object;",
  moveNext$0: function() {
    var t1, $length, t3, newIndex, t2, key;
    t1 = this._map;
    $length = $.length(t1.get$_keys());
    if (typeof $length !== "number")
      return this.moveNext$0$bailout(1, $length, t1);
    t3 = this._index;
    if (typeof t3 !== "number")
      return this.moveNext$0$bailout(2, $length, t1, t3);
    newIndex = t3 + 1;
    for (t2 = t1.get$_keys(); newIndex < $length;) {
      if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, $length, t1, t2, newIndex, $.CONSTANT4);
      if (newIndex !== (newIndex | 0))
        throw $.iae(newIndex);
      if (newIndex < 0 || newIndex >= t2.length)
        throw $.ioore(newIndex);
      key = t2[newIndex];
      if (!(key == null) && !(key === $.CONSTANT3)) {
        this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t2, t1.get$_values());
        this._index = newIndex;
        return true;
      }
      ++newIndex;
    }
    this._index = $length;
    this._liblib0$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, $length, t1, t3, newIndex, t2) {
    switch (state0) {
      case 0:
        t1 = this._map;
        $length = $.length(t1.get$_keys());
      case 1:
        state0 = 0;
        t3 = this._index;
      case 2:
        state0 = 0;
        newIndex = $.$$add(t3, 1);
      case 3:
        var key;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t2 = $.getInterceptor$JSNumber(newIndex);
                if (!(t2.$lt(newIndex, $length) === true))
                  break L0;
                t3 = t1.get$_keys();
              case 3:
                state0 = 0;
                key = $.$$index(t3, newIndex);
                if (!(key == null) && !(key === $.CONSTANT3)) {
                  this._liblib0$_current = this._computeCurrentFromIndex$3(newIndex, t1.get$_keys(), t1.get$_values());
                  this._index = newIndex;
                  return true;
                }
                newIndex = t2.$add(newIndex, 1);
            }
        this._index = $length;
        this._liblib0$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$._HashMapImplKeyIterator = {"": "_HashMapImplIterator;_map,_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.$$index(keys, index);
  }
};

$$._HashMapImplValueIterator = {"": "_HashMapImplIterator;_map,_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return $.$$index(values, index);
  }
};

$$._HashMapImplIndexIterator = {"": "_HashMapImplIterator;_map,_index,_liblib0$_current",
  _computeCurrentFromIndex$3: function(index, keys, values) {
    return index;
  }
};

$$._DeletedKeySentinel = {"": "Object;"};

$$._KeyValuePair = {"": "Object;key>,value="};

$$._LinkedHashMapImpl = {"": "Object;_liblib0$_list,_map",
  $indexSet: function(key, value) {
    var t1, t3;
    if (this._map.containsKey$1(key) === true) {
      t1 = this._map;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.$$indexSet$bailout(1, key, value, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key].get$element().set$value(value);
    } else {
      this._liblib0$_list.addLast$1($._KeyValuePair$(key, value));
      t1 = this._map;
      t3 = this._liblib0$_list.lastEntry$0();
      if (typeof t1 !== "object" || t1 === null || (t1.constructor !== Array || !!t1.immutable$list) && !t1.$isJavaScriptIndexingBehavior())
        return this.$$indexSet$bailout(2, key, 0, t1);
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= t1.length)
        throw $.ioore(key);
      t1[key] = t3;
    }
  },
  $$indexSet$bailout: function(state0, key, value, t1) {
    switch (state0) {
      case 0:
      default:
        if (state0 === 1 || state0 === 0 && this._map.containsKey$1(key) === true)
          switch (state0) {
            case 0:
              t1 = this._map;
            case 1:
              state0 = 0;
              $.$$index(t1, key).get$element().set$value(value);
          }
        else
          switch (state0) {
            case 0:
              this._liblib0$_list.addLast$1($._KeyValuePair$(key, value));
              t1 = this._map;
            case 2:
              state0 = 0;
              $.$$indexSet(t1, key, this._liblib0$_list.lastEntry$0());
          }
    }
  },
  $index: function(key) {
    var entry = $.$$index(this._map, key);
    if (entry == null)
      return;
    return entry.get$element().get$value();
  },
  remove$1: function(key) {
    var entry = $.remove(this._map, key);
    if (entry == null)
      return;
    entry.remove$0();
    return entry.get$element().get$value();
  },
  get$keys: function() {
    return $.MappedIterable$(this._liblib0$_list, new $._LinkedHashMapImpl_keys_anon());
  },
  get$values: function() {
    return $.MappedIterable$(this._liblib0$_list, new $._LinkedHashMapImpl_values_anon());
  },
  forEach$1: function(f) {
    this._liblib0$_list.forEach$1(new $._LinkedHashMapImpl_forEach_anon(f));
  },
  containsKey$1: function(key) {
    return this._map.containsKey$1(key);
  },
  get$length: function() {
    return $.length(this._map);
  },
  get$isEmpty: function() {
    var t1 = this.get$length();
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  clear$0: function() {
    $.clear(this._map);
    this._liblib0$_list.clear$0();
  },
  toString$0: function() {
    return $.ToString_mapToString(this);
  },
  _LinkedHashMapImpl$0: function() {
    this._map = $.HashMap_HashMap();
    this._liblib0$_list = $.DoubleLinkedQueue$();
  },
  $isMap: function() {
    return true;
  }
};

$$.DoubleLinkedQueueEntry = {"": "Object;_previous=,_next=,_element",
  _link$2: function(p, n) {
    this._next = n;
    this._previous = p;
    p.set$_next(this);
    n.set$_previous(this);
  },
  prepend$1: function(e) {
    $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
  },
  remove$0: function() {
    var t1 = this._next;
    this._previous.set$_next(t1);
    t1 = this._previous;
    this._next.set$_previous(t1);
    this._next = null;
    this._previous = null;
    return this._element;
  },
  _asNonSentinelEntry$0: function() {
    return this;
  },
  previousEntry$0: function() {
    return this._previous._asNonSentinelEntry$0();
  },
  nextEntry$0: function() {
    return this._next._asNonSentinelEntry$0();
  },
  get$element: function() {
    return this._element;
  },
  DoubleLinkedQueueEntry$1: function(e) {
    this._element = e;
  }
};

$$._DoubleLinkedQueueEntrySentinel = {"": "DoubleLinkedQueueEntry;_previous,_next,_element",
  remove$0: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _asNonSentinelEntry$0: function() {
    return;
  },
  get$element: function() {
    throw $.$$throw($.StateError$("Empty queue"));
  },
  _DoubleLinkedQueueEntrySentinel$0: function() {
    this._link$2(this, this);
  }
};

$$.DoubleLinkedQueue = {"": "Collection;_sentinel",
  addLast$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  add$1: function(value) {
    this._sentinel.prepend$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.iterator(iterable); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      this._sentinel.prepend$1(t2);
    }
  },
  removeLast$0: function() {
    return this._sentinel._previous.remove$0();
  },
  removeFirst$0: function() {
    return this._sentinel._next.remove$0();
  },
  remove$1: function(o) {
    var entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel);) {
      if ($.$$eq(entry.get$element(), o) === true) {
        entry.remove$0();
        return;
      }
      entry = entry.get$_next();
    }
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAllList(this, elements);
  },
  removeMatching$1: function(test) {
    var entry, next;
    entry = this._sentinel.nextEntry$0();
    for (; !(entry === this._sentinel); entry = next) {
      next = entry.get$_next();
      if (test.call$1(entry.get$element()) === true)
        entry.remove$0();
    }
  },
  get$last: function() {
    return this._sentinel._previous.get$element();
  },
  lastEntry$0: function() {
    return this._sentinel.previousEntry$0();
  },
  get$isEmpty: function() {
    var t1 = this._sentinel;
    return t1._next === t1;
  },
  clear$0: function() {
    var t1 = this._sentinel;
    t1._next = t1;
    t1 = this._sentinel;
    t1._previous = t1;
  },
  get$iterator: function() {
    return $._DoubleLinkedQueueIterator$(this._sentinel);
  },
  toString$0: function() {
    return $.ToString_collectionToString(this);
  },
  DoubleLinkedQueue$0: function() {
    this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
  },
  $isCollection: function() {
    return true;
  }
};

$$._DoubleLinkedQueueIterator = {"": "Object;_sentinel,_currentEntry,_liblib0$_current",
  moveNext$0: function() {
    var t1, t2;
    t1 = this._currentEntry;
    if (t1 == null)
      return false;
    this._currentEntry = t1.get$_next();
    t1 = this._currentEntry;
    t2 = this._sentinel;
    if (t1 == null ? t2 == null : t1 === t2) {
      this._currentEntry = null;
      this._liblib0$_current = null;
      this._sentinel = null;
      return false;
    }
    this._liblib0$_current = t1.get$element();
    return true;
  },
  get$current: function() {
    return this._liblib0$_current;
  }
};

$$.HashSet = {"": "Collection;_backingMap",
  clear$0: function() {
    this._backingMap.clear$0();
  },
  add$1: function(value) {
    this._backingMap.$indexSet(value, value);
  },
  remove$1: function(value) {
    var t1 = this._backingMap;
    if (t1.containsKey$1(value) !== true)
      return false;
    t1.remove$1(value);
    return true;
  },
  contains$1: function(value) {
    return this._backingMap.containsKey$1(value);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    this._backingMap.forEach$1(new $.HashSet_forEach_anon(f));
  },
  get$isEmpty: function() {
    return this._backingMap.get$isEmpty();
  },
  get$length: function() {
    return this._backingMap.get$length();
  },
  get$iterator: function() {
    return $._HashSetIterator$(this);
  },
  toString$0: function() {
    return $.ToString_collectionToString(this);
  },
  $isSet: true,
  $isCollection: function() {
    return true;
  }
};

$$._HashSetIterator = {"": "Object;_keysIterator",
  get$current: function() {
    var result = this._keysIterator.get$current();
    if (result === $.CONSTANT3)
      throw $.$$throw($.StateError$("Concurrent modification."));
    return result;
  },
  moveNext$0: function() {
    var t1, result, t2;
    t1 = this._keysIterator;
    do {
      result = t1.moveNext$0();
      if (result === true)
        t2 = t1.get$current() == null || t1.get$current() === $.CONSTANT3;
      else
        t2 = false;
    } while (t2);
    return result;
  }
};

$$.MappedIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function() {
    return $.MappedIterator$(this._iterable.get$iterator(), this._f);
  },
  get$length: function() {
    return this._iterable.get$length();
  },
  get$isEmpty: function() {
    return this._iterable.get$isEmpty();
  }
};

$$.MappedIterator = {"": "Iterator;_current,_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._current = this._f$1(t1.get$current());
      return true;
    } else {
      this._current = null;
      return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.WhereIterable = {"": "Iterable;_iterable,_f",
  get$iterator: function() {
    return $.WhereIterator$($.iterator(this._iterable), this._f);
  }
};

$$.WhereIterator = {"": "Iterator;_iterator,_f",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.ListIterator = {"": "Object;_list,_length,_position,_current",
  moveNext$0: function() {
    var t1, t2, t3, nextPosition;
    t1 = this._list;
    t2 = t1.length;
    t3 = this._length;
    if (t2 !== t3)
      throw $.$$throw($.ConcurrentModificationError$(t1));
    t2 = this._position;
    if (t2 !== (t2 | 0))
      return this.moveNext$0$bailout(1, t2, t1, t3);
    nextPosition = t2 + 1;
    if (nextPosition < t3) {
      this._position = nextPosition;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      return true;
    }
    this._current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t2, t1, t3) {
    var nextPosition = $.$$add(t2, 1);
    if ($.$$lt(nextPosition, t3) === true) {
      this._position = nextPosition;
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      return true;
    }
    this._current = null;
    return false;
  },
  get$current: function() {
    return this._current;
  }
};

$$._Manager = {"": "Object;nextIsolateId=,currentManagerId,nextManagerId,currentContext>,rootContext,topEventLoop>,fromCommandLine,isWorker>,supportsWorkers,isolates,mainManager,managers",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      t2 = !($.get$globalWorker() == null) && !($.get$IsolateNatives_thisScript() == null);
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true && $.isEmpty(this.isolates) === true && $.$$eq(this.topEventLoop.get$activeTimerCount(), 0) === true)
      this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "close"])));
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map();
    this.managers = $.Map_Map();
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {"": "Object;id>,ports>,isolateStatics",
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    this._setGlobals$0();
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (!(old == null))
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    return $.$$index(this.ports, portId);
  },
  register$2: function(portId, port) {
    if (this.ports.containsKey$1(portId) === true)
      throw $.$$throw($._ExceptionImplementation$("Registry: ports must be registered only once."));
    $.$$indexSet(this.ports, portId, port);
    $.$$indexSet($globalState.isolates, this.id, this);
  },
  unregister$1: function(portId) {
    $.remove(this.ports, portId);
    if ($.isEmpty(this.ports) === true)
      $.remove($globalState.isolates, this.id);
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.get$nextIsolateId();
    t1.set$nextIsolateId($.$$add(t2, 1));
    this.id = t2;
    this.ports = $.Map_Map();
    this.isolateStatics = new Isolate;
  }
};

$$._EventLoop = {"": "Object;events,activeTimerCount=",
  enqueue$3: function(isolate, fn, msg) {
    $.addLast(this.events, $._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if ($.isEmpty(t1) === true)
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if (!($globalState.rootContext == null) && $globalState.isolates.containsKey$1($globalState.rootContext.get$id()) === true && $globalState.fromCommandLine === true && $.isEmpty($globalState.rootContext.get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if (!($.get$globalWindow() == null))
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0() === true;)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)])));
      }

  }
};

$$._IsolateEvent = {"": "Object;isolate,fn,message",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._MainManagerStub = {"": "Object;",
  get$id: function() {
    return 0;
  },
  postMessage$1: function(msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function() {
  }
};

$$._BaseSendPort = {"": "Object;_isolateId>",
  _checkReplyTo$1: function(replyTo) {
    if (!(replyTo == null) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_NativeJsSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_WorkerSendPort) && !(typeof replyTo === "object" && replyTo !== null && !!replyTo.$is_BufferingSendPort))
      throw $.$$throw($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(message, port.toSendPort$0());
    port.receive$1(new $._BaseSendPort_call_anon(completer, port));
    return completer.future;
  },
  $isSendPort: true
};

$$._NativeJsSendPort = {"": "_BaseSendPort;_receivePort>,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!other.$is_NativeJsSendPort && $.$$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function() {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort = {"": "_BaseSendPort;_workerId>,_receivePortId,_isolateId",
  send$2: function(message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  $eq: function(other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!other.$is_WorkerSendPort)
      t1 = $.$$eq(this._workerId, other._workerId) === true && $.$$eq(this._isolateId, other._isolateId) === true && $.$$eq(this._receivePortId, other._receivePortId) === true;
    else
      t1 = false;
    return t1;
  },
  get$hashCode: function() {
    return $.$$xor($.$$xor($.$$shl(this._workerId, 16), $.$$shl(this._isolateId, 8)), this._receivePortId);
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$.ReceivePortImpl = {"": "Object;_id>,_callback>",
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  receive$1: function(onMessage) {
    this._callback = onMessage;
  },
  close$0: function() {
    this._callback = null;
    $globalState.currentContext.unregister$1(this._id);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $globalState.currentContext.get$id());
  },
  ReceivePortImpl$0: function() {
    $._globalState().get$currentContext().register$2(this._id, this);
  }
};

$$._PendingSendPortFinder = {"": "_MessageTraverser;ports>,_visited",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    if (!($.$$index(this._visited, list) == null))
      return;
    $.$$indexSet(this._visited, list, true);
    $.forEach(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    if (!($.$$index(this._visited, map) == null))
      return;
    $.$$indexSet(this._visited, map, true);
    $.forEach(map.get$values(), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (!!port.$is_BufferingSendPort && port._port == null)
      this.ports.push(port.get$_futurePort());
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsSerializer = {"": "_Serializer;_nextFreeRefId,_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(x));
  },
  visitNativeJsSendPort$1: function(port) {
    return ["sendport", $globalState.currentManagerId, port._isolateId, port._receivePort.get$_id()];
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {"": "_Copier;_visited",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!x.$is_NativeJsSendPort)
      return this.visitNativeJsSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_WorkerSendPort)
      return this.visitWorkerSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$is_BufferingSendPort)
      return this.visitBufferingSendPort$1(x);
    throw $.$$throw("Illegal underlying port " + $.S(this.get$p()));
  },
  visitNativeJsSendPort$1: function(port) {
    return $._NativeJsSendPort$(port._receivePort, port._isolateId);
  },
  visitWorkerSendPort$1: function(port) {
    return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
  },
  visitBufferingSendPort$1: function(port) {
    var t1 = port._port;
    if (!(t1 == null))
      return this.visitSendPort$1(t1);
    else
      throw $.$$throw("internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.");
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {"": "_Deserializer;_deserialized",
  deserializeSendPort$1: function(x) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$JSArrayJSString(x);
    managerId = t1.$index(x, 1);
    isolateId = t1.$index(x, 2);
    receivePortId = t1.$index(x, 3);
    if ($.$$eq(managerId, $globalState.currentManagerId) === true) {
      isolate = $.$$index($globalState.isolates, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  }
};

$$._JsVisitedMap = {"": "Object;tagged",
  $index: function(object) {
    return object['__MessageTraverser__attached_info__'];
  },
  $indexSet: function(object, info) {
    $.add(this.tagged, object);
    object['__MessageTraverser__attached_info__'] = info;
  },
  reset$0: function() {
    this.tagged = $.List_List(0);
  },
  cleanup$0: function() {
    var $length, i;
    $length = $.length(this.tagged);
    if (typeof $length !== "number")
      return this.cleanup$0$bailout(1, $length);
    i = 0;
    for (; i < $length; ++i)
      $.$$index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  },
  cleanup$0$bailout: function(state0, $length) {
    var i = 0;
    for (; $.CONSTANT5.$lt(i, $length); ++i)
      $.$$index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {"": "Object;",
  $index: function(object) {
    return;
  },
  $indexSet: function(object, info) {
  },
  reset$0: function() {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {"": "Object;",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    this._visited.reset$0();
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || x.$isList()))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && x.$isMap())
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!x.$isSendPortSync)
      return this.visitSendPortSync$1(x);
    return this.visitObject$1(x);
  },
  visitObject$1: function(x) {
    throw $.$$throw("Message serialization: Illegal value " + $.S(x) + " passed");
  }
};

$$._Copier = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copy, len, i, t1;
    if (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior())
      return this.visitList$1$bailout1(1, list);
    copy = $.$$index(this._visited, list);
    if (!(copy == null))
      return copy;
    len = list.length;
    copy = $.List_List(len);
    $.$$indexSet(this._visited, list, copy);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        copy = $.$$index(this._visited, list);
        if (!(copy == null))
          return copy;
        t1 = $.getInterceptor$JSArrayJSString(list);
        len = t1.get$length(list);
      case 2:
        var copy, i, t2;
        state0 = 0;
        copy = $.List_List(len);
        $.$$indexSet(this._visited, list, copy);
        for (i = 0; $.CONSTANT5.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= copy.length)
            throw $.ioore(i);
          copy[i] = t2;
        }
        return copy;
    }
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t1.copy_0 = $.$$index(this._visited, map);
    t2 = t1.copy_0;
    if (!(t2 == null))
      return t2;
    t1.copy_0 = $._HashMapImpl$();
    $.$$indexSet(this._visited, map, t1.copy_0);
    map.forEach$1(new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Serializer = {"": "_MessageTraverser;",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var copyId, id;
    copyId = $.$$index(this._visited, list);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet(this._visited, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var copyId, id;
    copyId = $.$$index(this._visited, map);
    if (!(copyId == null))
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    $.$$indexSet(this._visited, map, id);
    return ["map", id, this._serializeList$1($.toList(map.get$keys())), this._serializeList$1($.toList(map.get$values()))];
  },
  _serializeList$1: function(list) {
    var len, result, i, t1;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len);
    for (i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t1 = this._dispatch$1(list[i]);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list, t1, len) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor$JSArrayJSString(list);
        len = t1.get$length(list);
      case 2:
        var result, i, t2;
        state0 = 0;
        result = $.List_List(len);
        for (i = 0; $.CONSTANT5.$lt(i, len); ++i) {
          t2 = this._dispatch$1(t1.$index(list, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  }
};

$$._Deserializer = {"": "Object;",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $._HashMapImpl$();
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch ($.$$index(x, 0)) {
      case "ref":
        return this._deserializeRef$1(x);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      default:
        return this.deserializeObject$1(x);
    }
  },
  _deserializeRef$1: function(x) {
    var id = $.$$index(x, 1);
    return $.$$index(this._deserialized, id);
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$JSArrayJSString(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.$isJavaScriptIndexingBehavior())
      return this._deserializeList$1$bailout(1, dartList, id);
    $.$$indexSet(this._deserialized, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id, t2, len) {
    switch (state0) {
      case 0:
        t1 = $.getInterceptor$JSArrayJSString(x);
        id = t1.$index(x, 1);
        dartList = t1.$index(x, 2);
      case 1:
        state0 = 0;
        $.$$indexSet(this._deserialized, id, dartList);
        t2 = $.getInterceptor$JSArrayJSString(dartList);
        len = t2.get$length(dartList);
      case 2:
        var t1, i;
        state0 = 0;
        for (i = 0; $.CONSTANT5.$lt(i, len); ++i)
          t2.$indexSet(dartList, i, this._deserializeHelper$1(t2.$index(dartList, i)));
        return dartList;
    }
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, keys, values, len, i, key;
    result = $._HashMapImpl$();
    t1 = $.getInterceptor$JSArrayJSString(x);
    id = t1.$index(x, 1);
    $.$$indexSet(this._deserialized, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !keys.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(1, x, result, keys, t1);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !values.$isJavaScriptIndexingBehavior()))
      return this._deserializeMap$1$bailout(2, 0, result, keys, 0, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, x, result, keys, t1, values, t3, len) {
    switch (state0) {
      case 0:
        result = $._HashMapImpl$();
        t1 = $.getInterceptor$JSArrayJSString(x);
        id = t1.$index(x, 1);
        $.$$indexSet(this._deserialized, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(keys);
        len = t3.get$length(keys);
      case 3:
        var id, i;
        state0 = 0;
        for (t1 = $.getInterceptor$JSArrayJSString(values), i = 0; $.CONSTANT5.$lt(i, len); ++i)
          result.$indexSet(this._deserializeHelper$1(t3.$index(keys, i)), this._deserializeHelper$1(t1.$index(values, i)));
        return result;
    }
  },
  deserializeObject$1: function(x) {
    throw $.$$throw("Unexpected serialized object");
  }
};

$$.TimerImpl = {"": "Object;_once,_inEventLoop,_handle<",
  cancel$0: function() {
    if (!($.get$globalThis().setTimeout == null)) {
      if (this._inEventLoop === true)
        throw $.$$throw($.UnsupportedError$("Timer in event loop cannot be canceled."));
      if (this._handle == null)
        return;
      var t1 = $globalState.topEventLoop;
      t1.set$activeTimerCount($.$$sub(t1.get$activeTimerCount(), 1));
      if (this._once)
        $.get$globalThis().clearTimeout(this._handle);
      else
        $.get$globalThis().clearInterval(this._handle);
      this._handle = null;
    } else
      throw $.$$throw($.UnsupportedError$("Canceling a timer."));
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if ($.$$eq(milliseconds, 0) === true)
      t1 = $.hasTimer() !== true || $._globalState().get$isWorker() === true;
    else
      t1 = false;
    if (t1) {
      $._globalState().get$topEventLoop().enqueue$3($._globalState().get$currentContext(), new $.anon(this, callback), "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer() === true) {
      t1 = $._globalState().get$topEventLoop();
      t1.set$activeTimerCount($.$$add(t1.get$activeTimerCount(), 1));
      t1 = new $.internalCallback(this, callback);
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(t1, 0), milliseconds);
    } else
      throw $.$$throw($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.AsyncError = {"": "Object;error>,stackTrace>,cause>",
  _writeOn$1: function(buffer) {
    var message, exception, t1;
    buffer.add$1("'");
    message = null;
    try {
      message = $.toString(this.error);
    } catch (exception) {
      $.unwrapException(exception);
      message = $.Error_safeToString(this.error);
    }

    buffer.add$1(message);
    buffer.add$1("'\n");
    t1 = this.stackTrace;
    if (!(t1 == null)) {
      buffer.add$1("Stack trace:\n");
      buffer.add$1($.toString(t1));
      buffer.add$1("\n");
    }
  },
  toString$0: function() {
    var buffer, cause;
    buffer = $.JsStringBuffer$("");
    buffer.add$1("AsyncError: ");
    this._writeOn$1(buffer);
    cause = this.cause;
    for (; !(cause == null);) {
      buffer.add$1("Caused by: ");
      cause._writeOn$1(buffer);
      cause = cause.get$cause();
    }
    return buffer.toString$0();
  },
  throwDelayed$0: function() {
    var reportError, exception;
    reportError = new $.AsyncError_throwDelayed_reportError(this);
    try {
      $.TimerImpl$(0, new $.AsyncError_throwDelayed_anon(this, reportError));
    } catch (exception) {
      $.unwrapException(exception);
      reportError.call$0();
    }

  },
  $isAsyncError: true
};

$$._CompleterImpl = {"": "Object;future,_isComplete",
  complete$1: function(value) {
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    this.future._setValue$1(value);
  },
  completeError$2: function(error, stackTrace) {
    var asyncError;
    if (this._isComplete)
      throw $.$$throw($.StateError$("Future already completed"));
    this._isComplete = true;
    asyncError = typeof error === "object" && error !== null && !!error.$isAsyncError ? error : $.AsyncError$(error, stackTrace);
    this.future._setError$1(asyncError);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {"": "Object;future,_nextListener=",
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {"": "Object;_state,_resultOrListeners>",
  get$_isComplete: function() {
    return $.$$eq(this._state, 0) !== true;
  },
  get$_hasValue: function() {
    return $.$$eq(this._state, 1);
  },
  get$_hasError: function() {
    return $.$$eq($.$$and(this._state, 2), 0) !== true;
  },
  get$_hasUnhandledError: function() {
    return $.$$eq($.$$and(this._state, 4), 0) !== true;
  },
  _clearUnhandledError$0: function() {
    this._state = $.$$and(this._state, 4294967291);
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (this.get$_isComplete() !== true) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError() === true) {
      if (!(onError == null))
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue() === true)
      return $._FutureWrapper$(this);
    if (this.get$_isComplete() !== true) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.TimerImpl$(0, new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._clearUnhandledError$0();
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.TimerImpl$(0, new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; !(listeners == null); listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete() === true)
      throw $.$$throw($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (!(listeners0 == null)) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = $.$$or(this._state, 4);
    $.TimerImpl$(0, new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _addListener$1: function(listener) {
    listener.set$_nextListener(this._resultOrListeners);
    this._resultOrListeners = listener;
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; !(current == null); prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    if (this.get$_isComplete() !== true)
      this._addListener$1(future._asListener$0());
    else if (this.get$_hasValue() === true)
      future._setValue$1(this._resultOrListeners);
    else {
      this._clearUnhandledError$0();
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!result.$isFuture)
      if (!!result.$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    else
      this._setValue$1(result);
  },
  _asListener$0: function() {
    return $._FutureListenerWrapper$(this);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._TransformFuture = {"": "_FutureImpl;_nextListener=",
  _subscribeTo$1: function(future) {
    future._addListener$1(this);
  }
};

$$._ThenFuture = {"": "_TransformFuture;_onValue,_nextListener,_state,_resultOrListeners",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$(e0, s));
        return;
      }
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  }
};

$$._CatchErrorFuture = {"": "_TransformFuture;_test,_onError,_nextListener,_state,_resultOrListeners",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, e1, s0, exception, t1;
    if (!(this._test == null)) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error.get$error());
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e, s, error));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e0 = t1;
        this._setError$1(e0);
        return;
      } else {
        e1 = t1;
        s0 = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e1, s0, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._SubscribeFuture = {"": "_ThenFuture;_onError,_onValue,_nextListener,_state,_resultOrListeners",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, e0, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
        e = t1;
        this._setError$1(e);
        return;
      } else {
        e0 = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($.AsyncError$withCause(e0, s, error));
        return;
      }
    }

    this._setOrChainValue$1(result);
  }
};

$$._FutureWrapper = {"": "Object;_future",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Stream = {"": "Object;",
  where$1: function(test) {
    return $._WhereStream$(this, test);
  },
  contains$1: function(match) {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_contains_anon(t1, match, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_contains_anon0(future), t3, true);
    return future;
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  get$length: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    t2 = new $.Stream_length_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_length_anon0(t1, future), t3, true);
    return future;
  },
  get$isEmpty: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t2 = new $.Stream_isEmpty_anon(t1, future);
    t3 = future.get$_setError();
    t1.subscription_0 = this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_isEmpty_anon0(future), t3, true);
    return future;
  },
  toList$0: function() {
    var result, future, t1, t2;
    result = [];
    future = $._FutureImpl$();
    t1 = new $.Stream_toList_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toList_anon0(result, future), t2, true);
    return future;
  },
  toSet$0: function() {
    var result, future, t1, t2;
    result = $.HashSet$();
    future = $._FutureImpl$();
    t1 = new $.Stream_toSet_anon(result);
    t2 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t1, new $.Stream_toSet_anon0(result, future), t2, true);
    return future;
  },
  get$last: function() {
    var t1, future, t2, t3;
    t1 = {};
    future = $._FutureImpl$();
    t1.result_0 = null;
    t1.foundResult_1 = false;
    t2 = new $.Stream_last_anon(t1);
    t3 = future.get$_setError();
    this.listen$4$onDone$onError$unsubscribeOnError(t2, new $.Stream_last_anon0(t1, future), t3, true);
    return future;
  }
};

$$.StreamSubscription = {"": "Object;"};

$$._ForwardingStream = {"": "Stream;",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    if (onData == null)
      onData = $._nullDataHandler;
    if (onError == null)
      onError = $._nullErrorHandler;
    if (onDone == null)
      onDone = $._nullDoneHandler;
    return this._createSubscription$4(onData, onError, onDone, true === unsubscribeOnError);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  },
  _createSubscription$4: function(onData, onError, onDone, unsubscribeOnError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, unsubscribeOnError);
  },
  _handleData$2: function(data, sink) {
    sink._sendData$1(data);
  },
  _handleError$2: function(error, sink) {
    sink._sendError$1(error);
  },
  _handleDone$1: function(sink) {
    sink._sendDone$0();
  }
};

$$._BaseStreamSubscription = {"": "Object;",
  _liblib3$_onData$1: function(arg0) {
    return this._liblib3$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone) {
    if (this._liblib3$_onData == null)
      this._liblib3$_onData = $._nullDataHandler;
    if (this._onError == null)
      this._onError = $._nullErrorHandler;
    if (this._onDone == null)
      this._onDone = $._nullDoneHandler;
  }
};

$$._ForwardingStreamSubscription = {"": "_BaseStreamSubscription;_stream,_unsubscribeOnError,_subscription,_liblib3$_onData,_onError,_onDone",
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 == null)
      throw $.$$throw($.StateError$("Subscription has been unsubscribed"));
    t1.cancel$0();
    this._subscription = null;
  },
  _sendData$1: function(data) {
    this._liblib3$_onData$1(data);
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._unsubscribeOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  _sendDone$0: function() {
    var t1 = this._subscription;
    if (!(t1 == null)) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._stream._handleError$2(error, this);
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    this._stream._handleDone$1(this);
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _unsubscribeOnError) {
    var t1, t2, t3;
    t1 = this._stream._source;
    t2 = this.get$_handleData();
    t3 = this.get$_handleError();
    this._subscription = t1.listen$3$onDone$onError(t2, this.get$_handleDone(), t3);
  }
};

$$._WhereStream = {"": "_ForwardingStream;_test,_source",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      sink._sendError$1($._asyncError(e, s, null));
      return;
    }

    if (satisfies === true)
      sink._sendData$1(inputEvent);
  }
};

$$.SpawnIDE = {"": "Object;dockManager>,header",
  onResized$1: function($event) {
    var headerHeight = this.header.get$clientHeight();
    this.dockManager.resize$2(window.innerWidth, $.$$sub(window.innerHeight, headerHeight));
  },
  get$onResized: function() {
    return new $.BoundClosure$1(this, "onResized$1");
  },
  SpawnIDE$0: function() {
    var solution, properties, toolbox, outline, problems, output, editor1, editor2, editor3, t1, documentNode, outlineNode, outputNode;
    this.header = $.query("#header");
    this.dockManager = $.DockManager$($.query("#my_dock_manager"));
    this.dockManager.initialize$0();
    $.add($.window().get$on().get$resize(), this.get$onResized());
    this.onResized$1(null);
    solution = $.PanelContainer$($.query("#solution_window"), this.dockManager, "Panel");
    properties = $.PanelContainer$($.query("#properties_window"), this.dockManager, "Panel");
    toolbox = $.PanelContainer$($.query("#toolbox_window"), this.dockManager, "Panel");
    outline = $.PanelContainer$($.query("#outline_window"), this.dockManager, "Panel");
    problems = $.PanelContainer$($.query("#problems_window"), this.dockManager, "Panel");
    output = $.EditorPanel$($.query("#output_window"), this.dockManager, "Panel");
    editor1 = $.EditorPanel$($.query("#editor1_window"), this.dockManager, "Panel");
    editor2 = $.EditorPanel$($.query("#editor2_window"), this.dockManager, "Panel");
    editor3 = $.EditorPanel$($.query("#editor3_window"), this.dockManager, "Panel");
    t1 = this.dockManager;
    documentNode = t1.get$context().get$model().get$documentManagerNode();
    outlineNode = t1.dockLeft$3(documentNode, outline, 0.15);
    this.dockManager.dockFill$2(outlineNode, solution);
    this.dockManager.dockDown$3(outlineNode, properties, 0.6);
    outputNode = this.dockManager.dockDown$3(documentNode, output, 0.2);
    this.dockManager.dockRight$3(outputNode, problems, 0.4);
    this.dockManager.dockRight$3(documentNode, toolbox, 0.2);
    this.dockManager.dockFill$2(documentNode, editor1);
    this.dockManager.dockFill$2(documentNode, editor2);
    this.dockManager.dockFill$2(documentNode, editor3);
  }
};

$$.IdeException = {"": "Object;message"};

$$.EditorPanel = {"": "PanelContainer;codeMirrorBase,codeMirrorScroller,codeMirrorScrollBar,elementContent,name,dockManager,undockInitiator,elementPanel,elementTitle,elementTitleText,elementButtonClose,elementContentHost,containerType,title,iconName,closeButtonClickedHandler,_floatingDialog,_cachedWidth,_cachedHeight",
  resize$2: function(_width, _height) {
    var t1, clientWidth, clientHeight;
    $.PanelContainer.prototype.resize$2.call(this, _width, _height);
    t1 = this.elementContent;
    clientWidth = t1.get$clientWidth();
    clientHeight = t1.get$clientHeight();
    t1 = $.S(clientWidth) + "px";
    this.codeMirrorBase.get$style().set$width(t1);
    t1 = $.S(clientHeight) + "px";
    this.codeMirrorBase.get$style().set$height(t1);
    t1 = $.S(clientHeight) + "px";
    this.codeMirrorScroller.get$style().set$height(t1);
    t1 = $.S(clientHeight) + "px";
    this.codeMirrorScrollBar.get$style().set$height(t1);
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  _initialize$0: function() {
    var t1, div, t2;
    for (t1 = $.iterator(this.elementContent.get$nodes()); t1.moveNext$0() === true;) {
      div = t1.get$current();
      if (typeof div === "object" && div !== null && div.$isDivElement())
        if ($.contains(div.get$classes(), "CodeMirror") === true) {
          this.codeMirrorBase = div;
          break;
        }
    }
    t1 = this.codeMirrorBase;
    if (t1 == null)
      throw $.$$throw($.IdeException$("Not a valid editor control. Make sure code mirror is initailized with this panel"));
    for (t2 = $.iterator(t1.get$nodes()); t2.moveNext$0() === true;) {
      div = t2.get$current();
      if (typeof div === "object" && div !== null && div.$isDivElement()) {
        if ($.contains(div.get$classes(), "CodeMirror-scroll") === true)
          this.codeMirrorScroller = div;
        if ($.contains(div.get$classes(), "CodeMirror-scrollbar") === true)
          this.codeMirrorScrollBar = div;
      }
    }
    if (this.codeMirrorScroller == null || this.codeMirrorScrollBar == null)
      throw $.$$throw($.IdeException$("Not a valid editor control. Cannot find scroller. Make sure code mirror is initailized with this panel"));
  },
  EditorPanel$3: function(elementContent, dockManager, title) {
    this._initialize$0();
  }
};

$$.BodyElementEvents = {"": "ElementEvents;_ptr",
  get$error: function() {
    return this.$index("error");
  },
  get$resize: function() {
    return this.$index("resize");
  },
  resize$2: function(arg0, arg1) {
    return this.get$resize().call$2(arg0, arg1);
  }
};

$$.DocumentEvents = {"": "ElementEvents;_ptr"};

$$._ChildrenElementList = {"": "Object;_liblib$_element,_childElements",
  toList$0: function() {
    var t1, t3, output, len, i, t2;
    t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.toList$0$bailout(1, t1);
    t3 = t1.length;
    output = $.List_List$fixedLength(t3, null);
    for (len = t1.length, i = 0; i < len; ++i) {
      t2 = t1[i];
      if (i >= t3)
        throw $.ioore(i);
      output[i] = t2;
    }
    return output;
  },
  toList$0$bailout: function(state0, t1, t3, len, output) {
    switch (state0) {
      case 0:
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(t1);
        output = $.List_List$fixedLength(t3.get$length(t1), null);
        len = t3.get$length(t1);
      case 2:
        var i, t2;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT5.$lt(i, len); ++i) {
          t2 = t3.$index(t1, i);
          if (i >= output.length)
            throw $.ioore(i);
          output[i] = t2;
        }
        return output;
    }
  },
  toSet$0: function() {
    var output, t1, len, i;
    output = $.HashSet$();
    t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.toSet$0$bailout(1, output, t1);
    len = t1.length;
    i = 0;
    for (; i < len; ++i) {
      if (i >= t1.length)
        throw $.ioore(i);
      output.add$1(t1[i]);
    }
    return output;
  },
  toSet$0$bailout: function(state0, output, t1, t3, len) {
    switch (state0) {
      case 0:
        output = $.HashSet$();
        t1 = this._childElements;
      case 1:
        state0 = 0;
        t3 = $.getInterceptor$JSArrayJSString(t1);
        len = t3.get$length(t1);
      case 2:
        var i;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT5.$lt(i, len); ++i)
          output.add$1(t3.$index(t1, i));
        return output;
    }
  },
  contains$1: function(element) {
    return $.contains(this._childElements, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = $.iterator(this._childElements); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  get$isEmpty: function() {
    return this._liblib$_element.firstElementChild == null;
  },
  get$length: function() {
    return $.length(this._childElements);
  },
  $index: function(index) {
    var t1 = this._childElements;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, t1, index) {
    return $.$$index(t1, index);
  },
  $indexSet: function(index, value) {
    var t1, t2;
    t1 = this._liblib$_element;
    t2 = this._childElements;
    if (typeof t2 !== "string" && (typeof t2 !== "object" || t2 === null || t2.constructor !== Array && !t2.$isJavaScriptIndexingBehavior()))
      return this.$$indexSet$bailout(1, index, value, t1, t2);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t2.length)
      throw $.ioore(index);
    t1.$$dom_replaceChild$2(value, t2[index]);
  },
  $$indexSet$bailout: function(state0, index, value, t1, t2) {
    t1.$$dom_replaceChild$2(value, $.$$index(t2, index));
  },
  add$1: function(value) {
    this._liblib$_element.$$dom_appendChild$1(value);
    return value;
  },
  addLast$1: function(value) {
    this._liblib$_element.$$dom_appendChild$1(value);
    return value;
  },
  get$iterator: function() {
    return $.iterator(this.toList$0());
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.iterator(iterable), t2 = this._liblib$_element; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  remove$1: function(object) {
    var t1, t2;
    if (typeof object === "object" && object !== null && object.$isElement()) {
      t1 = object.parentNode;
      t2 = this._liblib$_element;
      if (t1 === t2)
        t2.$$dom_removeChild$1(object);
    }
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnimplementedError$(null));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.Lists_getRange(this, start, rangeLength, []));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    this._liblib$_element.textContent = "";
  },
  removeLast$0: function() {
    var result = this.get$last();
    if (!(result == null))
      this._liblib$_element.$$dom_removeChild$1(result);
    return result;
  },
  get$last: function() {
    var result = this._liblib$_element.lastElementChild;
    if (result == null)
      throw $.$$throw($.StateError$("No elements"));
    return result;
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$._FrozenElementList = {"": "Object;_nodeList",
  contains$1: function(element) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      if ($.$$eq(t1.get$current(), element) === true)
        return true;
    return false;
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.isEmpty(this._nodeList);
  },
  get$length: function() {
    return $.length(this._nodeList);
  },
  $index: function(index) {
    var t1 = this._nodeList;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, t1, index);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, t1, index) {
    return $.$$index(t1, index);
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$iterator: function() {
    return $._FrozenElementListIterator$(this);
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  getRange$2: function(start, rangeLength) {
    return $._FrozenElementList$_wrap($.getRange(this._nodeList, start, rangeLength));
  },
  indexOf$2: function(element, start) {
    return $.indexOf(this._nodeList, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$(""));
  },
  remove$1: function(element) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$(""));
  },
  get$last: function() {
    return $.last(this._nodeList);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$._FrozenElementListIterator = {"": "Object;_liblib$_list,_liblib$_index,_liblib$_current",
  moveNext$0: function() {
    var t1, nextIndex, t2;
    t1 = this._liblib$_index;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextIndex = t1 + 1;
    t1 = this._liblib$_list;
    t2 = t1.get$length();
    if (typeof t2 !== "number")
      return this.moveNext$0$bailout(2, t1, t2, nextIndex);
    if (nextIndex < t2) {
      this._liblib$_current = t1.$index(nextIndex);
      this._liblib$_index = nextIndex;
      return true;
    }
    this._liblib$_index = t1.get$length();
    this._liblib$_current = null;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, t2, nextIndex) {
    switch (state0) {
      case 0:
        t1 = this._liblib$_index;
      case 1:
        state0 = 0;
        nextIndex = $.$$add(t1, 1);
        t1 = this._liblib$_list;
        t2 = t1.get$length();
      case 2:
        state0 = 0;
        if ($.$$lt(nextIndex, t2) === true) {
          this._liblib$_current = t1.$index(nextIndex);
          this._liblib$_index = nextIndex;
          return true;
        }
        this._liblib$_index = t1.get$length();
        this._liblib$_current = null;
        return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$._ElementCssClassSet = {"": "CssClassSet;_liblib$_element",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = $.HashSet$();
    for (t1 = $.iterator($.split(this._liblib$_element.className, " ")); t1.moveNext$0() === true;) {
      trimmed = $.trim(t1.get$current());
      if ($.isEmpty(trimmed) !== true)
        s.add$1(trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1;
    $.List_List$from(s);
    t1 = $.join(s, " ");
    this._liblib$_element.className = t1;
  }
};

$$.ElementEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.$index("error");
  },
  get$reset: function() {
    return this.$index("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  }
};

$$.Events = {"": "Object;_ptr",
  $index: function(type) {
    return $.EventListenerList$(this._ptr, type);
  }
};

$$.EventListenerList = {"": "Object;_ptr,_type",
  add$2: function(listener, useCapture) {
    this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
    return this;
  },
  add$1: function(listener) {
    return this.add$2(listener, false);
  },
  remove$2: function(listener, useCapture) {
    this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
    return this;
  },
  remove$1: function(listener) {
    return this.remove$2(listener, false);
  }
};

$$.InputElementEvents = {"": "ElementEvents;_ptr"};

$$.MediaElementEvents = {"": "ElementEvents;_ptr"};

$$._ChildNodeListLazy = {"": "Object;_this",
  get$last: function() {
    var result = this._this.lastChild;
    return result;
  },
  add$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addLast$1: function(value) {
    this._this.$$dom_appendChild$1(value);
  },
  addAll$1: function(iterable) {
    var t1, t2;
    for (t1 = $.iterator(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.$$dom_appendChild$1(t1.get$current());
  },
  removeLast$0: function() {
    var result = this.get$last();
    if (!(result == null))
      this._this.$$dom_removeChild$1(result);
    return result;
  },
  remove$1: function(object) {
    if (!(typeof object === "object" && object !== null && object.$isNode()))
      return;
    if (!(this === object.parentNode))
      return;
    this._this.$$dom_removeChild$1(object);
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  clear$0: function() {
    this._this.textContent = "";
  },
  $indexSet: function(index, value) {
    this._this.$$dom_replaceChild$2(value, this.$index(index));
  },
  get$iterator: function() {
    return $.iterator(this._this.childNodes);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    var t1 = this.get$length();
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  get$length: function() {
    return $.length(this._this.childNodes);
  },
  $index: function(index) {
    var t1 = this._this.childNodes;
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index(t1, index);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$.WindowEvents = {"": "Events;_ptr",
  get$error: function() {
    return this.$index("error");
  },
  get$reset: function() {
    return this.$index("reset");
  },
  reset$0: function() {
    return this.get$reset().call$0();
  },
  get$resize: function() {
    return this.$index("resize");
  },
  resize$2: function(arg0, arg1) {
    return this.get$resize().call$2(arg0, arg1);
  }
};

$$._HTMLFrameSetElementEvents = {"": "ElementEvents;_ptr",
  get$error: function() {
    return this.$index("error");
  },
  get$resize: function() {
    return this.$index("resize");
  },
  resize$2: function(arg0, arg1) {
    return this.get$resize().call$2(arg0, arg1);
  }
};

$$._AttributeMap = {"": "Object;",
  clear$0: function() {
    for (var t1 = $.iterator(this.get$keys()); t1.moveNext$0() === true;)
      this.remove$1(t1.get$current());
  },
  forEach$1: function(f) {
    var t1, t2;
    for (t1 = $.iterator(this.get$keys()); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      f.call$2(t2, this.$index(t2));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i;
    attributes = this._liblib$_element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.$isJavaScriptIndexingBehavior()))
      return this.get$keys$bailout(1, attributes);
    keys = $.List_List(0);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        keys.push(attributes[i].get$$$dom_localName());
      }
    }
    return keys;
  },
  get$keys$bailout: function(state0, attributes, t1, len, keys) {
    switch (state0) {
      case 0:
        attributes = this._liblib$_element.attributes;
      case 1:
        state0 = 0;
        keys = $.List_List(0);
        t1 = $.getInterceptor$JSArrayJSString(attributes);
        len = t1.get$length(attributes);
      case 2:
        var i;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT5.$lt(i, len); ++i)
          if (this._matches$1(t1.$index(attributes, i)) === true)
            keys.push(t1.$index(attributes, i).get$$$dom_localName());
        return keys;
    }
  },
  get$values: function() {
    var attributes, values, len, i;
    attributes = this._liblib$_element.attributes;
    if (typeof attributes !== "string" && (typeof attributes !== "object" || attributes === null || attributes.constructor !== Array && !attributes.$isJavaScriptIndexingBehavior()))
      return this.get$values$bailout(1, attributes);
    values = $.List_List(0);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      if (this._matches$1(attributes[i]) === true) {
        if (i >= attributes.length)
          throw $.ioore(i);
        values.push(attributes[i].get$value());
      }
    }
    return values;
  },
  get$values$bailout: function(state0, attributes, t1, len, values) {
    switch (state0) {
      case 0:
        attributes = this._liblib$_element.attributes;
      case 1:
        state0 = 0;
        values = $.List_List(0);
        t1 = $.getInterceptor$JSArrayJSString(attributes);
        len = t1.get$length(attributes);
      case 2:
        var i;
        state0 = 0;
        i = 0;
        for (; $.CONSTANT5.$lt(i, len); ++i)
          if (this._matches$1(t1.$index(attributes, i)) === true)
            values.push(t1.$index(attributes, i).get$value());
        return values;
    }
  },
  get$isEmpty: function() {
    var t1 = this.get$length();
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  $isMap: function() {
    return true;
  }
};

$$._ElementAttributeMap = {"": "_AttributeMap;_liblib$_element",
  containsKey$1: function(key) {
    return this._liblib$_element.$$dom_hasAttribute$1(key);
  },
  $index: function(key) {
    return this._liblib$_element.$$dom_getAttribute$1(key);
  },
  $indexSet: function(key, value) {
    this._liblib$_element.$$dom_setAttribute$2(key, $.S(value));
  },
  remove$1: function(key) {
    var t1, value;
    t1 = this._liblib$_element;
    value = t1.$$dom_getAttribute$1(key);
    t1.$$dom_removeAttribute$1(key);
    return value;
  },
  get$length: function() {
    return $.length(this.get$keys());
  },
  _matches$1: function(node) {
    return node.get$$$dom_namespaceUri() == null;
  }
};

$$.CssClassSet = {"": "Object;",
  toString$0: function() {
    return $.Strings_join($.List_List$from(this.readClasses$0()), " ");
  },
  get$iterator: function() {
    return $.iterator(this.readClasses$0());
  },
  forEach$1: function(f) {
    $.forEach(this.readClasses$0(), f);
  },
  join$1: function(separator) {
    return $.join(this.readClasses$0(), separator);
  },
  where$1: function(f) {
    return $.where(this.readClasses$0(), f);
  },
  get$isEmpty: function() {
    return $.isEmpty(this.readClasses$0());
  },
  get$length: function() {
    return $.length(this.readClasses$0());
  },
  contains$1: function(value) {
    return $.contains(this.readClasses$0(), value);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  add$1: function(value) {
    this._modify$1(new $.CssClassSet_add_anon(value));
  },
  remove$1: function(value) {
    var s, result;
    if (!(typeof value === "string"))
      return false;
    s = this.readClasses$0();
    result = $.remove(s, value);
    this.writeClasses$1(s);
    return result;
  },
  addAll$1: function(iterable) {
    this._modify$1(new $.CssClassSet_addAll_anon(iterable));
  },
  removeAll$1: function(iterable) {
    this._modify$1(new $.CssClassSet_removeAll_anon(iterable));
  },
  removeMatching$1: function(test) {
    this._modify$1(new $.CssClassSet_removeMatching_anon(test));
  },
  get$last: function() {
    return $.last(this.readClasses$0());
  },
  toList$0: function() {
    return $.toList(this.readClasses$0());
  },
  toSet$0: function() {
    return $.toSet(this.readClasses$0());
  },
  clear$0: function() {
    this._modify$1(new $.CssClassSet_clear_anon());
  },
  _modify$1: function(f) {
    var s = this.readClasses$0();
    f.call$1(s);
    this.writeClasses$1(s);
  },
  $isSet: true,
  $isCollection: function() {
    return true;
  }
};

$$._EventStream = {"": "Stream;_target,_eventType,_useCapture",
  listen$4$onDone$onError$unsubscribeOnError: function(onData, onDone, onError, unsubscribeOnError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$1: function(onData) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, null, null, null);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$onDone$onError$unsubscribeOnError(onData, onDone, onError, null);
  }
};

$$._EventStreamSubscription = {"": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
  cancel$0: function() {
    if (this.get$_canceled() === true)
      throw $.$$throw($.StateError$("Subscription has been canceled."));
    var t1 = this._onData;
    if (!(t1 == null))
      this._target.$$dom_removeEventListener$3(this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    if (!(this._onData == null) && this.get$_paused() !== true)
      this._target.$$dom_addEventListener$3(this._eventType, this._onData, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {"": "Object;_eventType",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._DOMWindowCrossFrame = {"": "Object;_window",
  get$parent: function() {
    return $._DOMWindowCrossFrame__createSafe(this._window.parent);
  },
  close$0: function() {
    return this._window.close();
  }
};

$$.FixedSizeListIterator = {"": "Object;_array,_liblib$_length,_liblib$_position,_liblib$_current",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._liblib$_position;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._liblib$_length;
    if (typeof t1 !== "number")
      return this.moveNext$0$bailout(2, t1, nextPosition);
    if (nextPosition < t1) {
      t1 = this._array;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.moveNext$0$bailout(3, t1, nextPosition);
      if (nextPosition !== (nextPosition | 0))
        throw $.iae(nextPosition);
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._liblib$_current = t1[nextPosition];
      this._liblib$_position = nextPosition;
      return true;
    }
    this._liblib$_current = null;
    this._liblib$_position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._liblib$_position;
      case 1:
        state0 = 0;
        nextPosition = $.$$add(t1, 1);
        t1 = this._liblib$_length;
      case 2:
        state0 = 0;
      case 3:
        if (state0 === 3 || state0 === 0 && $.$$lt(nextPosition, t1) === true)
          switch (state0) {
            case 0:
              t1 = this._array;
            case 3:
              state0 = 0;
              this._liblib$_current = $.$$index(t1, nextPosition);
              this._liblib$_position = nextPosition;
              return true;
          }
        this._liblib$_current = null;
        this._liblib$_position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.FilteredElementList = {"": "Object;_node,_childNodes",
  get$_filtered: function() {
    return $.List_List$from($.where(this._childNodes, new $.FilteredElementList__filtered_anon()));
  },
  forEach$1: function(f) {
    $.forEach(this.get$_filtered(), f);
  },
  $indexSet: function(index, value) {
    this.$index(index).replaceWith$1(value);
  },
  join$1: function(separator) {
    return $.join(this.get$_filtered(), separator);
  },
  add$1: function(value) {
    $.add(this._childNodes, value);
  },
  addAll$1: function(iterable) {
    var t1, t2, t3;
    for (t1 = $.iterator(iterable), t2 = this._childNodes, t3 = $.getInterceptor$JSArray(t2); t1.moveNext$0() === true;)
      t3.add$1(t2, t1.get$current());
  },
  addLast$1: function(value) {
    $.add(this._childNodes, value);
  },
  contains$1: function(element) {
    return typeof element === "object" && element !== null && element.$isElement() && $.contains(this._childNodes, element) === true;
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  removeRange$2: function(start, rangeLength) {
    $.forEach($.getRange(this.get$_filtered(), start, rangeLength), new $.FilteredElementList_removeRange_anon());
  },
  clear$0: function() {
    $.clear(this._childNodes);
  },
  removeLast$0: function() {
    var result = this.get$last();
    if (!(result == null))
      result.remove$0();
    return result;
  },
  where$1: function(f) {
    return $.where(this.get$_filtered(), f);
  },
  remove$1: function(element) {
    var i, t1, indexElement;
    if (!(typeof element === "object" && element !== null && element.$isElement()))
      return;
    i = 0;
    while (true) {
      t1 = this.get$length();
      if (typeof t1 !== "number")
        return this.remove$1$bailout(1, element, i, t1);
      if (!(i < t1))
        break;
      indexElement = this.$index(i);
      if (indexElement === element) {
        indexElement.remove$0();
        return;
      }
      ++i;
    }
  },
  remove$1$bailout: function(state0, element, i, t1) {
    switch (state0) {
      case 0:
        if (!(typeof element === "object" && element !== null && element.$isElement()))
          return;
        i = 0;
      case 1:
        var indexElement;
        L0:
          while (true)
            switch (state0) {
              case 0:
                t1 = this.get$length();
              case 1:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t1))
                  break L0;
                indexElement = this.$index(i);
                if (indexElement === element) {
                  indexElement.remove$0();
                  return;
                }
                ++i;
            }
    }
  },
  removeAll$1: function(elements) {
    $.IterableMixinWorkaround_removeAll(this, elements);
  },
  removeMatching$1: function(test) {
    $.IterableMixinWorkaround_removeMatching(this, test);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    return $.isEmpty(this.get$_filtered());
  },
  get$length: function() {
    return $.length(this.get$_filtered());
  },
  $index: function(index) {
    var t1 = this.get$_filtered();
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
      return this.$$index$bailout(1, index, t1);
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $$index$bailout: function(state0, index, t1) {
    return $.$$index(t1, index);
  },
  get$iterator: function() {
    return $.iterator(this.get$_filtered());
  },
  getRange$2: function(start, rangeLength) {
    return $.getRange(this.get$_filtered(), start, rangeLength);
  },
  indexOf$2: function(element, start) {
    return $.indexOf(this.get$_filtered(), element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    return $.last(this.get$_filtered());
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  }
};

$$._AttributeClassSet = {"": "CssClassSet;_liblib4$_element",
  readClasses$0: function() {
    var classname, s, t1, trimmed;
    classname = $.$$index(this._liblib4$_element.get$attributes(), "class");
    s = $.HashSet$();
    if (classname == null)
      return s;
    for (t1 = $.iterator($.split(classname, " ")); t1.moveNext$0() === true;) {
      trimmed = $.trim(t1.get$current());
      if ($.isEmpty(trimmed) !== true)
        s.add$1(trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var list = $.List_List$from(s);
    $.$$indexSet(this._liblib4$_element.get$attributes(), "class", $.Strings_join(list, " "));
  }
};

$$.Dialog = {"": "Object;elementDialog,panel>,draggable,resizable,eventListener,dockManager>,mouseDownHandler",
  _liblib2$_initialize$0: function() {
    var t1, t2, t3, t4;
    this.panel.set$floatingDialog(this);
    this.elementDialog = document.$$dom_createElement$1("div");
    $.add(this.elementDialog.get$nodes(), this.panel.get$elementPanel());
    t1 = this.panel;
    this.draggable = $.DraggableContainer$(this, t1, this.elementDialog, t1.get$elementTitle());
    t2 = this.draggable;
    this.resizable = $.ResizableContainer$(this, t2, t2.get$topLevelElement());
    $.add(document.get$body().get$nodes(), this.elementDialog);
    $.add(this.elementDialog.get$classes(), "dialog-floating");
    $.add(this.elementDialog.get$classes(), "rounded-corner-top");
    $.add(this.panel.get$elementTitle().get$classes(), "rounded-corner-top");
    this.mouseDownHandler = this.elementDialog.get$onMouseDown().listen$1(this.get$onMouseDown());
    t3 = this.panel.get$elementPanel();
    t4 = t3.get$clientWidth();
    t3 = t3.get$clientHeight();
    this.resizable.resize$2(t4, t3);
    $.Dialog_zIndexCounter = $.$$add($.Dialog_zIndexCounter, 1);
    t3 = $.S($.Dialog_zIndexCounter);
    this.elementDialog.get$style().set$zIndex(t3);
  },
  setPosition$2: function(x, y) {
    var t1 = $.S(x) + "px";
    this.elementDialog.get$style().set$left(t1);
    t1 = $.S(y) + "px";
    this.elementDialog.get$style().set$top(t1);
  },
  onMouseDown$1: function(e) {
    var t1;
    $.Dialog_zIndexCounter = $.$$add($.Dialog_zIndexCounter, 1);
    t1 = $.S($.Dialog_zIndexCounter);
    this.elementDialog.get$style().set$zIndex(t1);
  },
  get$onMouseDown: function() {
    return new $.BoundClosure$1(this, "onMouseDown$1");
  },
  destroy$0: function() {
    var t1 = this.mouseDownHandler;
    if (!(t1 == null)) {
      t1.cancel$0();
      this.mouseDownHandler = null;
    }
    $.remove(this.elementDialog.get$classes(), "rounded-corner-top");
    $.remove(this.panel.get$elementTitle().get$classes(), "rounded-corner-top");
    this.elementDialog.remove$0();
    this.draggable.removeDecorator$0();
    this.panel.get$elementPanel().remove$0();
    this.panel.set$floatingDialog(null);
  },
  resize$2: function(width, height) {
    this.resizable.resize$2(width, height);
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  Dialog$2: function(panel, dockManager) {
    this._liblib2$_initialize$0();
    this.eventListener = this.dockManager;
  }
};

$$.DraggableContainer = {"": "Object;containerType>,delegate,topLevelElement>,dragHandle,dialog,eventListener,mouseDownHandler,mouseUpHandler>,mouseMoveHandler>,dragOffset,previousMousePosition",
  get$dockManager: function() {
    return this.delegate.get$dockManager();
  },
  destroy$0: function() {
    this.mouseDownHandler.cancel$0();
    this.delegate.destroy$0();
  },
  setActiveChild$1: function(child) {
  },
  get$minimumAllowedChildNodes: function() {
    return this.delegate.get$minimumAllowedChildNodes();
  },
  get$width: function() {
    return this.delegate.get$width();
  },
  get$height: function() {
    return this.delegate.get$height();
  },
  resize$2: function(_width, _height) {
    this.delegate.resize$2(_width, _height);
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  performLayout$1: function(children) {
    this.delegate.performLayout$1(children);
  },
  removeDecorator$0: function() {
    this.mouseDownHandler.cancel$0();
  },
  get$containerElement: function() {
    return this.delegate.get$containerElement();
  },
  onMouseDown$1: function($event) {
    var t1;
    this._startDragging$1($event);
    this.previousMousePosition = $.Point2$($event.get$pageX(), $event.get$pageY());
    t1 = this.mouseMoveHandler;
    if (!(t1 == null)) {
      t1.cancel$0();
      this.mouseMoveHandler = null;
    }
    t1 = this.mouseUpHandler;
    if (!(t1 == null)) {
      t1.cancel$0();
      this.mouseUpHandler = null;
    }
    this.mouseMoveHandler = window.get$onMouseMove().listen$1(this.get$onMouseMove());
    this.mouseUpHandler = window.get$onMouseUp().listen$1(this.get$onMouseUp());
  },
  get$onMouseDown: function() {
    return new $.BoundClosure$1(this, "onMouseDown$1");
  },
  onMouseUp$1: function($event) {
    this._stopDragging$1($event);
    this.mouseMoveHandler.cancel$0();
    this.mouseMoveHandler = null;
    this.mouseUpHandler.cancel$0();
    this.mouseUpHandler = null;
  },
  get$onMouseUp: function() {
    return new $.BoundClosure$1(this, "onMouseUp$1");
  },
  _startDragging$1: function($event) {
    var t1, t2;
    t1 = this.dialog;
    t2 = t1.eventListener;
    if (!(t2 == null))
      t2.onDialogDragStarted$2(t1, $event);
    $.add(document.get$body().get$classes(), "disable-selection");
  },
  _stopDragging$1: function($event) {
    var t1, t2;
    t1 = this.dialog;
    t2 = t1.eventListener;
    if (!(t2 == null))
      t2.onDialogDragEnded$2(t1, $event);
    $.remove(document.get$body().get$classes(), "disable-selection");
  },
  onMouseMove$1: function($event) {
    var currentMousePosition = $.Point2$($event.get$pageX(), $event.get$pageY());
    this._performDrag$2($.toInt($.$$sub(currentMousePosition.x, this.previousMousePosition.get$x())), $.toInt($.$$sub(currentMousePosition.y, this.previousMousePosition.get$y())));
    this.previousMousePosition = currentMousePosition;
  },
  get$onMouseMove: function() {
    return new $.BoundClosure$1(this, "onMouseMove$1");
  },
  _performDrag$2: function(dx, dy) {
    var t1, left, $top, t2;
    t1 = this.topLevelElement;
    left = $.$$add(dx, $.getPixels(t1.get$style().get$marginLeft()));
    $top = $.$$add(dy, $.getPixels(t1.get$style().get$marginTop()));
    t2 = $.S(left) + "px";
    t1.get$style().set$marginLeft(t2);
    t2 = $.S($top) + "px";
    t1.get$style().set$marginTop(t2);
  },
  DraggableContainer$4: function(dialog, delegate, topLevelElement, dragHandle) {
    var t1, t2;
    this.containerType = this.delegate.get$containerType();
    this.mouseDownHandler = this.dragHandle.get$onMouseDown().listen$1(this.get$onMouseDown());
    t1 = this.topLevelElement;
    t2 = $.S(t1.get$offsetLeft());
    t1.get$style().set$marginLeft(t2);
    t2 = $.S(t1.get$offsetTop());
    t1.get$style().set$marginTop(t2);
  }
};

$$.ResizableContainer = {"": "Object;containerType>,delegate,topLevelElement>,dialog,resizeHandles,dragOffset,previousMousePosition,readyToProcessNextResize",
  get$dockManager: function() {
    return this.delegate.get$dockManager();
  },
  setActiveChild$1: function(child) {
  },
  get$minimumAllowedChildNodes: function() {
    return this.delegate.get$minimumAllowedChildNodes();
  },
  _buildResizeHandles$0: function() {
    this.resizeHandles = $.List_List(0);
    this._buildResizeHandle$4(false, true, true, false);
    this._buildResizeHandle$4(true, false, false, true);
    this._buildResizeHandle$4(false, true, false, true);
    this._buildResizeHandle$4(true, false, false, false);
    this._buildResizeHandle$4(false, true, false, false);
    this._buildResizeHandle$4(false, false, true, false);
    this._buildResizeHandle$4(false, false, false, true);
  },
  _buildResizeHandle$4: function(east, west, north, south) {
    var handle, verticalClass, horizontalClass, cssClass, t1;
    handle = $.ResizeHandle$();
    handle.east = east;
    handle.west = west;
    handle.north = north;
    handle.south = south;
    handle.element = document.$$dom_createElement$1("div");
    $.add(this.topLevelElement.get$nodes(), handle.element);
    verticalClass = north ? "n" : "";
    if (south)
      verticalClass = "s";
    horizontalClass = east ? "e" : "";
    if (west)
      horizontalClass = "w";
    cssClass = "resize-handle-" + verticalClass + horizontalClass;
    if (verticalClass.length > 0 && horizontalClass.length > 0)
      handle.corner = true;
    t1 = handle.element.get$classes();
    $.add(t1, handle.corner ? "resize-handle-corner" : "resize-handle");
    $.add(handle.element.get$classes(), cssClass);
    $.add(this.resizeHandles, handle);
    handle.mouseMoveHandler = new $.ResizableContainer__buildResizeHandle_anon(this, handle);
    handle.mouseDownHandler = new $.ResizableContainer__buildResizeHandle_anon0(this, handle);
    handle.mouseUpHandler = new $.ResizableContainer__buildResizeHandle_anon1(this, handle);
    handle.mouseDownHandlerSub = handle.element.get$onMouseDown().listen$1(handle.mouseDownHandler);
  },
  get$width: function() {
    return this.delegate.get$width();
  },
  get$height: function() {
    return this.delegate.get$height();
  },
  resize$2: function(_width, _height) {
    this.delegate.resize$2(_width, _height);
    this._adjustResizeHandles$2(_width, _height);
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  _adjustResizeHandles$2: function(_width, _height) {
    $.forEach(this.resizeHandles, new $.ResizableContainer__adjustResizeHandles_anon(this, _width, _height));
  },
  performLayout$1: function(children) {
    this.delegate.performLayout$1(children);
  },
  destroy$0: function() {
    this.delegate.destroy$0();
  },
  removeDecorator$0: function() {
  },
  get$containerElement: function() {
    return this.delegate.get$containerElement();
  },
  onMouseMoved$2: function(handle, e) {
    var currentMousePosition;
    if (!this.readyToProcessNextResize)
      return;
    this.readyToProcessNextResize = false;
    this.get$dockManager().suspendLayout$0();
    currentMousePosition = $.Point2$(e.get$pageX(), e.get$pageY());
    this._performDrag$3(handle, $.toInt($.$$sub(currentMousePosition.x, this.previousMousePosition.get$x())), $.toInt($.$$sub(currentMousePosition.y, this.previousMousePosition.get$y())));
    this.previousMousePosition = currentMousePosition;
    this.readyToProcessNextResize = true;
    this.get$dockManager().resumeLayout$0();
  },
  onMouseDown$2: function(handle, $event) {
    var t1;
    this.previousMousePosition = $.Point2$($event.get$pageX(), $event.get$pageY());
    t1 = handle.get$mouseMoveHandlerSub();
    if (!(t1 == null))
      t1.cancel$0();
    t1 = handle.get$mouseUpHandlerSub();
    if (!(t1 == null))
      t1.cancel$0();
    handle.set$mouseMoveHandlerSub(window.get$onMouseMove().listen$1(handle.get$mouseMoveHandler()));
    handle.set$mouseUpHandlerSub(window.get$onMouseUp().listen$1(handle.get$mouseUpHandler()));
    $.add(document.get$body().get$classes(), "disable-selection");
  },
  get$onMouseDown: function() {
    return new $.BoundClosure$2(this, "onMouseDown$2");
  },
  onMouseUp$2: function(handle, $event) {
    handle.get$mouseMoveHandlerSub().cancel$0();
    handle.get$mouseUpHandlerSub().cancel$0();
    handle.set$mouseMoveHandlerSub(null);
    handle.set$mouseUpHandlerSub(null);
    $.remove(document.get$body().get$classes(), "disable-selection");
  },
  _performDrag$3: function(handle, dx, dy) {
    var bounds, t1;
    bounds = $.BoundingBox$();
    t1 = this.topLevelElement;
    bounds.set$left($.getPixels(t1.get$style().get$marginLeft()));
    bounds.set$top($.getPixels(t1.get$style().get$marginTop()));
    bounds.set$width(t1.get$clientWidth());
    bounds.set$height(t1.get$clientHeight());
    if (handle.get$east() === true)
      this._resizeContainer$5(0, 0, dx, 0, bounds);
    if (handle.get$west() === true)
      this._resizeContainer$5(dx, 0, $.$$negate(dx), 0, bounds);
    if (handle.get$north() === true)
      this._resizeContainer$5(0, dy, 0, $.$$negate(dy), bounds);
    if (handle.get$south() === true)
      this._resizeContainer$5(0, 0, 0, dy, bounds);
  },
  _resizeContainer$5: function(leftDelta, topDelta, widthDelta, heightDelta, bounds) {
    var t1, t2, t3;
    bounds.set$left($.$$add(bounds.get$left(), leftDelta));
    bounds.set$top($.$$add(bounds.get$top(), topDelta));
    bounds.set$width($.$$add(bounds.get$width(), widthDelta));
    bounds.set$height($.$$add(bounds.get$height(), heightDelta));
    bounds.set$width($.max(bounds.get$width(), 50));
    bounds.set$height($.max(bounds.get$height(), 50));
    t1 = $.S(bounds.get$left()) + "px";
    t2 = this.topLevelElement;
    t2.get$style().set$marginLeft(t1);
    t1 = $.S(bounds.get$top()) + "px";
    t2.get$style().set$marginTop(t1);
    t1 = bounds.get$width();
    t3 = bounds.get$height();
    this.delegate.resize$2(t1, t3);
    this._adjustResizeHandles$2(t1, t3);
  },
  ResizableContainer$3: function(dialog, delegate, topLevelElement) {
    var t1, t2;
    this.containerType = this.delegate.get$containerType();
    t1 = this.topLevelElement;
    t2 = $.S(t1.get$offsetLeft());
    t1.get$style().set$marginLeft(t2);
    t2 = $.S(t1.get$offsetTop());
    t1.get$style().set$marginTop(t2);
    this._buildResizeHandles$0();
  }
};

$$.ResizeHandle = {"": "Object;handleSize,cornerSize,element>,mouseMoveHandler>,mouseDownHandler,mouseUpHandler>,mouseMoveHandlerSub=,mouseDownHandlerSub,mouseUpHandlerSub=,east>,west>,north>,south>,corner",
  adjustSize$3: function(container, clientWidth, clientHeight) {
    var t1, t2;
    if (this.corner) {
      if (this.west)
        this.element.get$style().set$left("0px");
      if (this.east) {
        t1 = $.S($.$$sub(clientWidth, this.cornerSize)) + "px";
        this.element.get$style().set$left(t1);
      }
      if (this.north)
        this.element.get$style().set$top("0px");
      if (this.south) {
        t1 = $.S($.$$sub(clientHeight, this.cornerSize)) + "px";
        this.element.get$style().set$top(t1);
      }
    } else {
      if (this.west) {
        this.element.get$style().set$left("0px");
        t1 = $.S(this.cornerSize) + "px";
        this.element.get$style().set$top(t1);
      }
      if (this.east) {
        t1 = $.S($.$$sub(clientWidth, this.handleSize)) + "px";
        this.element.get$style().set$left(t1);
        t1 = $.S(this.cornerSize) + "px";
        this.element.get$style().set$top(t1);
      }
      if (this.north) {
        t1 = $.S(this.cornerSize) + "px";
        this.element.get$style().set$left(t1);
        this.element.get$style().set$top("0px");
      }
      if (this.south) {
        t1 = $.S(this.cornerSize) + "px";
        this.element.get$style().set$left(t1);
        t1 = $.S($.$$sub(clientHeight, this.handleSize)) + "px";
        this.element.get$style().set$top(t1);
      }
      t1 = this.west || this.east;
      t2 = this.cornerSize;
      if (t1) {
        t1 = $.S($.$$sub(clientHeight, t2 * 2)) + "px";
        this.element.get$style().set$height(t1);
      } else {
        t1 = $.S($.$$sub(clientWidth, t2 * 2)) + "px";
        this.element.get$style().set$width(t1);
      }
    }
  }
};

$$.DockManager = {"": "Object;context>,dockWheel,layoutEngine,element>,mouseMoveHandler>,layoutEventListeners",
  initialize$0: function() {
    var documentNode, t1;
    this.context = $.DockManagerContext$(this);
    documentNode = $.DockNode$(this.context.get$documentManagerView());
    this.context.get$model().set$rootNode(documentNode);
    this.context.get$model().set$documentManagerNode(documentNode);
    this.setRootNode$1(this.context.get$model().get$rootNode());
    t1 = this.element;
    this.resize$2(t1.get$clientWidth(), t1.get$clientHeight());
    this.dockWheel = $.DockWheel$(this);
    this.layoutEngine = $.DockLayoutEngine$(this);
    this.rebuildLayout$1(this.context.get$model().get$rootNode());
  },
  rebuildLayout$1: function(node) {
    $.forEach(node.get$children(), new $.DockManager_rebuildLayout_anon(this));
    node.performLayout$0();
  },
  invalidate$0: function() {
    var t1 = this.element;
    this.resize$2(t1.get$clientWidth(), t1.get$clientHeight());
  },
  resize$2: function(width, height) {
    var t1 = $.S(width) + "px";
    this.element.get$style().set$width(t1);
    t1 = $.S(height) + "px";
    this.element.get$style().set$height(t1);
    this.context.get$model().get$rootNode().get$container().resize$2(width, height);
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  setRootNode$1: function(node) {
    if (!(this.context.get$model().get$rootNode() == null))
      ;
    node.detachFromParent$0();
    this.context.get$model().set$rootNode(node);
    $.add(this.element.get$nodes(), node.get$container().get$containerElement());
  },
  onDialogDragStarted$2: function(sender, e) {
    var t1 = this._findNodeOnPoint$2(e.get$pageX(), e.get$pageY());
    this.dockWheel.set$activeNode(t1);
    this.dockWheel.set$activeDialog(sender);
    this.dockWheel.showWheel$0();
    t1 = this.mouseMoveHandler;
    if (!(t1 == null))
      t1.cancel$0();
    this.mouseMoveHandler = window.get$onMouseMove().listen$1(this.get$onMouseMoved());
  },
  onDialogDragEnded$2: function(sender, e) {
    var t1 = this.mouseMoveHandler;
    if (!(t1 == null)) {
      t1.cancel$0();
      this.mouseMoveHandler = null;
    }
    this.dockWheel.onDialogDropped$1(sender);
    this.dockWheel.hideWheel$0();
    this.dockWheel.set$activeDialog(null);
  },
  onMouseMoved$1: function(e) {
    var t1 = this._findNodeOnPoint$2(e.get$pageX(), e.get$pageY());
    this.dockWheel.set$activeNode(t1);
  },
  get$onMouseMoved: function() {
    return new $.BoundClosure$1(this, "onMouseMoved$1");
  },
  _findNodeOnPoint$2: function(x, y) {
    var stack, bestMatch, topNode;
    stack = $.List_List(0);
    stack.push(this.context.get$model().get$rootNode());
    for (bestMatch = null; stack.length > 0;) {
      topNode = $.CONSTANT0.get$last(stack);
      if (0 >= stack.length)
        throw $.ioore(0);
      stack.pop();
      if ($.isPointInsideNode(x, y, topNode)) {
        $.CONSTANT0.addAll$1(stack, topNode.get$children());
        bestMatch = topNode;
      }
    }
    return bestMatch;
  },
  dockDialogLeft$2: function(referenceNode, dialog) {
    return this._requestDockDialog$3(referenceNode, dialog, this.layoutEngine.get$dockLeft());
  },
  dockDialogRight$2: function(referenceNode, dialog) {
    return this._requestDockDialog$3(referenceNode, dialog, this.layoutEngine.get$dockRight());
  },
  dockDialogUp$2: function(referenceNode, dialog) {
    return this._requestDockDialog$3(referenceNode, dialog, this.layoutEngine.get$dockUp());
  },
  dockDialogDown$2: function(referenceNode, dialog) {
    return this._requestDockDialog$3(referenceNode, dialog, this.layoutEngine.get$dockDown());
  },
  dockDialogFill$2: function(referenceNode, dialog) {
    return this._requestDockDialog$3(referenceNode, dialog, this.layoutEngine.get$dockFill());
  },
  dockLeft$3: function(referenceNode, container, ratio) {
    return this._requestDockContainer$4(referenceNode, container, this.layoutEngine.get$dockLeft(), ratio);
  },
  get$dockLeft: function() {
    return new $.Bound_dockLeft_DockManager(this, "dockLeft$3");
  },
  dockRight$3: function(referenceNode, container, ratio) {
    return this._requestDockContainer$4(referenceNode, container, this.layoutEngine.get$dockRight(), ratio);
  },
  get$dockRight: function() {
    return new $.Bound_dockRight_DockManager(this, "dockRight$3");
  },
  dockUp$3: function(referenceNode, container, ratio) {
    return this._requestDockContainer$4(referenceNode, container, this.layoutEngine.get$dockUp(), ratio);
  },
  get$dockUp: function() {
    return new $.Bound_dockUp_DockManager(this, "dockUp$3");
  },
  dockDown$3: function(referenceNode, container, ratio) {
    return this._requestDockContainer$4(referenceNode, container, this.layoutEngine.get$dockDown(), ratio);
  },
  get$dockDown: function() {
    return new $.Bound_dockDown_DockManager(this, "dockDown$3");
  },
  dockFill$2: function(referenceNode, container) {
    return this._requestDockContainer$4(referenceNode, container, this.layoutEngine.get$dockFill(), null);
  },
  get$dockFill: function() {
    return new $.BoundClosure$2(this, "dockFill$2");
  },
  _requestDockDialog$3: function(referenceNode, dialog, layoutDockFunction) {
    var panel, newNode, t1;
    panel = dialog.panel;
    newNode = $.DockNode$(panel);
    panel.prepareForDocking$0();
    dialog.destroy$0();
    layoutDockFunction.call$2(referenceNode, newNode);
    t1 = this.element;
    this.resize$2(t1.get$clientWidth(), t1.get$clientHeight());
    return newNode;
  },
  _requestDockContainer$4: function(referenceNode, container, layoutDockFunction, ratio) {
    var newNode, t1;
    newNode = $.DockNode$(container);
    if ($.$$eq(container.get$containerType(), "panel") === true) {
      container.prepareForDocking$0();
      container.get$elementPanel().remove$0();
    }
    layoutDockFunction.call$2(referenceNode, newNode);
    if (!(ratio == null)) {
      t1 = newNode.parent;
      if (!(t1 == null))
        t1 = $.$$eq(t1.get$container().get$containerType(), "vertical") === true || $.$$eq(newNode.parent.get$container().get$containerType(), "horizontal") === true;
      else
        t1 = false;
    } else
      t1 = false;
    if (t1)
      newNode.parent.get$container().setContainerRatio$2(container, ratio);
    this.rebuildLayout$1(this.context.get$model().get$rootNode());
    t1 = this.element;
    this.resize$2(t1.get$clientWidth(), t1.get$clientHeight());
    return newNode;
  },
  requestUndockToDialog$3: function(container, $event, dragOffset) {
    var node, dialog, $dialogWidth;
    node = this._findNodeFromContainer$1(container);
    this.layoutEngine.undock$1(node);
    dialog = $.Dialog$(node.get$container(), this);
    $dialogWidth = dialog.elementDialog.get$clientWidth();
    if ($.$$gt(dragOffset.get$x(), $dialogWidth) === true) {
      if (typeof $dialogWidth !== "number")
        throw $.iae($dialogWidth);
      dragOffset.set$x(0.75 * $dialogWidth);
    }
    dialog.setPosition$2($.$$sub($event.get$pageX(), dragOffset.get$x()), $.$$sub($event.get$pageY(), dragOffset.get$y()));
    dialog.draggable.onMouseDown$1($event);
    return dialog;
  },
  requestUndock$1: function(container) {
    var node = this._findNodeFromContainer$1(container);
    this.layoutEngine.undock$1(node);
  },
  _findNodeFromContainer$1: function(container) {
    var stack, topNode;
    stack = $.List_List(0);
    stack.push(this.context.get$model().get$rootNode());
    for (; stack.length > 0;) {
      topNode = $.CONSTANT0.get$last(stack);
      if (0 >= stack.length)
        throw $.ioore(0);
      stack.pop();
      if ($.$$eq(topNode.get$container(), container) === true)
        return topNode;
      $.CONSTANT0.addAll$1(stack, topNode.get$children());
    }
    throw $.$$throw($.DockException$("Cannot find dock node beloging to the element"));
  },
  suspendLayout$0: function() {
    $.CONSTANT0.forEach$1(this.layoutEventListeners, new $.DockManager_suspendLayout_anon(this));
  },
  resumeLayout$0: function() {
    $.CONSTANT0.forEach$1(this.layoutEventListeners, new $.DockManager_resumeLayout_anon(this));
  },
  DockManager$1: function(element) {
    if (this.element == null)
      throw $.$$throw($.DockException$("Invalid Dock Manager element provided"));
    this.layoutEventListeners = $.List_List(0);
  }
};

$$.DockManagerContext = {"": "Object;model>,dockManager>,documentManagerView>",
  DockManagerContext$1: function(dockManager) {
    this.model = $.DockModel$();
    this.documentManagerView = $.DocumentManagerContainer$(this.dockManager);
  }
};

$$.DockLayoutEngine = {"": "Object;dockManager>",
  dockLeft$2: function(referenceNode, newNode) {
    this._performDock$4(referenceNode, newNode, "horizontal", true);
  },
  get$dockLeft: function() {
    return new $.BoundClosure$2(this, "dockLeft$2");
  },
  dockRight$2: function(referenceNode, newNode) {
    this._performDock$4(referenceNode, newNode, "horizontal", false);
  },
  get$dockRight: function() {
    return new $.BoundClosure$2(this, "dockRight$2");
  },
  dockUp$2: function(referenceNode, newNode) {
    this._performDock$4(referenceNode, newNode, "vertical", true);
  },
  get$dockUp: function() {
    return new $.BoundClosure$2(this, "dockUp$2");
  },
  dockDown$2: function(referenceNode, newNode) {
    this._performDock$4(referenceNode, newNode, "vertical", false);
  },
  get$dockDown: function() {
    return new $.BoundClosure$2(this, "dockDown$2");
  },
  dockFill$2: function(referenceNode, newNode) {
    this._performDock$4(referenceNode, newNode, "fill", false);
  },
  get$dockFill: function() {
    return new $.BoundClosure$2(this, "dockFill$2");
  },
  undock$1: function(node) {
    var parentNode, siblingIndex, grandParent, t1, i, otherChild, nextActiveSibling;
    parentNode = node.get$parent();
    if (parentNode == null)
      throw $.$$throw($.DockException$("Cannot undock.  panel is not a leaf node"));
    siblingIndex = $.indexOf0(parentNode.get$children(), node);
    node.detachFromParent$0();
    if ($.$$lt($.length(parentNode.get$children()), parentNode.get$container().get$minimumAllowedChildNodes()) === true) {
      grandParent = parentNode.get$parent();
      for (t1 = !(grandParent == null), i = 0; $.CONSTANT5.$lt(i, $.length(parentNode.get$children())); ++i) {
        otherChild = $.$$index(parentNode.get$children(), i);
        if (t1) {
          grandParent.addChildAfter$2(parentNode, otherChild);
          parentNode.detachFromParent$0();
          parentNode.get$container().destroy$0();
          grandParent.performLayout$0();
        } else {
          parentNode.detachFromParent$0();
          parentNode.get$container().destroy$0();
          this.dockManager.setRootNode$1(otherChild);
        }
      }
    } else {
      parentNode.performLayout$0();
      if ($.$$gt($.length(parentNode.get$children()), 0) === true) {
        nextActiveSibling = $.$$index(parentNode.get$children(), $.max(0, $.$$sub(siblingIndex, 1)));
        parentNode.get$container().setActiveChild$1(nextActiveSibling.get$container());
      }
    }
    this.dockManager.invalidate$0();
  },
  _performDock$4: function(referenceNode, newNode, direction, insertBeforeReference) {
    var compositeNode, t1, referenceParent, referenceNodeWidth, referenceNodeHeight, referenceNodeParentWidth, referenceNodeParentHeight, containerWidth, containerHeight;
    if (!(referenceNode.get$parent() == null) && $.$$eq(referenceNode.get$parent().get$container().get$containerType(), "fill") === true)
      referenceNode = referenceNode.get$parent();
    if (direction === "fill" && $.$$eq(referenceNode.get$container().get$containerType(), "fill") === true) {
      referenceNode.addChild$1(newNode);
      referenceNode.performLayout$0();
      referenceNode.get$container().setActiveChild$1(newNode.get$container());
      return;
    }
    if ($.$$eq(referenceNode, this.dockManager.context.get$model().get$rootNode()) === true) {
      compositeNode = $.DockNode$(this._createDockContainer$3(direction, newNode, referenceNode));
      if (insertBeforeReference) {
        compositeNode.addChild$1(newNode);
        compositeNode.addChild$1(referenceNode);
      } else {
        compositeNode.addChild$1(referenceNode);
        compositeNode.addChild$1(newNode);
      }
      this.dockManager.setRootNode$1(compositeNode);
      t1 = this.dockManager;
      t1.rebuildLayout$1(t1.context.get$model().get$rootNode());
      compositeNode.container.setActiveChild$1(newNode.get$container());
      return;
    }
    if ($.$$eq(referenceNode.get$parent().get$container().get$containerType(), direction) !== true) {
      referenceParent = referenceNode.get$parent();
      referenceNodeWidth = referenceNode.get$container().get$containerElement().get$clientWidth();
      referenceNodeHeight = referenceNode.get$container().get$containerElement().get$clientHeight();
      referenceNodeParentWidth = referenceParent.get$container().get$containerElement().get$clientWidth();
      referenceNodeParentHeight = referenceParent.get$container().get$containerElement().get$clientHeight();
      compositeNode = $.DockNode$(this._createDockContainer$3(direction, newNode, referenceNode));
      referenceParent.addChildAfter$2(referenceNode, compositeNode);
      referenceNode.detachFromParent$0();
      referenceNode.get$container().get$containerElement().remove$0();
      if (insertBeforeReference) {
        compositeNode.addChild$1(newNode);
        compositeNode.addChild$1(referenceNode);
      } else {
        compositeNode.addChild$1(referenceNode);
        compositeNode.addChild$1(newNode);
      }
      referenceParent.performLayout$0();
      compositeNode.performLayout$0();
      t1 = compositeNode.container;
      t1.setActiveChild$1(newNode.get$container());
      t1.resize$2(referenceNodeWidth, referenceNodeHeight);
      referenceParent.get$container().resize$2(referenceNodeParentWidth, referenceNodeParentHeight);
    } else {
      referenceParent = referenceNode.get$parent();
      if (insertBeforeReference)
        referenceParent.addChildBefore$2(referenceNode, newNode);
      else
        referenceParent.addChildAfter$2(referenceNode, newNode);
      referenceParent.performLayout$0();
      referenceParent.get$container().setActiveChild$1(newNode.get$container());
    }
    containerWidth = newNode.get$container().get$containerElement().get$clientWidth();
    containerHeight = newNode.get$container().get$containerElement().get$clientHeight();
    newNode.get$container().resize$2(containerWidth, containerHeight);
  },
  _createDockContainer$3: function(containerType, newNode, referenceNode) {
    if (containerType === "horizontal")
      return $.HorizontalDockContainer$(this.dockManager, [newNode.get$container(), referenceNode.get$container()]);
    else if (containerType === "vertical")
      return $.VerticalDockContainer$(this.dockManager, [newNode.get$container(), referenceNode.get$container()]);
    else if (containerType === "fill")
      return $.FillDockContainer$(this.dockManager, 1);
    else
      throw $.$$throw($.DockException$("Failed to create dock container of type: " + containerType));
  },
  getDockBounds$4: function(referenceNode, containerToDock, direction, insertBeforeReference) {
    var targetElement, bounds, compositeNode, childCount, t1, childPosition, hierarchyModified, compositeSize, newPanelOriginalSize, t2, scaleMultiplier, targetPanelSize, targetPanelStart, i;
    if (direction === "fill") {
      targetElement = referenceNode.get$container().get$containerElement();
      bounds = $.Rectangle$();
      bounds.x = targetElement.get$offsetLeft();
      bounds.y = targetElement.get$offsetTop();
      bounds.width = targetElement.get$clientWidth();
      bounds.height = targetElement.get$clientHeight();
      return bounds;
    }
    if (!(referenceNode.get$parent() == null) && $.$$eq(referenceNode.get$parent().get$container().get$containerType(), "fill") === true)
      referenceNode = referenceNode.get$parent();
    if (!(referenceNode.get$parent() == null) && $.$$eq(referenceNode.get$parent().get$container().get$containerType(), direction) === true) {
      compositeNode = referenceNode.get$parent();
      childCount = $.length(compositeNode.get$children());
      t1 = $.indexOf0(compositeNode.get$children(), referenceNode);
      childPosition = $.$$add(t1, insertBeforeReference ? 0 : 1);
      hierarchyModified = false;
    } else {
      childPosition = insertBeforeReference ? 0 : 1;
      compositeNode = referenceNode;
      childCount = 1;
      hierarchyModified = true;
    }
    if (typeof childPosition !== "number")
      return this.getDockBounds$4$bailout(1, containerToDock, direction, insertBeforeReference, compositeNode, childCount, childPosition, hierarchyModified);
    t1 = direction === "vertical";
    if (t1 || direction === "horizontal") {
      compositeSize = $.$$sub(this._getVaringDimension$2(compositeNode.get$container(), direction), $.$$mul($.$$sub(childCount, 1), 5));
      newPanelOriginalSize = this._getVaringDimension$2(containerToDock, direction);
      t2 = $.getInterceptor$JSNumber(compositeSize);
      scaleMultiplier = t2.$div(compositeSize, t2.$add(compositeSize, newPanelOriginalSize));
      targetPanelSize = $.$$mul(newPanelOriginalSize, scaleMultiplier);
      if (hierarchyModified)
        targetPanelStart = insertBeforeReference ? 0 : t2.$mul(compositeSize, scaleMultiplier);
      else {
        for (targetPanelStart = 0, i = 0; i < childPosition; ++i) {
          t2 = this._getVaringDimension$2($.$$index(compositeNode.get$children(), i).get$container(), direction);
          if (typeof t2 !== "number")
            throw $.iae(t2);
          targetPanelStart += t2;
        }
        if (typeof scaleMultiplier !== "number")
          throw $.iae(scaleMultiplier);
        targetPanelStart *= scaleMultiplier;
      }
    } else {
      targetPanelSize = 0;
      targetPanelStart = 0;
    }
    bounds = $.Rectangle$();
    if (t1) {
      bounds.x = compositeNode.get$container().get$containerElement().get$offsetLeft();
      bounds.y = $.$$add(compositeNode.get$container().get$containerElement().get$offsetTop(), targetPanelStart);
      bounds.width = compositeNode.get$container().get$width();
      bounds.height = targetPanelSize;
    } else if (direction === "horizontal") {
      bounds.x = $.$$add(compositeNode.get$container().get$containerElement().get$offsetLeft(), targetPanelStart);
      bounds.y = compositeNode.get$container().get$containerElement().get$offsetTop();
      bounds.width = targetPanelSize;
      bounds.height = compositeNode.get$container().get$height();
    }
    return bounds;
  },
  getDockBounds$4$bailout: function(state0, containerToDock, direction, insertBeforeReference, compositeNode, childCount, childPosition, hierarchyModified) {
    var t1, compositeSize, newPanelOriginalSize, t2, scaleMultiplier, targetPanelSize, targetPanelStart, i, bounds;
    t1 = direction === "vertical";
    if (t1 || direction === "horizontal") {
      compositeSize = $.$$sub(this._getVaringDimension$2(compositeNode.get$container(), direction), $.$$mul($.$$sub(childCount, 1), 5));
      newPanelOriginalSize = this._getVaringDimension$2(containerToDock, direction);
      t2 = $.getInterceptor$JSNumber(compositeSize);
      scaleMultiplier = t2.$div(compositeSize, t2.$add(compositeSize, newPanelOriginalSize));
      targetPanelSize = $.$$mul(newPanelOriginalSize, scaleMultiplier);
      if (hierarchyModified)
        targetPanelStart = insertBeforeReference ? 0 : t2.$mul(compositeSize, scaleMultiplier);
      else {
        for (targetPanelStart = 0, i = 0; $.CONSTANT5.$lt(i, childPosition); ++i) {
          t2 = this._getVaringDimension$2($.$$index(compositeNode.get$children(), i).get$container(), direction);
          if (typeof t2 !== "number")
            throw $.iae(t2);
          targetPanelStart += t2;
        }
        if (typeof scaleMultiplier !== "number")
          throw $.iae(scaleMultiplier);
        targetPanelStart *= scaleMultiplier;
      }
    } else {
      targetPanelSize = 0;
      targetPanelStart = 0;
    }
    bounds = $.Rectangle$();
    if (t1) {
      bounds.x = compositeNode.get$container().get$containerElement().get$offsetLeft();
      bounds.y = $.$$add(compositeNode.get$container().get$containerElement().get$offsetTop(), targetPanelStart);
      bounds.width = compositeNode.get$container().get$width();
      bounds.height = targetPanelSize;
    } else if (direction === "horizontal") {
      bounds.x = $.$$add(compositeNode.get$container().get$containerElement().get$offsetLeft(), targetPanelStart);
      bounds.y = compositeNode.get$container().get$containerElement().get$offsetTop();
      bounds.width = targetPanelSize;
      bounds.height = compositeNode.get$container().get$height();
    }
    return bounds;
  },
  _getVaringDimension$2: function(container, direction) {
    if (direction === "vertical")
      return container.get$height();
    else if (direction === "horizontal")
      return container.get$width();
    else
      return 0;
  }
};

$$.DockModel = {"": "Object;rootNode=,documentManagerNode="};

$$.DockNode = {"": "Object;container>,parent=,children>",
  detachFromParent$0: function() {
    var t1 = this.parent;
    if (!(t1 == null))
      t1.removeChild$1(this);
    this.parent = null;
  },
  removeChild$1: function(childNode) {
    var index = $.indexOf0(this.children, childNode);
    if ($.$$ge(index, 0) === true)
      $.removeRange(this.children, index, 1);
  },
  addChild$1: function(childNode) {
    childNode.detachFromParent$0();
    childNode.set$parent(this);
    $.add(this.children, childNode);
  },
  addChildBefore$2: function(referenceNode, childNode) {
    this._addChildWithDirection$3(referenceNode, childNode, true);
  },
  addChildAfter$2: function(referenceNode, childNode) {
    this._addChildWithDirection$3(referenceNode, childNode, false);
  },
  _addChildWithDirection$3: function(referenceNode, childNode, before) {
    var referenceIndex, preList, t1, postList;
    childNode.detachFromParent$0();
    childNode.set$parent(this);
    referenceIndex = $.indexOf0(this.children, referenceNode);
    preList = $.getRange(this.children, 0, referenceIndex);
    t1 = $.getInterceptor$JSNumber(referenceIndex);
    postList = $.getRange(this.children, t1.$add(referenceIndex, 1), $.$$sub($.length(this.children), t1.$add(referenceIndex, 1)));
    this.children = $.List_List(0);
    $.addAll(this.children, preList);
    t1 = this.children;
    if (before) {
      $.add(t1, childNode);
      $.add(this.children, referenceNode);
    } else {
      $.add(t1, referenceNode);
      $.add(this.children, childNode);
    }
    $.addAll(this.children, postList);
  },
  performLayout$0: function() {
    var childContainers = $.List_List(0);
    $.forEach(this.children, new $.DockNode_performLayout_anon(childContainers));
    this.container.performLayout$1(childContainers);
  },
  DockNode$1: function(container) {
    this.children = $.List_List(0);
  }
};

$$.DockWheel = {"": "Object;dockManager>,elementMainWheel>,elementSideWheel>,elementPanelPreview,wheelItems>,activeDialog<,_visible,_activeNode",
  get$activeNode: function() {
    return this._activeNode;
  },
  set$activeNode: function(value) {
    var previousValue = this._activeNode;
    this._activeNode = value;
    if ($.$$eq(previousValue, this._activeNode) !== true)
      if (this._visible)
        this.showWheel$0();
  },
  showWheel$0: function() {
    var element, containerWidth, containerHeight, baseX, baseY, t1, dockManagerWidth, dockManagerHeight, t2;
    this._visible = true;
    if (this.get$activeNode() == null) {
      this.elementMainWheel.remove$0();
      this.elementSideWheel.remove$0();
      return;
    }
    element = this.get$activeNode().get$container().get$containerElement();
    containerWidth = element.get$clientWidth();
    containerHeight = element.get$clientHeight();
    baseX = $.$$add($.$$tdiv(containerWidth, 2), element.get$offsetLeft());
    baseY = $.$$add($.$$tdiv(containerHeight, 2), element.get$offsetTop());
    t1 = $.S(baseX) + "px";
    this.elementMainWheel.get$style().set$left(t1);
    t1 = $.S(baseY) + "px";
    this.elementMainWheel.get$style().set$top(t1);
    t1 = this.dockManager.element;
    dockManagerWidth = t1.get$clientWidth();
    dockManagerHeight = t1.get$clientHeight();
    t1.get$offsetLeft();
    t1.get$offsetTop();
    this.elementMainWheel.remove$0();
    this.elementSideWheel.remove$0();
    $.add(element.get$nodes(), this.elementMainWheel);
    $.add(this.dockManager.element.get$nodes(), this.elementSideWheel);
    t1 = $.getInterceptor$JSNumber(dockManagerHeight);
    this._setWheelButtonPosition$3("left-s", 20, $.$$div(t1.$negate(dockManagerHeight), 2));
    t2 = $.getInterceptor$JSNumber(dockManagerWidth);
    this._setWheelButtonPosition$3("right-s", t2.$sub(dockManagerWidth, 40), $.$$div(t1.$negate(dockManagerHeight), 2));
    this._setWheelButtonPosition$3("top-s", t2.$div(dockManagerWidth, 2), $.$$add(t1.$negate(dockManagerHeight), 20));
    this._setWheelButtonPosition$3("down-s", t2.$div(dockManagerWidth, 2), -20);
  },
  _setWheelButtonPosition$3: function(wheelId, left, $top) {
    var item, itemHalfWidth, itemHalfHeight, x, y, t1;
    item = $.$$index(this.wheelItems, wheelId);
    itemHalfWidth = $.$$div(item.get$element().get$clientWidth(), 2);
    itemHalfHeight = $.$$div(item.get$element().get$clientHeight(), 2);
    x = $.toInt($.$$sub(left, itemHalfWidth));
    y = $.toInt($.$$sub($top, itemHalfHeight));
    t1 = $.S(x) + "px";
    item.get$element().get$style().set$marginLeft(t1);
    t1 = $.S(y) + "px";
    item.get$element().get$style().set$marginTop(t1);
  },
  hideWheel$0: function() {
    this._visible = false;
    this.set$activeNode(null);
    this.elementMainWheel.remove$0();
    this.elementSideWheel.remove$0();
    this.elementPanelPreview.remove$0();
    $.forEach(this.wheelItems.get$values(), new $.DockWheel_hideWheel_anon());
  },
  onMouseOver$2: function(wheelItem, e) {
    var rootNode, bounds, t1;
    if (this.activeDialog == null)
      return;
    rootNode = this.dockManager.context.get$model().get$rootNode();
    if ($.$$eq(wheelItem.get$id(), "top") === true)
      bounds = this.dockManager.layoutEngine.getDockBounds$4(this._activeNode, this.activeDialog.get$panel(), "vertical", true);
    else if ($.$$eq(wheelItem.get$id(), "down") === true)
      bounds = this.dockManager.layoutEngine.getDockBounds$4(this._activeNode, this.activeDialog.get$panel(), "vertical", false);
    else if ($.$$eq(wheelItem.get$id(), "left") === true)
      bounds = this.dockManager.layoutEngine.getDockBounds$4(this._activeNode, this.activeDialog.get$panel(), "horizontal", true);
    else if ($.$$eq(wheelItem.get$id(), "right") === true)
      bounds = this.dockManager.layoutEngine.getDockBounds$4(this._activeNode, this.activeDialog.get$panel(), "horizontal", false);
    else if ($.$$eq(wheelItem.get$id(), "fill") === true)
      bounds = this.dockManager.layoutEngine.getDockBounds$4(this._activeNode, this.activeDialog.get$panel(), "fill", false);
    else if ($.$$eq(wheelItem.get$id(), "top-s") === true)
      bounds = this.dockManager.layoutEngine.getDockBounds$4(rootNode, this.activeDialog.get$panel(), "vertical", true);
    else if ($.$$eq(wheelItem.get$id(), "down-s") === true)
      bounds = this.dockManager.layoutEngine.getDockBounds$4(rootNode, this.activeDialog.get$panel(), "vertical", false);
    else if ($.$$eq(wheelItem.get$id(), "left-s") === true)
      bounds = this.dockManager.layoutEngine.getDockBounds$4(rootNode, this.activeDialog.get$panel(), "horizontal", true);
    else
      bounds = $.$$eq(wheelItem.get$id(), "right-s") === true ? this.dockManager.layoutEngine.getDockBounds$4(rootNode, this.activeDialog.get$panel(), "horizontal", false) : null;
    if (!(bounds == null)) {
      $.add(this.dockManager.element.get$nodes(), this.elementPanelPreview);
      t1 = $.S($.toInt(bounds.get$x())) + "px";
      this.elementPanelPreview.get$style().set$left(t1);
      t1 = $.S($.toInt(bounds.get$y())) + "px";
      this.elementPanelPreview.get$style().set$top(t1);
      t1 = $.S($.toInt(bounds.get$width())) + "px";
      this.elementPanelPreview.get$style().set$width(t1);
      t1 = $.S($.toInt(bounds.get$height())) + "px";
      this.elementPanelPreview.get$style().set$height(t1);
    }
  },
  get$onMouseOver: function() {
    return new $.BoundClosure$2(this, "onMouseOver$2");
  },
  onMouseOut$2: function(wheelItem, e) {
    this.elementPanelPreview.remove$0();
  },
  get$onMouseOut: function() {
    return new $.BoundClosure$2(this, "onMouseOut$2");
  },
  onDialogDropped$1: function(dialog) {
    var wheelItem = this._getActiveWheelItem$0();
    if (!(wheelItem == null))
      this._handleDockRequest$2(wheelItem, dialog);
  },
  _getActiveWheelItem$0: function() {
    var t1, t2;
    for (t1 = $.iterator(this.wheelItems.get$values()); t1.moveNext$0() === true;) {
      t2 = t1.get$current();
      if (t2.get$active() === true)
        return t2;
    }
    return;
  },
  _handleDockRequest$2: function(wheelItem, dialog) {
    var t1;
    if (this._activeNode == null)
      return;
    if ($.$$eq(wheelItem.get$id(), "left") === true)
      this.dockManager.dockDialogLeft$2(this._activeNode, dialog);
    else if ($.$$eq(wheelItem.get$id(), "right") === true)
      this.dockManager.dockDialogRight$2(this._activeNode, dialog);
    else if ($.$$eq(wheelItem.get$id(), "top") === true)
      this.dockManager.dockDialogUp$2(this._activeNode, dialog);
    else if ($.$$eq(wheelItem.get$id(), "down") === true)
      this.dockManager.dockDialogDown$2(this._activeNode, dialog);
    else if ($.$$eq(wheelItem.get$id(), "fill") === true)
      this.dockManager.dockDialogFill$2(this._activeNode, dialog);
    else if ($.$$eq(wheelItem.get$id(), "left-s") === true) {
      t1 = this.dockManager;
      t1.dockDialogLeft$2(t1.context.get$model().get$rootNode(), dialog);
    } else if ($.$$eq(wheelItem.get$id(), "right-s") === true) {
      t1 = this.dockManager;
      t1.dockDialogRight$2(t1.context.get$model().get$rootNode(), dialog);
    } else if ($.$$eq(wheelItem.get$id(), "top-s") === true) {
      t1 = this.dockManager;
      t1.dockDialogUp$2(t1.context.get$model().get$rootNode(), dialog);
    } else if ($.$$eq(wheelItem.get$id(), "down-s") === true) {
      t1 = this.dockManager;
      t1.dockDialogDown$2(t1.context.get$model().get$rootNode(), dialog);
    }
  },
  DockWheel$1: function(dockManager) {
    this.elementMainWheel = $.DivElement_DivElement();
    this.elementSideWheel = $.DivElement_DivElement();
    this.wheelItems = $.Map_Map();
    $.CONSTANT0.forEach$1(["left", "right", "top", "down", "fill", "left-s", "right-s", "top-s", "down-s"], new $.anon0(this));
    $.add(this.elementMainWheel.get$classes(), "dock-wheel-base");
    $.add(this.elementSideWheel.get$classes(), "dock-wheel-base");
    this.elementMainWheel.get$style().set$zIndex("100001");
    this.elementSideWheel.get$style().set$zIndex("100000");
    this.elementPanelPreview = $.DivElement_DivElement();
    $.add(this.elementPanelPreview.get$classes(), "dock-wheel-panel-preview");
    this.elementPanelPreview.get$style().set$zIndex("99999");
  }
};

$$.DockWheelItem = {"": "Object;id>,element>,wheel,hoverIconClass,mouseOverHandler,active=",
  onMouseMoved$1: function(e) {
    this.active = true;
    $.add(this.element.get$classes(), this.hoverIconClass);
    this.wheel.onMouseOver$2(this, e);
  },
  get$onMouseMoved: function() {
    return new $.BoundClosure$1(this, "onMouseMoved$1");
  },
  onMouseOut$1: function(e) {
    this.active = false;
    $.remove(this.element.get$classes(), this.hoverIconClass);
    this.wheel.onMouseOut$2(this, e);
  },
  get$onMouseOut: function() {
    return new $.BoundClosure$1(this, "onMouseOut$1");
  },
  DockWheelItem$2: function(wheel, id) {
    var wheelType = $.replaceAll(this.id, "-s", "");
    this.element = $.DivElement_DivElement();
    $.add(this.element.get$classes(), "dock-wheel-item");
    $.add(this.element.get$classes(), "disable-selection");
    $.add(this.element.get$classes(), "dock-wheel-" + $.S(wheelType));
    $.add(this.element.get$classes(), "dock-wheel-" + $.S(wheelType) + "-icon");
    this.hoverIconClass = "dock-wheel-" + $.S(wheelType) + "-icon-hover";
    this.element.get$onMouseOver().listen$1(this.get$onMouseMoved());
    this.element.get$onMouseOut().listen$1(this.get$onMouseOut());
  }
};

$$.DockException = {"": "Object;message",
  toString$0: function() {
    return this.message;
  }
};

$$.SplitterDockContainer = {"": "Object;dockManager>,containerType>",
  resize$2: function(_width, _height) {
    this.splitterPanel.resize$2(_width, _height);
    this._cachedWidth = _width;
    this._cachedHeight = _height;
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  get$minimumAllowedChildNodes: function() {
    return 2;
  },
  performLayout$1: function(childContainers) {
    this.splitterPanel.performLayout$1(childContainers);
  },
  setActiveChild$1: function(child) {
  },
  destroy$0: function() {
    this.splitterPanel.destroy$0();
  },
  setContainerRatio$2: function(container, ratio) {
    this.splitterPanel.setContainerRatio$2(container, ratio);
    this.resize$2(this.get$width(), this.get$height());
  },
  get$containerElement: function() {
    return this.splitterPanel.get$panelElement();
  },
  get$width: function() {
    if (this._cachedWidth == null)
      this._cachedWidth = this.splitterPanel.get$panelElement().get$clientWidth();
    return this._cachedWidth;
  },
  get$height: function() {
    if (this._cachedHeight == null)
      this._cachedHeight = this.splitterPanel.get$panelElement().get$clientHeight();
    return this._cachedHeight;
  },
  SplitterDockContainer$3: function($name, dockManager, childContainers) {
    this.splitterPanel = $.SplitterPanel$(childContainers, this.get$stackedVertical());
  }
};

$$.HorizontalDockContainer = {"": "SplitterDockContainer;name,dockManager,splitterPanel,containerType,_cachedWidth,_cachedHeight",
  get$stackedVertical: function() {
    return false;
  },
  HorizontalDockContainer$2: function(dockManager, childContainers) {
    this.containerType = "horizontal";
  }
};

$$.VerticalDockContainer = {"": "SplitterDockContainer;name,dockManager,splitterPanel,containerType,_cachedWidth,_cachedHeight",
  get$stackedVertical: function() {
    return true;
  },
  VerticalDockContainer$2: function(dockManager, childContainers) {
    this.containerType = "vertical";
  }
};

$$.FillDockContainer = {"": "Object;containerType>,element>,dockManager>,tabHost,tabOrientation,name",
  get$minimumAllowedChildNodes: function() {
    return 2;
  },
  setActiveChild$1: function(child) {
    this.tabHost.setActiveTab$1(child);
  },
  resize$2: function(_width, _height) {
    var t1 = $.S(_width) + "px";
    this.element.get$style().set$width(t1);
    t1 = $.S(_height) + "px";
    this.element.get$style().set$height(t1);
    this.tabHost.resize$2(_width, _height);
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  performLayout$1: function(children) {
    this.tabHost.performLayout$1(children);
  },
  destroy$0: function() {
    this.element.remove$0();
    this.element = null;
  },
  get$containerElement: function() {
    return this.element;
  },
  get$width: function() {
    return this.element.get$clientWidth();
  },
  set$width: function(value) {
    var t1 = $.S(value) + "px";
    this.element.get$style().set$width(t1);
    return t1;
  },
  get$height: function() {
    return this.element.get$clientHeight();
  },
  set$height: function(value) {
    var t1 = $.S(value) + "px";
    this.element.get$style().set$height(t1);
    return t1;
  },
  FillDockContainer$2: function(dockManager, tabStripDirection) {
    this.tabOrientation = tabStripDirection;
    this.name = $.getNextId("fill_");
    this.element = $.DivElement_DivElement();
    $.add(this.element.get$classes(), "dock-container");
    $.add(this.element.get$classes(), "dock-container-fill");
    this.tabHost = $.TabHost$(this.tabOrientation, false);
    $.add(this.element.get$nodes(), this.tabHost.hostElement);
  }
};

$$.PanelContainer = {"": "Object;elementContent>,name,dockManager>,undockInitiator,elementPanel>,elementTitle>,elementTitleText,elementButtonClose,elementContentHost>,containerType>,title,iconName,closeButtonClickedHandler,_floatingDialog,_cachedWidth,_cachedHeight",
  get$floatingDialog: function() {
    return this._floatingDialog;
  },
  set$floatingDialog: function(value) {
    var t1;
    this._floatingDialog = value;
    t1 = this._floatingDialog;
    this.undockInitiator.set$enabled(t1 == null);
  },
  setActiveChild$1: function(child) {
  },
  get$minimumAllowedChildNodes: function() {
    return 0;
  },
  get$containerElement: function() {
    return this.elementPanel;
  },
  _liblib2$_initialize$0: function() {
    var t1, t2, contentTitle, contentIcon;
    t1 = $.dockIdCounter;
    $.dockIdCounter = $.$$add(t1, 1);
    this.name = "panel_" + $.S(t1);
    this.elementPanel = document.$$dom_createElement$1("div");
    this.elementTitle = document.$$dom_createElement$1("div");
    this.elementTitleText = document.$$dom_createElement$1("div");
    this.elementContentHost = document.$$dom_createElement$1("div");
    this.elementButtonClose = document.$$dom_createElement$1("div");
    $.add(this.elementPanel.get$nodes(), this.elementTitle);
    $.add(this.elementTitle.get$nodes(), this.elementTitleText);
    $.add(this.elementTitle.get$nodes(), this.elementButtonClose);
    this.elementButtonClose.set$innerHtml("<i class=\"icon-remove\"></i>");
    $.add(this.elementButtonClose.get$classes(), "panel-titlebar-button-close");
    $.add(this.elementPanel.get$nodes(), this.elementContentHost);
    $.add(this.elementPanel.get$classes(), "panel-base");
    $.add(this.elementTitle.get$classes(), "panel-titlebar");
    $.add(this.elementTitle.get$classes(), "disable-selection");
    $.add(this.elementTitleText.get$classes(), "panel-titlebar-text");
    $.add(this.elementContentHost.get$classes(), "panel-content");
    t2 = this.elementContent;
    this._setPanelDimensions$2(t2.get$clientWidth(), $.$$add(t2.get$clientHeight(), this.elementTitle.get$clientHeight()));
    $.add(document.get$body().get$nodes(), this.elementPanel);
    this.closeButtonClickedHandler = this.elementButtonClose.get$onClick().listen$1(this.get$onCloseButtonClicked());
    t2.remove$0();
    $.add(this.elementContentHost.get$nodes(), t2);
    contentTitle = $.$$index(t2.get$attributes(), "caption");
    contentIcon = $.$$index(t2.get$attributes(), "icon");
    if (!(contentTitle == null))
      this.title = contentTitle;
    if (!(contentIcon == null))
      this.iconName = contentIcon;
    this._updateTitle$0();
    this.undockInitiator = $.UndockInitiator$(this.elementTitle, this.get$performUndockToDialog(), 10);
    this.set$floatingDialog(null);
  },
  destroy$0: function() {
    this.elementPanel.remove$0();
    var t1 = this.closeButtonClickedHandler;
    if (!(t1 == null))
      t1.cancel$0();
  },
  performUndockToDialog$2: function(e, dragOffset) {
    this.undockInitiator.set$enabled(false);
    return this.dockManager.requestUndockToDialog$3(this, e, dragOffset);
  },
  get$performUndockToDialog: function() {
    return new $.BoundClosure$2(this, "performUndockToDialog$2");
  },
  performUndock$0: function() {
    this.undockInitiator.set$enabled(false);
    this.dockManager.requestUndock$1(this);
  },
  prepareForDocking$0: function() {
    this.undockInitiator.set$enabled(true);
  },
  get$width: function() {
    return this._cachedWidth;
  },
  set$width: function(value) {
    var t1;
    if ($.$$eq(this._cachedWidth, value) !== true) {
      this._cachedWidth = value;
      t1 = $.S(value) + "px";
      this.elementPanel.get$style().set$width(t1);
    }
  },
  get$height: function() {
    return this._cachedHeight;
  },
  set$height: function(value) {
    var t1;
    if ($.$$eq(this._cachedHeight, value) !== true) {
      this._cachedHeight = value;
      t1 = $.S(value) + "px";
      this.elementPanel.get$style().set$height(t1);
    }
  },
  resize$2: function(_width, _height) {
    if ($.$$eq(this._cachedWidth, _width) === true && $.$$eq(this._cachedHeight, _height) === true)
      return;
    this._setPanelDimensions$2(_width, _height);
    this._cachedWidth = _width;
    this._cachedHeight = _height;
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  _setPanelDimensions$2: function(_width, _height) {
    var t1, t2, contentHeight;
    t1 = $.S(_width) + "px";
    this.elementTitle.get$style().set$width(t1);
    t1 = $.S(_width) + "px";
    this.elementContentHost.get$style().set$width(t1);
    t1 = $.S(_width) + "px";
    t2 = this.elementContent;
    t2.get$style().set$width(t1);
    t1 = $.S(_width) + "px";
    this.elementPanel.get$style().set$width(t1);
    contentHeight = $.$$sub(_height, this.elementTitle.get$clientHeight());
    t1 = $.S(contentHeight) + "px";
    this.elementContentHost.get$style().set$height(t1);
    t1 = $.S(contentHeight) + "px";
    t2.get$style().set$height(t1);
    t1 = $.S(_height) + "px";
    this.elementPanel.get$style().set$height(t1);
  },
  _updateTitle$0: function() {
    var t1 = "<i class=\"" + $.S(this.iconName) + "\"></i> " + $.S(this.title);
    this.elementTitleText.set$innerHtml(t1);
  },
  getRawTitle$0: function() {
    return this.elementTitleText.get$innerHtml();
  },
  performLayout$1: function(children) {
  },
  onCloseButtonClicked$1: function(evt) {
    if (!(this.get$floatingDialog() == null))
      this.get$floatingDialog().destroy$0();
    else {
      this.performUndock$0();
      this.destroy$0();
    }
  },
  get$onCloseButtonClicked: function() {
    return new $.BoundClosure$1(this, "onCloseButtonClicked$1");
  },
  PanelContainer$3: function(elementContent, dockManager, title) {
    this._liblib2$_initialize$0();
  }
};

$$.DocumentManagerContainer = {"": "FillDockContainer;containerType,element,dockManager,tabHost,tabOrientation,name",
  get$minimumAllowedChildNodes: function() {
    return 0;
  },
  _createDocumentTabPage$2: function(_tabHost, container) {
    return $.DocumentTabPage$(_tabHost, container);
  },
  get$_createDocumentTabPage: function() {
    return new $.BoundClosure$2(this, "_createDocumentTabPage$2");
  },
  DocumentManagerContainer$1: function(dockManager) {
    var t1;
    $.add(this.element.get$classes(), "document-manager");
    t1 = this.get$_createDocumentTabPage();
    this.tabHost.createTabPage = t1;
    this.tabHost.displayCloseButton = true;
  }
};

$$.DocumentTabPage = {"": "TabPage;panel>,host,handle,container,containerElement,selected",
  destroy$0: function() {
    $.TabPage.prototype.destroy$0.call(this);
    $.add(this.panel.get$elementContentHost().get$nodes(), this.containerElement);
  },
  DocumentTabPage$2: function(_host, _container) {
    var t1 = this.container;
    if ($.$$eq(t1.get$containerType(), "panel") === true) {
      this.panel = t1;
      this.containerElement = this.panel.get$elementContent();
      this.containerElement.remove$0();
    }
  }
};

$$.SplitterBar = {"": "Object;previousContainer,nextContainer,barElement>,stackedVertical>,mouseMovedHandler,mouseDownHandler,mouseUpHandler>,previousMouseEvent,minPanelSize,previousContainerSize,nextContainerSize,readyToProcessNextDrag",
  onMouseDown$1: function(e) {
    this._startDragging$1(e);
  },
  get$onMouseDown: function() {
    return new $.BoundClosure$1(this, "onMouseDown$1");
  },
  onMouseUp$1: function(e) {
    this._stopDragging$1(e);
  },
  get$onMouseUp: function() {
    return new $.BoundClosure$1(this, "onMouseUp$1");
  },
  onMouseMoved$1: function(e) {
    var dockManager;
    if (!this.readyToProcessNextDrag) {
      $.Primitives_printString("Skip");
      return;
    }
    this.readyToProcessNextDrag = false;
    dockManager = this.previousContainer.get$dockManager();
    dockManager.suspendLayout$0();
    this._performDrag$2($.$$sub(e.get$pageX(), this.previousMouseEvent.get$pageX()), $.$$sub(e.get$pageY(), this.previousMouseEvent.get$pageY()));
    this.previousMouseEvent = e;
    this.readyToProcessNextDrag = true;
    dockManager.resumeLayout$0();
  },
  get$onMouseMoved: function() {
    return new $.BoundClosure$1(this, "onMouseMoved$1");
  },
  _performDrag$2: function(dx, dy) {
    var t1, previousWidth, previousHeight, t2, nextWidth, nextHeight, t3, previousPanelSize, nextPanelSize, deltaMovement, newPreviousPanelSize, newNextPanelSize, t4, t5, continueProcessing;
    t1 = this.previousContainer;
    previousWidth = t1.get$containerElement().get$clientWidth();
    previousHeight = t1.get$containerElement().get$clientHeight();
    t2 = this.nextContainer;
    nextWidth = t2.get$containerElement().get$clientWidth();
    nextHeight = t2.get$containerElement().get$clientHeight();
    t3 = this.stackedVertical === true;
    previousPanelSize = t3 ? previousHeight : previousWidth;
    nextPanelSize = t3 ? nextHeight : nextWidth;
    deltaMovement = t3 ? dy : dx;
    newPreviousPanelSize = $.$$add(previousPanelSize, deltaMovement);
    newNextPanelSize = $.$$sub(nextPanelSize, deltaMovement);
    t4 = this.minPanelSize;
    t5 = $.getInterceptor$JSNumber(newPreviousPanelSize);
    if (t5.$lt(newPreviousPanelSize, t4) === true || $.$$lt(newNextPanelSize, t4) === true) {
      if (!(t5.$lt(newPreviousPanelSize, t4) === true && t5.$gt(newPreviousPanelSize, previousPanelSize) === true)) {
        t5 = $.getInterceptor$JSNumber(newNextPanelSize);
        continueProcessing = t5.$lt(newNextPanelSize, t4) === true && t5.$gt(newNextPanelSize, nextPanelSize) === true;
      } else
        continueProcessing = true;
      if (!continueProcessing)
        return;
    }
    if (t3) {
      t1.resize$2(previousWidth, newPreviousPanelSize);
      t2.resize$2(nextWidth, newNextPanelSize);
    } else {
      t1.resize$2(newPreviousPanelSize, previousHeight);
      t2.resize$2(newNextPanelSize, nextHeight);
    }
  },
  _startDragging$1: function(e) {
    var t1;
    $.add(document.get$body().get$classes(), "disable-selection");
    $.add(document.get$body().get$classes(), "disable-selection");
    t1 = this.mouseMovedHandler;
    if (!(t1 == null)) {
      t1.cancel$0();
      this.mouseMovedHandler = null;
    }
    t1 = this.mouseUpHandler;
    if (!(t1 == null)) {
      t1.cancel$0();
      this.mouseUpHandler = null;
    }
    this.mouseMovedHandler = window.get$onMouseMove().listen$1(this.get$onMouseMoved());
    this.mouseUpHandler = window.get$onMouseUp().listen$1(this.get$onMouseUp());
    this.previousMouseEvent = e;
  },
  _stopDragging$1: function(e) {
    var t1;
    $.remove(document.get$body().get$classes(), "disable-selection");
    $.remove(document.get$body().get$classes(), "disable-selection");
    t1 = this.mouseMovedHandler;
    if (!(t1 == null)) {
      t1.cancel$0();
      this.mouseMovedHandler = null;
    }
    t1 = this.mouseUpHandler;
    if (!(t1 == null)) {
      t1.cancel$0();
      this.mouseUpHandler = null;
    }
  },
  SplitterBar$3: function(previousContainer, nextContainer, stackedVertical) {
    var t1;
    this.barElement = $.DivElement_DivElement();
    t1 = this.barElement.get$classes();
    $.add(t1, this.stackedVertical === true ? "splitbar-horizontal" : "splitbar-vertical");
    this.mouseDownHandler = this.barElement.get$onMouseDown().listen$1(this.get$onMouseDown());
  }
};

$$.SplitterPanel = {"": "Object;panelElement>,childContainers,spiltterBars,stackedVertical>",
  _buildSplitterDOM$0: function() {
    var t1, i, t2, t3, previousContainer, splitterBar;
    if ($.$$le($.length(this.childContainers), 1) === true)
      return;
    this.spiltterBars = $.List_List(0);
    for (t1 = this.stackedVertical, i = 0; t2 = $.CONSTANT5.$lt(i, $.$$sub($.length(this.childContainers), 1)), t3 = this.childContainers, t2;) {
      previousContainer = $.$$index(t3, i);
      ++i;
      splitterBar = $.SplitterBar$(previousContainer, $.$$index(this.childContainers, i), t1);
      $.add(this.spiltterBars, splitterBar);
      this._insertContainerIntoPanel$1(previousContainer);
      $.add(this.panelElement.get$nodes(), splitterBar.barElement);
    }
    this._insertContainerIntoPanel$1($.last(t3));
  },
  performLayout$1: function(children) {
    this.removeFromDOM$0();
    this.childContainers = children;
    this._buildSplitterDOM$0();
  },
  removeFromDOM$0: function() {
    $.forEach(this.childContainers, new $.SplitterPanel_removeFromDOM_anon());
    $.forEach(this.spiltterBars, new $.SplitterPanel_removeFromDOM_anon0());
  },
  destroy$0: function() {
    this.removeFromDOM$0();
    this.panelElement.remove$0();
  },
  _insertContainerIntoPanel$1: function(container) {
    var t1;
    container.get$containerElement().remove$0();
    $.add(this.panelElement.get$nodes(), container.get$containerElement());
    t1 = container.get$containerElement().get$classes();
    $.add(t1, this.stackedVertical === true ? "splitter-container-vertical" : "splitter-container-horizontal");
  },
  setContainerRatio$2: function(container, ratio) {
    var t1, t2, splitPanelSize, newContainerSize, t3, barSize, otherPanelScaleMultipler;
    t1 = this.stackedVertical === true;
    t2 = this.panelElement;
    splitPanelSize = t1 ? t2.get$clientHeight() : t2.get$clientWidth();
    t2 = $.getInterceptor$JSNumber(splitPanelSize);
    newContainerSize = t2.$mul(splitPanelSize, ratio);
    t3 = this.spiltterBars;
    barSize = t1 ? $.$$index(t3, 0).get$barElement().get$clientHeight() : $.$$index(t3, 0).get$barElement().get$clientWidth();
    otherPanelScaleMultipler = $.$$div($.$$sub(t2.$sub(splitPanelSize, newContainerSize), $.$$mul(barSize, $.length(this.spiltterBars))), splitPanelSize);
    $.forEach(this.childContainers, new $.SplitterPanel_setContainerRatio_anon(this, container, newContainerSize, otherPanelScaleMultipler));
  },
  resize$2: function(width, height) {
    var t1, t2, i, t3, childContainer, splitBar, t5, t4, barSize, targetTotalChildPanelSize, scaleMultiplier, updatedTotalChildPanelSize, child, original, newSize;
    t1 = {};
    if (typeof width !== "number")
      return this.resize$2$bailout(1, width, height, t1);
    if (typeof height !== "number")
      return this.resize$2$bailout(1, width, height, t1);
    t2 = $.length(this.childContainers);
    if (typeof t2 !== "number")
      return this.resize$2$bailout(2, width, height, t1, t2);
    if (t2 <= 1)
      return;
    t2 = this.stackedVertical === true;
    i = 0;
    while (true) {
      t3 = $.length(this.childContainers);
      if (typeof t3 !== "number")
        return this.resize$2$bailout(3, width, height, t1, t2, i, t3);
      if (!(i < t3))
        break;
      t3 = this.childContainers;
      if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
        return this.resize$2$bailout(4, width, height, t1, t2, i, t3);
      if (i >= t3.length)
        throw $.ioore(i);
      childContainer = t3[i];
      if (t2)
        childContainer.resize$2(width, childContainer.get$height());
      else
        childContainer.resize$2(childContainer.get$width(), height);
      t3 = $.length(this.spiltterBars);
      if (typeof t3 !== "number")
        return this.resize$2$bailout(5, width, height, t1, t2, i, t3);
      if (i < t3) {
        t3 = this.spiltterBars;
        if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
          return this.resize$2$bailout(6, width, height, t1, t2, i, t3);
        if (i >= t3.length)
          throw $.ioore(i);
        splitBar = t3[i];
        if (t2) {
          t3 = $.S(width) + "px";
          splitBar.get$barElement().get$style().set$width(t3);
        } else {
          t3 = $.S(height) + "px";
          splitBar.get$barElement().get$style().set$height(t3);
        }
      }
      ++i;
    }
    t1.totalChildPanelSize_0 = 0;
    $.forEach(this.childContainers, new $.SplitterPanel_resize_anon(t1, this));
    t3 = this.spiltterBars;
    if (typeof t3 !== "string" && (typeof t3 !== "object" || t3 === null || t3.constructor !== Array && !t3.$isJavaScriptIndexingBehavior()))
      return this.resize$2$bailout(7, width, height, t1, t2, 0, t3);
    t5 = t3.length;
    if (t2) {
      if (0 >= t5)
        throw $.ioore(0);
      t4 = t3[0].get$barElement().get$clientHeight();
      if (typeof t4 !== "number")
        return this.resize$2$bailout(8, width, height, t1, t2, 0, 0, t4);
      barSize = t4;
    } else {
      if (0 >= t5)
        throw $.ioore(0);
      t4 = t3[0].get$barElement().get$clientWidth();
      if (typeof t4 !== "number")
        return this.resize$2$bailout(9, width, height, t1, t2, 0, 0, t4);
      barSize = t4;
    }
    if (t2)
      targetTotalChildPanelSize = height;
    else
      targetTotalChildPanelSize = width;
    targetTotalChildPanelSize -= barSize * t3.length;
    t1.totalChildPanelSize_0 = $.max(t1.totalChildPanelSize_0, 1);
    t1 = t1.totalChildPanelSize_0;
    if (typeof t1 !== "number")
      return this.resize$2$bailout(11, width, height, t1, t2, 0, 0, 0, 0, targetTotalChildPanelSize);
    scaleMultiplier = targetTotalChildPanelSize / t1;
    updatedTotalChildPanelSize = 0;
    i = 0;
    while (true) {
      t1 = $.length(this.childContainers);
      if (typeof t1 !== "number")
        return this.resize$2$bailout(12, width, height, t1, t2, i, 0, 0, 0, targetTotalChildPanelSize, updatedTotalChildPanelSize, $.CONSTANT4, scaleMultiplier);
      if (!(i < t1))
        break;
      t1 = this.childContainers;
      if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !t1.$isJavaScriptIndexingBehavior()))
        return this.resize$2$bailout(13, width, height, t1, t2, i, 0, 0, 0, targetTotalChildPanelSize, updatedTotalChildPanelSize, $.CONSTANT4, scaleMultiplier);
      if (i >= t1.length)
        throw $.ioore(i);
      child = t1[i];
      if (t2) {
        t1 = child.get$containerElement().get$clientHeight();
        if (typeof t1 !== "number")
          return this.resize$2$bailout(14, width, height, t1, t2, i, 0, 0, 0, targetTotalChildPanelSize, updatedTotalChildPanelSize, $.CONSTANT4, scaleMultiplier, child);
        original = t1;
      } else {
        t1 = child.get$containerElement().get$clientWidth();
        if (typeof t1 !== "number")
          return this.resize$2$bailout(15, width, height, t1, t2, i, 0, 0, 0, targetTotalChildPanelSize, updatedTotalChildPanelSize, $.CONSTANT4, scaleMultiplier, child);
        original = t1;
      }
      newSize = $.CONSTANT8.toInt$0(original * scaleMultiplier);
      if (typeof newSize !== "number")
        throw $.iae(newSize);
      updatedTotalChildPanelSize += newSize;
      if (updatedTotalChildPanelSize !== (updatedTotalChildPanelSize | 0))
        return this.resize$2$bailout(16, width, height, 0, t2, i, 0, 0, 0, targetTotalChildPanelSize, updatedTotalChildPanelSize, $.CONSTANT4, scaleMultiplier, child, newSize);
      t1 = $.length(this.childContainers);
      if (typeof t1 !== "number")
        return this.resize$2$bailout(17, width, height, t1, t2, i, 0, 0, 0, targetTotalChildPanelSize, updatedTotalChildPanelSize, $.CONSTANT4, scaleMultiplier, child, newSize);
      if (i === t1 - 1)
        newSize += targetTotalChildPanelSize - updatedTotalChildPanelSize;
      if (t2)
        child.resize$2(child.get$width(), newSize);
      else
        child.resize$2(newSize, child.get$height());
      ++i;
    }
    t1 = $.S(width) + "px";
    this.panelElement.get$style().set$width(t1);
    t1 = $.S(height) + "px";
    this.panelElement.get$style().set$height(t1);
  },
  resize$2$bailout: function(state0, width, height, t1, t2, i, t3, t4, barSize, targetTotalChildPanelSize, updatedTotalChildPanelSize, t6, scaleMultiplier, child, newSize) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        state0 = 0;
        t2 = $.length(this.childContainers);
      case 2:
        state0 = 0;
        if ($.$$le(t2, 1) === true)
          return;
        t2 = this.stackedVertical === true;
        i = 0;
      default:
        L0:
          while (true)
            switch (state0) {
              case 0:
                t3 = $.length(this.childContainers);
              case 3:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t3))
                  break L0;
                t3 = this.childContainers;
              case 4:
                state0 = 0;
                childContainer = $.$$index(t3, i);
                if (t2)
                  childContainer.resize$2(width, childContainer.get$height());
                else
                  childContainer.resize$2(childContainer.get$width(), height);
                t3 = $.length(this.spiltterBars);
              case 5:
                state0 = 0;
              case 6:
                if (state0 === 6 || state0 === 0 && $.CONSTANT5.$lt(i, t3))
                  switch (state0) {
                    case 0:
                      t3 = this.spiltterBars;
                    case 6:
                      state0 = 0;
                      splitBar = $.$$index(t3, i);
                      if (t2) {
                        t3 = $.S(width) + "px";
                        splitBar.get$barElement().get$style().set$width(t3);
                      } else {
                        t3 = $.S(height) + "px";
                        splitBar.get$barElement().get$style().set$height(t3);
                      }
                  }
                ++i;
            }
        t1.totalChildPanelSize_0 = 0;
        $.forEach(this.childContainers, new $.SplitterPanel_resize_anon(t1, this));
        t3 = this.spiltterBars;
      case 7:
        state0 = 0;
      case 8:
      case 9:
        if (state0 === 8 || state0 === 0 && t2)
          switch (state0) {
            case 0:
              t4 = $.$$index(t3, 0).get$barElement().get$clientHeight();
            case 8:
              state0 = 0;
              barSize = t4;
          }
        else
          switch (state0) {
            case 0:
              t4 = $.$$index(t3, 0).get$barElement().get$clientWidth();
            case 9:
              state0 = 0;
              barSize = t4;
          }
        targetTotalChildPanelSize = t2 ? height : width;
        t3 = $.length(this.spiltterBars);
      case 10:
        state0 = 0;
        targetTotalChildPanelSize = $.$$sub(targetTotalChildPanelSize, $.$$mul(barSize, t3));
        t1.totalChildPanelSize_0 = $.max(t1.totalChildPanelSize_0, 1);
        t1 = t1.totalChildPanelSize_0;
      case 11:
        state0 = 0;
        t6 = $.getInterceptor$JSNumber(targetTotalChildPanelSize);
        scaleMultiplier = t6.$div(targetTotalChildPanelSize, t1);
        updatedTotalChildPanelSize = 0;
        i = 0;
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
        var childContainer, splitBar, original;
        L1:
          while (true)
            switch (state0) {
              case 0:
                t1 = $.length(this.childContainers);
              case 12:
                state0 = 0;
                if (!$.CONSTANT5.$lt(i, t1))
                  break L1;
                t1 = this.childContainers;
              case 13:
                state0 = 0;
                child = $.$$index(t1, i);
              default:
                if (state0 === 14 || state0 === 0 && t2)
                  switch (state0) {
                    case 0:
                      t1 = child.get$containerElement().get$clientHeight();
                    case 14:
                      state0 = 0;
                      original = t1;
                  }
                else
                  switch (state0) {
                    case 0:
                      t1 = child.get$containerElement().get$clientWidth();
                    case 15:
                      state0 = 0;
                      original = t1;
                  }
                newSize = $.toInt($.$$mul(original, scaleMultiplier));
                if (typeof newSize !== "number")
                  throw $.iae(newSize);
                updatedTotalChildPanelSize += newSize;
              case 16:
                state0 = 0;
                t1 = $.length(this.childContainers);
              case 17:
                state0 = 0;
                if (i === $.$$sub(t1, 1)) {
                  t1 = t6.$sub(targetTotalChildPanelSize, updatedTotalChildPanelSize);
                  if (typeof t1 !== "number")
                    throw $.iae(t1);
                  newSize += t1;
                }
                if (t2)
                  child.resize$2(child.get$width(), newSize);
                else
                  child.resize$2(newSize, child.get$height());
                ++i;
            }
        t1 = $.S(width) + "px";
        this.panelElement.get$style().set$width(t1);
        t1 = $.S(height) + "px";
        this.panelElement.get$style().set$height(t1);
    }
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  SplitterPanel$2: function(childContainers, stackedVertical) {
    this.panelElement = $.DivElement_DivElement();
    this.spiltterBars = $.List_List(0);
    this._buildSplitterDOM$0();
  }
};

$$.TabHandle = {"": "Object;elementBase,elementText,elementCloseButton,undockInitiator,parent=,undockHandler,mouseClickHandler,closeButtonHandler",
  destroy$0: function() {
    this.mouseClickHandler.cancel$0();
    this.closeButtonHandler.cancel$0();
    this.elementBase.remove$0();
    this.elementCloseButton.remove$0();
    this.elementBase = null;
    this.elementCloseButton = null;
  },
  _performUndock$2: function(e, dragOffset) {
    if ($.$$eq(this.parent.get$container().get$containerType(), "panel") === true) {
      this.undockInitiator.set$enabled(false);
      return this.parent.get$container().performUndockToDialog$2(e, dragOffset);
    } else
      return;
  },
  get$_performUndock: function() {
    return new $.BoundClosure$2(this, "_performUndock$2");
  },
  onMouseClicked$1: function(e) {
    this.parent.onSelected$0();
  },
  get$onMouseClicked: function() {
    return new $.BoundClosure$1(this, "onMouseClicked$1");
  },
  onCloseButtonClicked$1: function(e) {
    if ($.$$eq(this.parent.get$container().get$containerType(), "panel") === true) {
      this.undockInitiator.set$enabled(false);
      this.parent.get$container().performUndock$0();
    }
  },
  get$onCloseButtonClicked: function() {
    return new $.BoundClosure$1(this, "onCloseButtonClicked$1");
  },
  setSelected$1: function(selected) {
    var t1 = this.elementBase;
    if (selected === true)
      $.add(t1.get$classes(), "tab-handle-selected");
    else
      $.remove(t1.get$classes(), "tab-handle-selected");
  },
  setZIndex$1: function(zIndex) {
    var t1 = $.S(zIndex);
    this.elementBase.get$style().set$zIndex(t1);
  },
  _bringToFront$1: function(element) {
    var t1 = $.S($.TabHandle_zIndexCounter);
    element.get$style().set$zIndex(t1);
    $.TabHandle_zIndexCounter = $.$$add($.TabHandle_zIndexCounter, 1);
  },
  TabHandle$1: function($parent) {
    var title;
    this.undockHandler = this.get$_performUndock();
    this.elementBase = $.DivElement_DivElement();
    this.elementText = $.DivElement_DivElement();
    this.elementCloseButton = $.DivElement_DivElement();
    $.add(this.elementBase.get$classes(), "tab-handle");
    $.add(this.elementBase.get$classes(), "disable-selection");
    $.add(this.elementText.get$classes(), "tab-handle-text");
    $.add(this.elementCloseButton.get$classes(), "tab-handle-close-button");
    $.add(this.elementBase.get$nodes(), this.elementText);
    if (this.parent.get$host().get$displayCloseButton() === true)
      $.add(this.elementBase.get$nodes(), this.elementCloseButton);
    $.add(this.parent.get$host().get$tabListElement().get$nodes(), this.elementBase);
    title = this.parent.get$container().getRawTitle$0();
    this.elementText.set$innerHtml(title);
    this.elementCloseButton.set$innerHtml("<i class=\"icon-remove-sign\"></i>");
    this._bringToFront$1(this.elementBase);
    this.undockInitiator = $.UndockInitiator$(this.elementBase, this.undockHandler, 10);
    this.undockInitiator.set$enabled(true);
    this.mouseClickHandler = this.elementBase.get$onClick().listen$1(this.get$onMouseClicked());
    this.closeButtonHandler = this.elementCloseButton.get$onMouseDown().listen$1(this.get$onCloseButtonClicked());
  }
};

$$.TabPage = {"": "Object;host>,handle>,container>,containerElement>,selected",
  destroy$0: function() {
    this.handle.destroy$0();
  },
  onSelected$0: function() {
    this.host.onTabPageSelected$1(this);
  },
  setSelected$1: function(flag) {
    var t1, width, height;
    this.selected = flag;
    this.handle.setSelected$1(flag);
    if (this.selected === true) {
      t1 = this.host;
      $.add(t1.get$contentElement().get$nodes(), this.containerElement);
      t1 = t1.get$contentElement();
      width = t1.get$clientWidth();
      height = t1.get$clientHeight();
      this.container.resize$2(width, height);
    } else
      this.containerElement.remove$0();
  },
  resize$2: function(width, height) {
    this.container.resize$2(width, height);
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  TabPage$2: function(host, container) {
    this.handle = $.TabHandle$(this);
    this.containerElement = this.container.get$containerElement();
  }
};

$$.TabHost = {"": "Object;hostElement,contentElement>,tabListElement>,separatorElement,activeTab=,pages>,createTabPage,onTabChanged,displayCloseButton>",
  createTabPage$2: function(arg0, arg1) {
    return this.createTabPage.call$2(arg0, arg1);
  },
  onTabChanged$2: function(arg0, arg1) {
    return this.onTabChanged.call$2(arg0, arg1);
  },
  _createDefaultTabPage$2: function(tabHost, container) {
    return $.TabPage$(tabHost, container);
  },
  get$_createDefaultTabPage: function() {
    return new $.BoundClosure$2(this, "_createDefaultTabPage$2");
  },
  setActiveTab$1: function(container) {
    $.forEach(this.pages, new $.TabHost_setActiveTab_anon(this, container));
  },
  resize$2: function(width, height) {
    var t1, tabHeight, separatorHeight, contentHeight;
    t1 = $.S(width) + "px";
    this.hostElement.get$style().set$width(t1);
    t1 = $.S(height) + "px";
    this.hostElement.get$style().set$height(t1);
    tabHeight = this.tabListElement.get$clientHeight();
    separatorHeight = this.separatorElement.get$clientHeight();
    contentHeight = $.$$sub($.$$sub(height, tabHeight), separatorHeight);
    t1 = $.S(contentHeight) + "px";
    this.contentElement.get$style().set$height(t1);
    t1 = this.activeTab;
    if (!(t1 == null))
      t1.resize$2(width, contentHeight);
  },
  get$resize: function() {
    return new $.BoundClosure$2(this, "resize$2");
  },
  performLayout$1: function(children) {
    var oldActiveTab, childPanels, t1;
    $.forEach(this.pages, new $.TabHost_performLayout_anon());
    $.clear(this.pages);
    oldActiveTab = this.activeTab;
    this.activeTab = null;
    childPanels = $.toList($.CONSTANT0.where$1(children, new $.TabHost_performLayout_anon0()));
    t1 = $.getInterceptor$JSArrayJSString(childPanels);
    if ($.$$gt(t1.get$length(childPanels), 0) === true) {
      t1.forEach$1(childPanels, new $.TabHost_performLayout_anon1(this, oldActiveTab));
      this._setTabHandlesVisible$1(true);
    } else
      this._setTabHandlesVisible$1(false);
    t1 = this.activeTab;
    if (!(t1 == null))
      this.onTabPageSelected$1(t1);
  },
  _setTabHandlesVisible$1: function(visible) {
    var t1 = visible ? "block" : "none";
    this.tabListElement.get$style().set$display(t1);
    t1 = visible ? "block" : "none";
    this.separatorElement.get$style().set$display(t1);
  },
  onTabPageSelected$1: function(page) {
    var t1 = {};
    this.activeTab = page;
    $.forEach(this.pages, new $.TabHost_onTabPageSelected_anon(this));
    t1.zIndexDelta_0 = 1;
    t1.zIndex_1 = 1000;
    $.forEach(this.pages, new $.TabHost_onTabPageSelected_anon0(t1, this));
    if (!(this.onTabChanged == null))
      this.onTabChanged$2(this, page);
  },
  TabHost$2: function(tabStripDirection, displayCloseButton) {
    var t1;
    this.pages = $.List_List(0);
    this.hostElement = $.DivElement_DivElement();
    this.tabListElement = $.DivElement_DivElement();
    this.separatorElement = $.DivElement_DivElement();
    this.contentElement = $.DivElement_DivElement();
    this.createTabPage = this.get$_createDefaultTabPage();
    t1 = $.getInterceptor(tabStripDirection);
    if (t1.$eq(tabStripDirection, 1) === true) {
      $.add(this.hostElement.get$nodes(), this.contentElement);
      $.add(this.hostElement.get$nodes(), this.separatorElement);
      $.add(this.hostElement.get$nodes(), this.tabListElement);
    } else if (t1.$eq(tabStripDirection, 0) === true) {
      $.add(this.hostElement.get$nodes(), this.tabListElement);
      $.add(this.hostElement.get$nodes(), this.separatorElement);
      $.add(this.hostElement.get$nodes(), this.contentElement);
    } else
      throw $.$$throw($.DockException$("Only top and bottom tab strip orientations are supported"));
    $.add(this.hostElement.get$classes(), "tab-host");
    $.add(this.tabListElement.get$classes(), "tab-handle-list-container");
    $.add(this.separatorElement.get$classes(), "tab-handle-content-seperator");
    $.add(this.contentElement.get$classes(), "tab-content");
  }
};

$$.Rectangle = {"": "Object;x=,y=,width=,height="};

$$.UndockInitiator = {"": "Object;element>,listener,thresholdPixels,dragStartPosition,mouseDownHandler,mouseUpHandler>,mouseMoveHandler>,_enabled",
  listener$2: function(arg0, arg1) {
    return this.listener.call$2(arg0, arg1);
  },
  get$enabled: function() {
    return this._enabled;
  },
  set$enabled: function(value) {
    var t1, t2;
    this._enabled = value;
    t1 = this._enabled;
    t2 = this.mouseDownHandler;
    if (t1 === true) {
      this._cancelSubscription$1(t2);
      this.mouseDownHandler = this.element.get$onMouseDown().listen$1(this.get$onMouseDown());
    } else {
      this._cancelSubscription$1(t2);
      this._cancelSubscription$1(this.mouseUpHandler);
      this._cancelSubscription$1(this.mouseMoveHandler);
      this.mouseDownHandler = null;
      this.mouseUpHandler = null;
      this.mouseMoveHandler = null;
    }
  },
  _cancelSubscription$1: function(sub) {
    if (!(sub == null))
      sub.cancel$0();
  },
  onMouseDown$1: function(e) {
    var t1;
    if (this.get$enabled() === true) {
      t1 = this.mouseUpHandler;
      if (!(t1 == null))
        t1.cancel$0();
      t1 = this.mouseMoveHandler;
      if (!(t1 == null))
        t1.cancel$0();
      this.mouseUpHandler = window.get$onMouseUp().listen$1(this.get$onMouseUp());
      this.mouseMoveHandler = window.get$onMouseMove().listen$1(this.get$onMouseMove());
      this.dragStartPosition = $.Point2$(e.get$pageX(), e.get$pageY());
    }
  },
  get$onMouseDown: function() {
    return new $.BoundClosure$1(this, "onMouseDown$1");
  },
  onMouseUp$1: function(e) {
    var t1 = this.mouseUpHandler;
    if (!(t1 == null))
      t1.cancel$0();
    t1 = this.mouseMoveHandler;
    if (!(t1 == null))
      t1.cancel$0();
    this.mouseUpHandler = null;
    this.mouseMoveHandler = null;
  },
  get$onMouseUp: function() {
    return new $.BoundClosure$1(this, "onMouseUp$1");
  },
  onMouseMove$1: function(e) {
    var position, dx, dy;
    position = $.Point2$(e.get$pageX(), e.get$pageY());
    dx = $.$$sub(position.x, this.dragStartPosition.get$x());
    dy = $.$$sub(position.y, this.dragStartPosition.get$y());
    if ($.CONSTANT8.$gt(Math.sqrt($.checkNum($.$$add($.$$mul(dx, dx), $.$$mul(dy, dy)))), this.thresholdPixels)) {
      this.set$enabled(false);
      this._requestUndock$1(e);
    }
  },
  get$onMouseMove: function() {
    return new $.BoundClosure$1(this, "onMouseMove$1");
  },
  _requestUndock$1: function(e) {
    this.listener$2(e, $.Point2$($.$$sub(this.dragStartPosition.get$x(), this.element.get$offsetLeft()), $.$$sub(this.dragStartPosition.get$y(), this.element.get$offsetTop())));
  }
};

$$.Point2 = {"": "Object;x=,y=",
  $sub: function(other) {
    return $.Point2$($.$$sub(this.x, other.get$x()), $.$$sub(this.y, other.get$y()));
  },
  $add: function(other) {
    var t1, t3, t6;
    t1 = this.x;
    t3 = other.get$x();
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, other, t1, t3);
    t3 = t1 + t3;
    t1 = this.y;
    t6 = other.get$y();
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, other, t1, t3);
    if (typeof t6 !== "number")
      return this.$$add$bailout(4, 0, t1, t3, t6);
    return $.Point2$(t3, t1 + t6);
  },
  $$add$bailout: function(state0, other, t1, t3, t6) {
    switch (state0) {
      case 0:
        t1 = this.x;
      case 1:
        state0 = 0;
        t3 = other.get$x();
      case 2:
        state0 = 0;
        t3 = $.$$add(t1, t3);
        t1 = this.y;
      case 3:
        state0 = 0;
        t6 = other.get$y();
      case 4:
        state0 = 0;
        return $.Point2$(t3, $.$$add(t1, t6));
    }
  },
  $mul: function(value) {
    return $.Point2$($.$$mul(this.x, value), $.$$mul(this.y, value));
  },
  $eq: function(other) {
    if (other == null)
      return false;
    return $.$$eq(this.x, other.get$x()) === true && $.$$eq(this.y, other.get$y()) === true;
  },
  toString$0: function() {
    return "[" + $.S(this.x) + ", " + $.S(this.y) + "]";
  }
};

$$.Size = {"": "Object;width=,height=",
  $sub: function(other) {
    return $.Size$($.$$sub(this.width, other.get$width()), $.$$sub(this.height, other.get$height()));
  },
  $add: function(other) {
    var t1, t3, t6;
    t1 = this.width;
    t3 = other.get$width();
    if (typeof t1 !== "number")
      return this.$$add$bailout(1, other, t1);
    if (typeof t3 !== "number")
      return this.$$add$bailout(2, other, t1, t3);
    t3 = t1 + t3;
    t1 = this.height;
    t6 = other.get$height();
    if (typeof t1 !== "number")
      return this.$$add$bailout(3, other, t1, t3);
    if (typeof t6 !== "number")
      return this.$$add$bailout(4, 0, t1, t3, t6);
    return $.Size$(t3, t1 + t6);
  },
  $$add$bailout: function(state0, other, t1, t3, t6) {
    switch (state0) {
      case 0:
        t1 = this.width;
      case 1:
        state0 = 0;
        t3 = other.get$width();
      case 2:
        state0 = 0;
        t3 = $.$$add(t1, t3);
        t1 = this.height;
      case 3:
        state0 = 0;
        t6 = other.get$height();
      case 4:
        state0 = 0;
        return $.Size$(t3, $.$$add(t1, t6));
    }
  },
  $mul: function(value) {
    return $.Size$($.$$mul(this.width, value), $.$$mul(this.height, value));
  }
};

$$.BoundingBox = {"": "Object;size,location",
  get$x: function() {
    return this.location.x;
  },
  set$x: function(value) {
    this.location.set$x(value);
    return value;
  },
  get$y: function() {
    return this.location.y;
  },
  set$y: function(value) {
    this.location.set$y(value);
    return value;
  },
  get$width: function() {
    return this.size.get$width();
  },
  set$width: function(value) {
    this.size.width = value;
    return value;
  },
  get$height: function() {
    return this.size.get$height();
  },
  set$height: function(value) {
    this.size.height = value;
    return value;
  },
  get$left: function() {
    return this.location.get$x();
  },
  set$left: function(value) {
    this.location.x = value;
    return value;
  },
  get$top: function() {
    return this.location.get$y();
  },
  set$top: function(value) {
    this.location.y = value;
    return value;
  },
  BoundingBox$0: function() {
    this.size = $.Size$(0, 0);
    this.location = $.Point2$(0, 0);
  }
};

$$.DockManager_rebuildLayout_anon = {"": "Closure;this_0",
  call$1: function(child) {
    return this.this_0.rebuildLayout$1(child);
  }
};

$$.DockNode_performLayout_anon = {"": "Closure;childContainers_0",
  call$1: function(childNode) {
    return $.add(this.childContainers_0, childNode.get$container());
  }
};

$$.ToString__emitMap_anon = {"": "Closure;box_0,result_1,visiting_2",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (t1.first_0 !== true)
      $.add(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.add(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$._LinkedHashMapImpl_forEach_anon = {"": "Closure;f_0",
  call$1: function(entry) {
    this.f_0.call$2(entry.get$key(), entry.get$value());
  }
};

$$.NoSuchMethodError_toString_anon = {"": "Closure;box_0",
  call$2: function(key, value) {
    var t1 = this.box_0;
    if ($.$$gt(t1.i_1, 0) === true)
      $.add(t1.sb_0, ", ");
    $.add(t1.sb_0, key);
    $.add(t1.sb_0, ": ");
    $.add(t1.sb_0, $.Error_safeToString(value));
    t1.i_1 = $.$$add(t1.i_1, 1);
  }
};

$$.FilteredElementList__filtered_anon = {"": "Closure;",
  call$1: function(n) {
    return typeof n === "object" && n !== null && n.$isElement();
  }
};

$$.HashSet_forEach_anon = {"": "Closure;f_0",
  call$2: function(key, value) {
    this.f_0.call$1(key);
  }
};

$$.CssClassSet_add_anon = {"": "Closure;value_0",
  call$1: function(s) {
    return $.add(s, this.value_0);
  }
};

$$.Stream_last_anon = {"": "Closure;box_0",
  call$1: function(value) {
    var t1 = this.box_0;
    t1.foundResult_1 = true;
    t1.result_0 = value;
  }
};

$$.Stream_last_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    var t1 = this.box_0;
    if (t1.foundResult_1 === true) {
      this.future_1._setValue$1(t1.result_0);
      return;
    }
    this.future_1._setError$1($.AsyncError$($.StateError$("No elements"), null));
  }
};

$$.invokeClosure_anon = {"": "Closure;closure_0",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {"": "Closure;closure_1,arg1_2",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {"": "Closure;closure_3,arg1_4,arg2_5",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {"": "Closure;this_0",
  call$1: function(_) {
    var t1, error;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError() === true) {
      t1._clearUnhandledError$0();
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error.get$error()));
      t1 = error.get$stackTrace();
      if (!(t1 == null))
        $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
      throw $.$$throw(error.get$error());
    }
  }
};

$$.anon = {"": "Closure;this_0,callback_1",
  call$0: function() {
    this.callback_1.call$1(this.this_0);
  }
};

$$.internalCallback = {"": "Closure;this_2,callback_3",
  call$0: function() {
    var t1, t2;
    t1 = this.callback_3;
    t2 = this.this_2;
    t1.call$1(t2);
    t2.set$_handle(null);
    t2 = $globalState.topEventLoop;
    t2.set$activeTimerCount($.$$sub(t2.get$activeTimerCount(), 1));
  }
};

$$.Stream_isEmpty_anon = {"": "Closure;box_0,future_1",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  }
};

$$.Stream_isEmpty_anon0 = {"": "Closure;future_2",
  call$0: function() {
    this.future_2._setValue$1(true);
  }
};

$$.Stream_length_anon = {"": "Closure;box_0",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$$add(t1.count_0, 1);
  }
};

$$.Stream_length_anon0 = {"": "Closure;box_0,future_1",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  }
};

$$.Stream_contains_anon = {"": "Closure;box_0,match_1,future_2",
  call$1: function(element) {
    var t1, t2, t3;
    t1 = new $.Stream_contains__anon(this.match_1, element);
    t2 = this.box_0;
    t3 = this.future_2;
    $._runUserCode(t1, new $.Stream_contains__anon0(t2, t3), $._cancelAndError(t2.subscription_0, t3), null);
  }
};

$$.Stream_contains__anon = {"": "Closure;match_3,element_4",
  call$0: function() {
    return $.$$eq(this.element_4, this.match_3);
  }
};

$$.Stream_contains__anon0 = {"": "Closure;box_0,future_5",
  call$1: function(isMatch) {
    if (isMatch === true) {
      this.box_0.subscription_0.cancel$0();
      this.future_5._setValue$1(true);
    }
  }
};

$$.Stream_contains_anon0 = {"": "Closure;future_6",
  call$0: function() {
    this.future_6._setValue$1(false);
  }
};

$$._cancelAndError_anon = {"": "Closure;subscription_0,future_1",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  }
};

$$.AsyncError_throwDelayed_reportError = {"": "Closure;this_0",
  call$0: function() {
    var t1 = this.this_0;
    $.Primitives_printString("Uncaught Error: " + $.S(t1.get$error()));
    t1 = t1.get$stackTrace();
    if (!(t1 == null))
      $.Primitives_printString("Stack Trace:\n" + $.S(t1) + "\n");
  }
};

$$.AsyncError_throwDelayed_anon = {"": "Closure;this_1,reportError_2",
  call$1: function(_) {
    this.reportError_2.call$0();
    throw $.$$throw(this.this_1.get$error());
  }
};

$$.CssClassSet_addAll_anon = {"": "Closure;iterable_0",
  call$1: function(s) {
    return $.addAll(s, this.iterable_0);
  }
};

$$.Collection_clear_anon = {"": "Closure;",
  call$1: function(e) {
    return true;
  }
};

$$.CssClassSet_removeMatching_anon = {"": "Closure;test_0",
  call$1: function(s) {
    return $.removeMatching(s, this.test_0);
  }
};

$$.CssClassSet_removeAll_anon = {"": "Closure;iterable_0",
  call$1: function(s) {
    return $.removeAll(s, this.iterable_0);
  }
};

$$.Stream_toSet_anon = {"": "Closure;result_0",
  call$1: function(data) {
    $.add(this.result_0, data);
  }
};

$$.Stream_toSet_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  }
};

$$.CssClassSet_clear_anon = {"": "Closure;",
  call$1: function(s) {
    return $.clear(s);
  }
};

$$.ResizableContainer__buildResizeHandle_anon = {"": "Closure;this_0,handle_1",
  call$1: function(e) {
    this.this_0.onMouseMoved$2(this.handle_1, e);
  }
};

$$.ResizableContainer__buildResizeHandle_anon0 = {"": "Closure;this_2,handle_3",
  call$1: function(e) {
    this.this_2.onMouseDown$2(this.handle_3, e);
  }
};

$$.ResizableContainer__buildResizeHandle_anon1 = {"": "Closure;this_4,handle_5",
  call$1: function(e) {
    this.this_4.onMouseUp$2(this.handle_5, e);
  }
};

$$.DockManager_resumeLayout_anon = {"": "Closure;this_0",
  call$1: function(listener) {
    return listener.onResumeLayout$1(this.this_0);
  }
};

$$.ResizableContainer__adjustResizeHandles_anon = {"": "Closure;this_0,_width_1,_height_2",
  call$1: function(handle) {
    handle.adjustSize$3(this.this_0.get$topLevelElement(), this._width_1, this._height_2);
  }
};

$$.DockManager_suspendLayout_anon = {"": "Closure;this_0",
  call$1: function(listener) {
    return listener.onSuspendLayout$1(this.this_0);
  }
};

$$.anon0 = {"": "Closure;this_0",
  call$1: function(wheelType) {
    var t1 = this.this_0;
    $.$$indexSet(t1.get$wheelItems(), wheelType, $.DockWheelItem$(t1, wheelType));
    if ($.endsWith(wheelType, "-s") === true)
      $.add(t1.get$elementSideWheel().get$nodes(), $.$$index(t1.get$wheelItems(), wheelType).get$element());
    else
      $.add(t1.get$elementMainWheel().get$nodes(), $.$$index(t1.get$wheelItems(), wheelType).get$element());
  }
};

$$.TabHost_performLayout_anon = {"": "Closure;",
  call$1: function(tab) {
    tab.destroy$0();
  }
};

$$.TabHost_performLayout_anon0 = {"": "Closure;",
  call$1: function(child) {
    return $.$$eq(child.get$containerType(), "panel");
  }
};

$$.TabHost_performLayout_anon1 = {"": "Closure;this_0,oldActiveTab_1",
  call$1: function(child) {
    var t1, page, t2;
    t1 = this.this_0;
    page = t1.createTabPage$2(t1, child);
    $.add(t1.get$pages(), page);
    t2 = this.oldActiveTab_1;
    if (!(t2 == null) && $.$$eq(page.get$container(), t2.get$container()) === true)
      t1.set$activeTab(page);
  }
};

$$.TabHost_onTabPageSelected_anon = {"": "Closure;this_1",
  call$1: function(tabPage) {
    tabPage.setSelected$1($.$$eq(tabPage, this.this_1.get$activeTab()));
  }
};

$$.TabHost_onTabPageSelected_anon0 = {"": "Closure;box_0,this_2",
  call$1: function(tabPage) {
    var t1, t2;
    t1 = tabPage.get$handle();
    t2 = this.box_0;
    t1.setZIndex$1(t2.zIndex_1);
    if ($.$$eq(tabPage, this.this_2.get$activeTab()) === true)
      t2.zIndexDelta_0 = -1;
    t2.zIndex_1 = $.$$add(t2.zIndex_1, t2.zIndexDelta_0);
  }
};

$$.Stream_toList_anon = {"": "Closure;result_0",
  call$1: function(data) {
    $.add(this.result_0, data);
  }
};

$$.Stream_toList_anon0 = {"": "Closure;result_1,future_2",
  call$0: function() {
    this.future_2._setValue$1(this.result_1);
  }
};

$$.TabHost_setActiveTab_anon = {"": "Closure;this_0,container_1",
  call$1: function(page) {
    if ($.$$eq(page.get$container(), this.container_1) === true) {
      this.this_0.onTabPageSelected$1(page);
      return;
    }
  }
};

$$.FilteredElementList_removeRange_anon = {"": "Closure;",
  call$1: function(el) {
    return el.remove$0();
  }
};

$$.SplitterPanel_resize_anon = {"": "Closure;box_0,this_1",
  call$1: function(container) {
    var size, t1;
    size = this.this_1.get$stackedVertical() === true ? container.get$height() : container.get$width();
    t1 = this.box_0;
    t1.totalChildPanelSize_0 = $.$$add(t1.totalChildPanelSize_0, size);
  }
};

$$.SplitterPanel_setContainerRatio_anon = {"": "Closure;this_0,container_1,newContainerSize_2,otherPanelScaleMultipler_3",
  call$1: function(child) {
    var size, t1;
    if ($.$$eq(child, this.container_1) !== true) {
      size = this.this_0.get$stackedVertical() === true ? child.get$containerElement().get$clientHeight() : child.get$containerElement().get$clientWidth();
      size = $.$$mul(size, this.otherPanelScaleMultipler_3);
    } else
      size = this.newContainerSize_2;
    t1 = $.getInterceptor$JSNumber(size);
    if (this.this_0.get$stackedVertical() === true)
      child.resize$2(child.get$width(), t1.toInt$0(size));
    else
      child.resize$2(t1.toInt$0(size), child.get$height());
  }
};

$$.SplitterPanel_removeFromDOM_anon = {"": "Closure;",
  call$1: function(container) {
    if (!(container.get$containerElement() == null)) {
      $.remove(container.get$containerElement().get$classes(), "splitter-container-vertical");
      $.remove(container.get$containerElement().get$classes(), "splitter-container-horizontal");
      container.get$containerElement().remove$0();
    }
  }
};

$$.SplitterPanel_removeFromDOM_anon0 = {"": "Closure;",
  call$1: function(bar) {
    return bar.get$barElement().remove$0();
  }
};

$$.Storage_values_anon = {"": "Closure;values_0",
  call$2: function(k, v) {
    return $.add(this.values_0, v);
  }
};

$$._LinkedHashMapImpl_values_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$value();
  }
};

$$.DockWheel_hideWheel_anon = {"": "Closure;",
  call$1: function(item) {
    item.set$active(false);
    return false;
  }
};

$$._EventLoop__runHelper_next = {"": "Closure;this_0",
  call$0: function() {
    if (this.this_0.runIteration$0() !== true)
      return;
    $.TimerImpl$(0, new $._EventLoop__runHelper_next_anon(this));
  }
};

$$._EventLoop__runHelper_next_anon = {"": "Closure;next_1",
  call$1: function(_) {
    return this.next_1.call$0();
  }
};

$$._BaseSendPort_call_anon = {"": "Closure;completer_0,port_1",
  call$2: function(value, ignoreReplyTo) {
    var t1;
    this.port_1.close$0();
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!value.$isException)
      t1.completeError$1(value);
    else
      t1.complete$1(value);
  }
};

$$._WorkerSendPort_send_anon = {"": "Closure;this_0,message_1,replyTo_2",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true)
      $globalState.mainManager.postMessage$1(workerMessage);
    else {
      manager = $.$$index($globalState.managers, t1.get$_workerId());
      if (!(manager == null))
        manager.postMessage$1(workerMessage);
    }
  }
};

$$._waitForPendingPorts_anon = {"": "Closure;callback_0",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._FutureImpl__handleValue_anon = {"": "Closure;thenFuture_0,value_1",
  call$1: function(_) {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl__handleError_anon = {"": "Closure;error_0,errorFuture_1",
  call$1: function(_) {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {"": "Closure;box_0,completer_1,values_2,pos_3",
  call$1: function(value) {
    var t1, t2, remaining;
    t1 = this.values_2;
    $.$$indexSet(t1, this.pos_3, value);
    t2 = this.box_0;
    remaining = $.$$sub(t2.remaining_0, 1);
    t2.remaining_0 = remaining;
    if ($.$$eq(remaining, 0) === true)
      this.completer_1.complete$1(t1);
  }
};

$$._FutureImpl__FutureImpl$wait_anon0 = {"": "Closure;box_0,completer_4",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.completed_1 !== true)
      this.completer_4.completeError$2(error.get$error(), error.get$stackTrace());
    t1.completed_1 = true;
  }
};

$$._NativeJsSendPort_send_anon = {"": "Closure;this_1,message_2,replyTo_3",
  call$0: function() {
    var t1, t2, t3, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    isolate = $.$$index($globalState.isolates, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = !($globalState.currentContext == null) && $.$$eq($globalState.currentContext.get$id(), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    $globalState.topEventLoop.enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), "receive " + $.S(msg));
  }
};

$$._NativeJsSendPort_send__anon = {"": "Closure;box_0,this_4,shouldSerialize_5",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (!(t1.get$_receivePort().get$_callback() == null)) {
      if (this.shouldSerialize_5 === true) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._PendingSendPortFinder_visitMap_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._PendingSendPortFinder_visitList_anon = {"": "Closure;this_0",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$.Storage_keys_anon = {"": "Closure;keys_0",
  call$2: function(k, v) {
    return $.add(this.keys_0, k);
  }
};

$$._LinkedHashMapImpl_keys_anon = {"": "Closure;",
  call$1: function(entry) {
    return entry.get$key();
  }
};

$$._Copier_visitMap_anon = {"": "Closure;box_0,this_1",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$$indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  }
};

$$.IsolateNatives__processWorkerMessage_function = {"": "Closure;entryPoint_0,replyTo_1",
  call$0: function() {
    $.IsolateNatives__startIsolate(this.entryPoint_0, this.replyTo_1);
  }
};

$$.BoundClosure$1 = {"": "Closure;self,target",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};
$$.BoundClosure$i1 = {"": "Closure;self,target,receiver",
  call$1: function(p0) {
    return this.self[this.target](this.receiver, p0);
  }
};
$$.Bound_contains_JSString = {"": "Closure;self,target,receiver",
  call$2: function(p0, p1) {
    return this.self[this.target](this.receiver, p0, p1);
  },
  call$1: function($receiver, other) {
    return this.call$2($receiver, other, 0);
  }
};
$$.BoundClosure$0 = {"": "Closure;self,target",
  call$0: function() {
    return this.self[this.target]();
  }
};
$$.BoundClosure$2 = {"": "Closure;self,target",
  call$2: function(p0, p1) {
    return this.self[this.target](p0, p1);
  }
};
$$.Bound_dockLeft_DockManager = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  },
  call$2: function(referenceNode, container) {
    return this.call$3(referenceNode, container, null);
  }
};
$$.Bound_dockRight_DockManager = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  },
  call$2: function(referenceNode, container) {
    return this.call$3(referenceNode, container, null);
  }
};
$$.Bound_dockUp_DockManager = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  },
  call$2: function(referenceNode, container) {
    return this.call$3(referenceNode, container, null);
  }
};
$$.Bound_dockDown_DockManager = {"": "Closure;self,target",
  call$3: function(p0, p1, p2) {
    return this.self[this.target](p0, p1, p2);
  },
  call$2: function(referenceNode, container) {
    return this.call$3(referenceNode, container, null);
  }
};
$.MappedIterable$ = function(_iterable, _f) {
  return new $.MappedIterable(_iterable, _f);
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.WhereIterable$ = function(_iterable, _f) {
  return new $.WhereIterable(_iterable, _f);
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(list, list.length, -1, null);
};

$.ToString_collectionToString = function(c) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitCollection(c, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitCollection = function(c, result, visiting) {
  var t1, isList, t2, t3, first, t4;
  t1 = $.getInterceptor$JSArray(visiting);
  t1.add$1(visiting, c);
  isList = typeof c === "object" && c !== null && (c.constructor === Array || c.$isList());
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, t2);
  for (t2 = $.iterator(c), first = true; t2.moveNext$0() === true; first = false) {
    t4 = t2.get$current();
    if (!first)
      t3.add$1(result, ", ");
    $.ToString__emitObject(t4, result, visiting);
  }
  t3.add$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || o.$isCollection()))
    if ($.ToString__containsRef(visiting, o) === true)
      $.add(result, typeof o === "object" && o !== null && (o.constructor === Array || o.$isList()) ? "[...]" : "{...}");
    else
      $.ToString__emitCollection(o, result, visiting);
  else if (typeof o === "object" && o !== null && o.$isMap())
    if ($.ToString__containsRef(visiting, o) === true)
      $.add(result, "{...}");
    else
      $.ToString__emitMap(o, result, visiting);
  else
    $.add(result, o);
};

$.ToString__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.moveNext$0() === true;) {
    t2 = t1.get$current();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.ToString_mapToString = function(m) {
  var result = $.JsStringBuffer$("");
  $.ToString__emitMap(m, result, $.List_List(0));
  return result.toString$0();
};

$.ToString__emitMap = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$JSArray(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$JSArray(result);
  t3.add$1(result, "{");
  t1.first_0 = true;
  $.forEach(m, new $.ToString__emitMap_anon(t1, result, visiting));
  t3.add$1(result, "}");
  t2.removeLast$0(visiting);
};

$.Strings__toJsStringArray = function(strings) {
  var $length, i, string;
  $.checkNull(strings);
  if (!strings.constructor === Array)
    strings = $.List_List$from(strings);
  $length = strings.length;
  for (i = 0; i < $length; ++i) {
    string = strings[i];
    if (!(typeof string === "string"))
      throw $.$$throw($.ArgumentError$(string));
  }
  return strings;
};

$._callInIsolate = function(isolate, $function) {
  isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue(), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var scripts, len, i, script, src, t1;
  scripts = document.getElementsByTagName('script');
  for (len = scripts.length, i = 0; i < len; ++i) {
    script = scripts[i];
    src = script && script.src;
    t1 = $.getInterceptor(src);
    if (!(src == null) && t1.endsWith$1(src, "test_controller.js") !== true && t1.endsWith$1(src, "dart.js") !== true)
      return src;
  }
  return;
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, t2, entryPoint, replyTo, context;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$JSArrayJSString(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      t2 = t1.$index(msg, "id");
      $globalState.currentManagerId = t2;
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.enqueue$3(context, new $.IsolateNatives__processWorkerMessage_function(entryPoint, replyTo), "worker-start");
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (!(t1.$index(msg, "port") == null))
        t1.$index(msg, "port").send$2(t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      $.remove($globalState.managers, sender.get$id());
      sender.terminate$0();
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true)
        $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg])));
      else
        $.Primitives_printString($.toString(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.$$throw(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, exception;
  if ($globalState.isWorker === true)
    $globalState.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg])));
  else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.$$throw($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__startIsolate = function(topLevel, replyTo) {
  $.lazyPort = $.ReceivePortImpl$();
  replyTo.send$2("spawned", $._Isolate_port().toSendPort$0());
  topLevel.call$0();
};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  worker.set$onmessage(function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  worker.set$id(workerId);
  $.$$indexSet($globalState.managers, workerId, worker);
  worker.postMessage$1($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$$add(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return !($.get$globalThis().setTimeout == null);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number" && !(value === 0) || typeof value === "boolean")
    return String(value);
  if (value == null)
    return "null";
  res = $.toString(value);
  if (!(typeof res === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$$add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw 'Unable to print message: ' + String(string);
};

$.Primitives__throwFormatException = function(string) {
  throw $.$$throw($.FormatException$(string));
};

$.Primitives_parseInt = function(source, radix, handleError) {
  var match, t1, maxCharCode, digitsPart, i;
  if (handleError == null)
    handleError = $.Primitives__throwFormatException;
  $.checkString(source);
  match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
  if (radix == null) {
    t1 = $.getInterceptor(match);
    if (!(match == null)) {
      if (!(t1.$index(match, 2) == null))
        return parseInt(source, 16);
      if (!(t1.$index(match, 3) == null))
        return parseInt(source, 10);
      return handleError.call$1(source);
    }
    radix = 10;
  } else {
    if (!(typeof radix === "number" && Math.floor(radix) === radix))
      throw $.$$throw($.ArgumentError$("Radix is not an integer"));
    if (radix < 2 || radix > 36)
      throw $.$$throw($.RangeError$("Radix " + $.S(radix) + " not in range 2..36"));
    t1 = $.getInterceptor(match);
    if (!(match == null)) {
      if (radix === 10 && !(t1.$index(match, 3) == null))
        return parseInt(source, 10);
      if (radix < 10 || t1.$index(match, 3) == null) {
        maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
        digitsPart = $.toLowerCase(t1.$index(match, 1));
        for (t1 = $.getInterceptor$JSArrayJSString(digitsPart), i = 0; $.CONSTANT5.$lt(i, t1.get$length(digitsPart)); ++i)
          if ($.$$gt(t1.charCodeAt$1(digitsPart, i), maxCharCode) === true)
            return handleError.call$1(source);
      }
    }
    radix = radix;
  }
  if (match == null)
    return handleError.call$1(source);
  return parseInt(source, radix);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$JSString($name);
  return t1.charCodeAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives_newFixedList = function($length) {
  var result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.ArgumentError$(null));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === "number"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.checkString = function(value) {
  if (!(typeof value === "string"))
    throw $.$$throw($.ArgumentError$(value));
  return value;
};

$.$$throw = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.CONSTANT;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.$$throw);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1)
      if ($.CONSTANT1.endsWith$1(message, "is null") === true || $.CONSTANT1.endsWith$1(message, "is undefined") === true || $.CONSTANT1.endsWith$1(message, "is null or undefined") === true || $.CONSTANT1.endsWith$1(message, "of undefined") === true || $.CONSTANT1.endsWith$1(message, "of null") === true)
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.CONSTANT0.get$iterator(keyValuePairs);
  result = $._LinkedHashMapImpl$();
  for (; iterator.moveNext$0() === true;) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.$$throw($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $._currentIsolate();
  $function = function($0, $1) { return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, $0, $1); };
  closure.$identity = $function;
  return $function;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "WebKitMutationObserver")
    return "MutationObserver";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  return $name;
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "MouseScrollEvent")
    return "WheelEvent";
  if ($name === "OfflineResourceList")
    return "DOMApplicationCache";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Window")
    return "DOMWindow";
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "ApplicationCache")
    return "DOMApplicationCache";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "MouseWheelEvent")
    return "WheelEvent";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && (obj instanceof window.DataView))
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof($constructor) === "function") {
    $name = $constructor.name;
    if (typeof $name === "string")
      t1 = !($name === "") && !($name === "Object") && !($name === "Function.prototype");
    else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.callHasOwnProperty = function($function, object, property) {
  return $function.call(object, property);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === "object"))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return "Instance of " + $.getTypeNameOf(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, $name, methods, $arguments) {
  var tag, hasOwnPropertyFunction, method, secondTag, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  method = $.dynamicBindLookup(hasOwnPropertyFunction, tag, methods);
  if (method == null) {
    secondTag = $.alternateTag(obj, tag);
    if (!(secondTag == null))
      method = $.dynamicBindLookup(hasOwnPropertyFunction, secondTag, methods);
  }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, $.getTypeNameOf($.CONSTANT13));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError($name + " is not a function");} else {return Object.prototype[$name].apply(this, arguments);}};
  if ($.callHasOwnProperty(hasOwnPropertyFunction, proto, $name) !== true)
    $.defineProperty(proto, $name, method);
  return method.apply(obj, $arguments);
};

$.dynamicBindLookup = function(hasOwnPropertyFunction, tag, methods) {
  var method, i, entry;
  method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if ($.callHasOwnProperty(hasOwnPropertyFunction, entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnPropertyFunction, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  return method;
};

$.lookupDynamicClass = function(hasOwnPropertyFunction, methods, className) {
  return $.callHasOwnProperty(hasOwnPropertyFunction, methods, className) ? methods[className] : null;
};

$.dynamicFunction = function($name) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[$name];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CONSTANT13)[$name];
  if (!(dartMethod == null))
    methods["Object"] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, $name, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, $name, bind);
  return methods;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === "undefined")
    $._dynamicMetadata([]);
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = tags.split("|");
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    result.push($.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpExec = function(regExp, str) {
  var result = $.regExpGetNative(regExp).exec(str);
  if (result == null)
    return;
  return result;
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.regExpMakeNative = function(regExp, global) {
  var pattern, sb, e, isMultiLine, isCaseSensitive, t1, exception;
  pattern = regExp.get$pattern();
  isMultiLine = regExp.get$isMultiLine();
  isCaseSensitive = regExp.get$isCaseSensitive();
  $.checkString(pattern);
  sb = $.JsStringBuffer$("");
  if (isMultiLine === true)
    $.add(sb, "m");
  if (isCaseSensitive !== true)
    $.add(sb, "i");
  if (global === true)
    $.add(sb, "g");
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.JSSyntaxRegExp$ = function(pattern, caseSensitive, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, caseSensitive);
};

$.JSSyntaxRegExp__globalVersionOf = function(other) {
  var t1, t2, re;
  t1 = other.get$pattern();
  t2 = other.get$isMultiLine();
  re = $.JSSyntaxRegExp$(t1, other.get$isCaseSensitive(), t2);
  re._re = $.regExpMakeNative(re, true);
  return re;
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterable$ = function(_re, _str) {
  return new $._AllMatchesIterable(_re, _str);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp__globalVersionOf(re), _str, null);
};

$.StringMatch$ = function(start, str, pattern) {
  return new $.StringMatch(start, str, pattern);
};

$.allMatchesInStringUnchecked = function(needle, haystack) {
  var result, t1, $length, patternLength, startIndex, position, t2, endIndex;
  result = $.List_List(0);
  t1 = $.getInterceptor$JSArrayJSString(haystack);
  $length = t1.get$length(haystack);
  patternLength = needle.length;
  for (startIndex = 0; true;) {
    position = t1.indexOf$2(haystack, needle, startIndex);
    t2 = $.getInterceptor(position);
    if (t2.$eq(position, -1) === true)
      break;
    result.push($.StringMatch$(position, haystack, needle));
    endIndex = t2.$add(position, patternLength);
    if ($.$$eq(endIndex, $length) === true)
      break;
    else
      startIndex = t2.$eq(position, endIndex) === true ? $.$$add(startIndex, 1) : endIndex;
  }
  return result;
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  if (typeof other === "string")
    return $.$$eq($.CONSTANT1.indexOf$2(receiver, other, startIndex), -1) !== true;
  else if (typeof other === "object" && other !== null && !!other.$isJSSyntaxRegExp)
    return other.hasMatch$1($.CONSTANT1.substring$1(receiver, startIndex));
  else
    return $.iterator($.allMatches(other, $.CONSTANT1.substring$1(receiver, startIndex))).moveNext$0();
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i;
  $.checkString(to);
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.JsStringBuffer$("");
      $length = receiver.length;
      result.add$1(to);
      for (i = 0; i < $length; ++i) {
        if (i >= receiver.length)
          throw $.ioore(i);
        result.add$1(receiver[i]);
        result.add$1(to);
      }
      return result.toString$0();
    }
  else
    return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), true, false), true), to);
};

$.JsStringBuffer$ = function($content) {
  var t1 = $content;
  return new $.JsStringBuffer(t1);
};

$.AsyncError$ = function(error, stackTrace) {
  return new $.AsyncError(error, stackTrace, null);
};

$.AsyncError$withCause = function(error, stackTrace, cause) {
  return new $.AsyncError(error, stackTrace, cause);
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, completer, values, i, i0;
  t1 = {};
  t2 = $.getInterceptor$JSArrayJSString(futures);
  if (t2.get$isEmpty(futures) === true)
    return $._FutureImpl$immediate($.CONSTANT14);
  completer = $._CompleterImpl$();
  t1.remaining_0 = t2.get$length(futures);
  values = $.List_List$fixedLength(t2.get$length(futures), null);
  t1.completed_1 = false;
  for (t2 = t2.get$iterator(futures), i = 0; t2.moveNext$0() === true; i = i0) {
    i0 = i + 1;
    t2.get$current().then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, completer, values, i)).catchError$1(new $._FutureImpl__FutureImpl$wait_anon0(t1, completer));
  }
  return completer.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  error.throwDelayed$0();
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace, cause) {
  if (typeof error === "object" && error !== null && !!error.$isAsyncError)
    return error;
  if (cause == null)
    return $.AsyncError$(error, stackTrace);
  return $.AsyncError$withCause(error, stackTrace, cause);
};

$._runUserCode = function(userCode, onSuccess, onError, cause) {
  var result, e, e0, s, exception, t1;
  result = null;
  try {
    result = userCode.call$0();
  } catch (exception) {
    t1 = $.unwrapException(exception);
    if (typeof t1 === "object" && t1 !== null && !!t1.$isAsyncError) {
      e = t1;
      return onError.call$1(e);
    } else {
      e0 = t1;
      s = $.getTraceFromException(exception);
      if (cause == null)
        onError.call$1($.AsyncError$(e0, s));
      else
        onError.call$1($.AsyncError$withCause(e0, s, cause));
    }
  }

  onSuccess.call$1(result);
};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _unsubscribeOnError) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _unsubscribeOnError, null, onData, onError, onDone);
  t1._BaseStreamSubscription$3(onData, onError, onDone);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _unsubscribeOnError);
  return t1;
};

$._WhereStream$ = function(source, test) {
  return new $._WhereStream(test, source);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.$isJavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.$indexSet(dst, j, src[i]);
    }
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= src.length)
        throw $.ioore(i);
      $.CONSTANT0.$indexSet(dst, j, src[i]);
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.IterableMixinWorkaround_contains = function(iterable, element) {
  var t1, t2;
  for (t1 = $.iterator(iterable), t2 = $.getInterceptor(element); t1.moveNext$0() === true;)
    if (t2.$eq(element, t1.get$current()) === true)
      return true;
  return false;
};

$.IterableMixinWorkaround_removeAll = function(collection, elementsToRemove) {
  var t1, t2;
  for (t1 = $.iterator(elementsToRemove), t2 = $.getInterceptor$JSArray(collection); t1.moveNext$0() === true;)
    t2.remove$1(collection, t1.get$current());
};

$.IterableMixinWorkaround_removeAllList = function(collection, elementsToRemove) {
  $.removeMatching(collection, $.contains0(typeof elementsToRemove === "object" && elementsToRemove !== null && !!elementsToRemove.$isSet ? elementsToRemove : $.toSet(elementsToRemove)));
};

$.IterableMixinWorkaround_removeMatching = function(collection, test) {
  var elementsToRemove, t1, t2, t3;
  elementsToRemove = [];
  for (t1 = $.getInterceptor$JSArray(collection), t2 = t1.get$iterator(collection); t2.moveNext$0() === true;) {
    t3 = t2.get$current();
    if (test.call$1(t3) === true)
      elementsToRemove.push(t3);
  }
  t1.removeAll$1(collection, elementsToRemove);
};

$.IterableMixinWorkaround_removeMatchingList = function(list, test) {
  var retained, $length, i, element, t1, t2, t3;
  if (typeof list !== "object" || list === null || (list.constructor !== Array || !!list.immutable$list) && !list.$isJavaScriptIndexingBehavior())
    return $.IterableMixinWorkaround_removeMatchingList$bailout(1, list, test);
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  t1 = retained.length;
  if (t1 === $length)
    return;
  for (t2 = list.length, i = 0; i < t1; ++i) {
    t3 = retained[i];
    if (i >= t2)
      throw $.ioore(i);
    list[i] = t3;
  }
  $.CONSTANT0.set$length(list, t1);
};

$.IterableMixinWorkaround_removeMatchingList$bailout = function(state0, list, test) {
  var retained, $length, i, element, t1;
  retained = [];
  $length = list.length;
  for (i = 0; i < $length; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    element = list[i];
    if (test.call$1(element) !== true)
      retained.push(element);
    if ($length !== list.length)
      throw $.$$throw($.ConcurrentModificationError$(list));
  }
  if (retained.length === $length)
    return;
  for (i = 0; t1 = retained.length, i < t1; ++i)
    $.CONSTANT0.$indexSet(list, i, retained[i]);
  $.CONSTANT0.set$length(list, t1);
};

$.IterableMixinWorkaround_joinList = function(list, separator) {
  var t1, buffer, i;
  if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !list.$isJavaScriptIndexingBehavior()))
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if (typeof separator !== "string")
    return $.IterableMixinWorkaround_joinList$bailout(1, list, separator);
  if ($.isEmpty(list) === true)
    return "";
  t1 = list.length;
  if (t1 === 1) {
    if (0 >= t1)
      throw $.ioore(0);
    return $.S(list[0]);
  }
  buffer = $.JsStringBuffer$("");
  if (separator === "")
    for (i = 0; i < list.length; ++i)
      buffer.add$1($.S(list[i]));
  else {
    if (0 >= list.length)
      throw $.ioore(0);
    buffer.add$1($.S(list[0]));
    for (i = 1; i < list.length; ++i) {
      buffer.add$1(separator);
      if (i >= list.length)
        throw $.ioore(i);
      buffer.add$1($.S(list[i]));
    }
  }
  return buffer.toString$0();
};

$.IterableMixinWorkaround_joinList$bailout = function(state0, list, separator) {
  var t1, buffer, i;
  t1 = $.getInterceptor$JSArrayJSString(list);
  if (t1.get$isEmpty(list) === true)
    return "";
  if ($.$$eq(t1.get$length(list), 1) === true)
    return $.S(t1.$index(list, 0));
  buffer = $.JsStringBuffer$("");
  if (separator == null || $.$$eq(separator, "") === true)
    for (i = 0; $.CONSTANT5.$lt(i, t1.get$length(list)); ++i)
      buffer.add$1($.S(t1.$index(list, i)));
  else {
    buffer.add$1($.S(t1.$index(list, 0)));
    for (i = 1; $.CONSTANT5.$lt(i, t1.get$length(list)); ++i) {
      buffer.add$1(separator);
      buffer.add$1($.S(t1.$index(list, i)));
    }
  }
  return buffer.toString$0();
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.CONSTANT5.$tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, $length) {
  return $.$$and($.$$add(currentProbe, numberOfProbes), $.$$sub($length, 1));
};

$._HashMapImplKeyIterable$ = function(_map) {
  return new $._HashMapImplKeyIterable(_map);
};

$._HashMapImplValueIterable$ = function(_map) {
  return new $._HashMapImplValueIterable(_map);
};

$._HashMapImplKeyIterator$ = function(map) {
  return new $._HashMapImplKeyIterator(map, -1, null);
};

$._HashMapImplValueIterator$ = function(map) {
  return new $._HashMapImplValueIterator(map, -1, null);
};

$._HashMapImplIndexIterator$ = function(map) {
  return new $._HashMapImplIndexIterator(map, -1, null);
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$._DoubleLinkedQueueIterator$ = function(sentinel) {
  return new $._DoubleLinkedQueueIterator(sentinel, sentinel, null);
};

$.HashSet$ = function() {
  return new $.HashSet($._HashMapImpl$());
};

$.HashSet_HashSet$from = function(other) {
  var set, t1;
  set = $.HashSet$();
  for (t1 = $.iterator(other); t1.moveNext$0() === true;)
    set.add$1(t1.get$current());
  return set;
};

$._HashSetIterator$ = function(set) {
  return new $._HashSetIterator($.CONSTANT0.get$iterator(set._backingMap._keys));
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString(object);
  if (typeof object === "string")
    return "\"" + $.S($.replaceAll($.replaceAll($.replaceAll($.CONSTANT1.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"")) + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$ = function(message) {
  return new $.RangeError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.IllegalJSRegExpException$ = function(pattern, errmsg) {
  return new $.IllegalJSRegExpException("Illegal pattern: " + $.S(pattern) + ", " + errmsg);
};

$.int_parse = function(source, onError, radix) {
  return $.Primitives_parseInt(source, radix, onError);
};

$.List_List = function($length) {
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  return new Array($length);
};

$.List_List$fixedLength = function($length, fill) {
  var result, t1, i;
  if (!(typeof $length === "number" && Math.floor($length) === $length) || $length < 0)
    throw $.$$throw($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = $.Primitives_newFixedList($length);
  if (typeof result !== "object" || result === null || (result.constructor !== Array || !!result.immutable$list) && !result.$isJavaScriptIndexingBehavior())
    return $.List_List$fixedLength$bailout(1, $length, fill, result);
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = result.length, i = 0; i < t1; ++i)
      result[i] = fill;
  return result;
};

$.List_List$fixedLength$bailout = function(state0, $length, fill, result) {
  var t1, i;
  if ($.$$eq($length, 0) !== true && !(fill == null))
    for (t1 = $.getInterceptor$JSArrayJSString(result), i = 0; $.CONSTANT5.$lt(i, t1.get$length(result)); ++i)
      t1.$indexSet(result, i, fill);
  return result;
};

$.List_List$from = function(other) {
  var list, t1;
  list = $.List_List(0);
  for (t1 = $.iterator(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  return list;
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$.RegExp_RegExp = function(pattern, caseSensitive, multiLine) {
  return $.JSSyntaxRegExp$(pattern, caseSensitive, multiLine);
};

$.Strings_join = function(strings, separator) {
  $.checkNull(strings);
  return $.Strings__toJsStringArray(strings).join(separator);
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$.query = function(selector) {
  return document.query$1(selector);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.DivElement_DivElement = function() {
  return document.$$dom_createElement$1("div");
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, -1, null);
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$.Element_Element$tag = function(tag) {
  return $._ElementFactoryProvider_createElement_tag(tag);
};

$._ElementFactoryProvider_createElement_tag = function(tag) {
  return document.createElement(tag);
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.WindowEvents$ = function(_ptr) {
  return new $.WindowEvents(_ptr);
};

$._HTMLFrameSetElementEvents$ = function(_ptr) {
  return new $._HTMLFrameSetElementEvents(_ptr);
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._EventStream$ = function(_target, _eventType, _useCapture) {
  return new $._EventStream(_target, _eventType, _useCapture);
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$._convertNativeToDart_Window = function(win) {
  return $._DOMWindowCrossFrame__createSafe(win);
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, $.length(array), -1, null);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== "number")
    return $.Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.$$eq(a[i], element) === true)
      return i;
  }
  return -1;
};

$.Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var t1, t2, i;
  t1 = $.getInterceptor$JSArrayJSString(a);
  t2 = $.getInterceptor$JSNumber(startIndex);
  if (t2.$ge(startIndex, t1.get$length(a)) === true)
    return -1;
  if (t2.$lt(startIndex, 0) === true)
    startIndex = 0;
  for (i = startIndex; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, endIndex) === true; i = t2.$add(i, 1))
    if ($.$$eq(t1.$index(a, i), element) === true)
      return i;
  return -1;
};

$.Lists_getRange = function(a, start, $length, accumulator) {
  var end, i;
  if (typeof a !== "string" && (typeof a !== "object" || a === null || a.constructor !== Array && !a.$isJavaScriptIndexingBehavior()))
    return $.Lists_getRange$bailout(1, a, start, $length, accumulator);
  if (typeof start !== "number")
    return $.Lists_getRange$bailout(1, a, start, $length, accumulator);
  if ($.$$lt($length, 0) === true)
    throw $.$$throw($.ArgumentError$("length"));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof $length !== "number")
    throw $.iae($length);
  end = start + $length;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, $length, accumulator) {
  var t1, end, i, t2;
  if ($.$$lt($length, 0) === true)
    throw $.$$throw($.ArgumentError$("length"));
  t1 = $.getInterceptor$JSNumber(start);
  if (t1.$lt(start, 0) === true)
    throw $.$$throw($.RangeError$value(start));
  end = t1.$add(start, $length);
  t1 = $.getInterceptor$JSArrayJSString(a);
  if ($.$$gt(end, t1.get$length(a)) === true)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; t2 = $.getInterceptor$JSNumber(i), t2.$lt(i, end) === true; i = t2.$add(i, 1))
    accumulator.push(t1.$index(a, i));
  return accumulator;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.max = function(a, b) {
  if (typeof a === "number") {
    if (typeof b === "number") {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === "number") {
        if (typeof a === "number")
          if (a === 0)
            return a + b;
        if ($.CONSTANT8.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.CONSTANT4.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.main = function() {
  $.SpawnIDE$();
};

$.EditorPanel$ = function(elementContent, dockManager, title) {
  var t1 = new $.EditorPanel(null, null, null, elementContent, null, dockManager, null, null, null, null, null, null, "panel", title, "icon-circle-arrow-right", null, null, 0, 0);
  t1.PanelContainer$3(elementContent, dockManager, title);
  t1.EditorPanel$3(elementContent, dockManager, title);
  return t1;
};

$.SpawnIDE$ = function() {
  var t1 = new $.SpawnIDE(null, null);
  t1.SpawnIDE$0();
  return t1;
};

$.IdeException$ = function(message) {
  return new $.IdeException(message);
};

$.DocumentManagerContainer$ = function(dockManager) {
  var t1 = new $.DocumentManagerContainer("fill", null, dockManager, null, 1, null);
  t1.FillDockContainer$2(dockManager, 0);
  t1.DocumentManagerContainer$1(dockManager);
  return t1;
};

$.DocumentTabPage$ = function(_host, _container) {
  var t1 = new $.DocumentTabPage(null, _host, null, _container, null, false);
  t1.TabPage$2(_host, _container);
  t1.DocumentTabPage$2(_host, _container);
  return t1;
};

$.FillDockContainer$ = function(dockManager, tabStripDirection) {
  var t1 = new $.FillDockContainer("fill", null, dockManager, null, 1, null);
  t1.FillDockContainer$2(dockManager, tabStripDirection);
  return t1;
};

$.HorizontalDockContainer$ = function(dockManager, childContainers) {
  var t1, t2;
  t1 = $.getNextId("horizontal_splitter_");
  t2 = new $.HorizontalDockContainer(t1, dockManager, null, null, null, null);
  t2.SplitterDockContainer$3(t1, dockManager, childContainers);
  t2.HorizontalDockContainer$2(dockManager, childContainers);
  return t2;
};

$.PanelContainer$ = function(elementContent, dockManager, title) {
  var t1 = new $.PanelContainer(elementContent, null, dockManager, null, null, null, null, null, null, "panel", title, "icon-circle-arrow-right", null, null, 0, 0);
  t1.PanelContainer$3(elementContent, dockManager, title);
  return t1;
};

$.VerticalDockContainer$ = function(dockManager, childContainers) {
  var t1, t2;
  t1 = $.getNextId("vertical_splitter_");
  t2 = new $.VerticalDockContainer(t1, dockManager, null, null, null, null);
  t2.SplitterDockContainer$3(t1, dockManager, childContainers);
  t2.VerticalDockContainer$2(dockManager, childContainers);
  return t2;
};

$.DraggableContainer$ = function(dialog, delegate, topLevelElement, dragHandle) {
  var t1 = new $.DraggableContainer(null, delegate, topLevelElement, dragHandle, dialog, null, null, null, null, null, null);
  t1.DraggableContainer$4(dialog, delegate, topLevelElement, dragHandle);
  return t1;
};

$.ResizableContainer$ = function(dialog, delegate, topLevelElement) {
  var t1 = new $.ResizableContainer(null, delegate, topLevelElement, dialog, null, null, null, true);
  t1.ResizableContainer$3(dialog, delegate, topLevelElement);
  return t1;
};

$.ResizeHandle$ = function() {
  return new $.ResizeHandle(6, 12, null, null, null, null, null, null, null, false, false, false, false, false);
};

$.Dialog$ = function(panel, dockManager) {
  var t1 = new $.Dialog(null, panel, null, null, null, dockManager, null);
  t1.Dialog$2(panel, dockManager);
  return t1;
};

$.DockException$ = function(message) {
  return new $.DockException(message);
};

$.DockLayoutEngine$ = function(dockManager) {
  return new $.DockLayoutEngine(dockManager);
};

$.DockManager$ = function(element) {
  var t1 = new $.DockManager(null, null, null, element, null, null);
  t1.DockManager$1(element);
  return t1;
};

$.DockManagerContext$ = function(dockManager) {
  var t1 = new $.DockManagerContext(null, dockManager, null);
  t1.DockManagerContext$1(dockManager);
  return t1;
};

$.DockModel$ = function() {
  return new $.DockModel(null, null);
};

$.DockNode$ = function(container) {
  var t1 = new $.DockNode(container, null, null);
  t1.DockNode$1(container);
  return t1;
};

$.DockWheel$ = function(dockManager) {
  var t1 = new $.DockWheel(dockManager, null, null, null, null, null, false, null);
  t1.DockWheel$1(dockManager);
  return t1;
};

$.DockWheelItem$ = function(wheel, id) {
  var t1 = new $.DockWheelItem(id, null, wheel, null, null, false);
  t1.DockWheelItem$2(wheel, id);
  return t1;
};

$.SplitterBar$ = function(previousContainer, nextContainer, stackedVertical) {
  var t1 = new $.SplitterBar(previousContainer, nextContainer, null, stackedVertical, null, null, null, null, 50, null, null, true);
  t1.SplitterBar$3(previousContainer, nextContainer, stackedVertical);
  return t1;
};

$.SplitterPanel$ = function(childContainers, stackedVertical) {
  var t1 = new $.SplitterPanel(null, childContainers, null, stackedVertical);
  t1.SplitterPanel$2(childContainers, stackedVertical);
  return t1;
};

$.TabHandle$ = function($parent) {
  var t1 = new $.TabHandle(null, null, null, null, $parent, null, null, null);
  t1.TabHandle$1($parent);
  return t1;
};

$.TabHost$ = function(tabStripDirection, displayCloseButton) {
  var t1 = new $.TabHost(null, null, null, null, null, null, null, null, displayCloseButton);
  t1.TabHost$2(tabStripDirection, displayCloseButton);
  return t1;
};

$.TabPage$ = function(host, container) {
  var t1 = new $.TabPage(host, null, container, null, false);
  t1.TabPage$2(host, container);
  return t1;
};

$.BoundingBox$ = function() {
  var t1 = new $.BoundingBox(null, null);
  t1.BoundingBox$0();
  return t1;
};

$.getNextId = function(prefix) {
  var t1, t2;
  t1 = prefix;
  t2 = $.dockIdCounter;
  $.dockIdCounter = $.$$add(t2, 1);
  return t1 + $.S(t2);
};

$.getPixels = function(pixels) {
  if (pixels == null)
    return 0;
  return $.int_parse($.replaceAll(pixels, "px", ""), null, null);
};

$.isPointInsideNode = function(px, py, node) {
  var element, x, y, width, height, t1;
  element = node.get$container().get$containerElement();
  x = element.get$offsetLeft();
  y = element.get$offsetTop();
  width = element.get$clientWidth();
  height = element.get$clientHeight();
  t1 = $.getInterceptor$JSNumber(px);
  if (t1.$ge(px, x) === true)
    if (t1.$le(px, $.$$add(x, width)) === true) {
      t1 = $.getInterceptor$JSNumber(py);
      t1 = t1.$ge(py, y) === true && t1.$le(py, $.$$add(y, height)) === true;
    } else
      t1 = false;
  else
    t1 = false;
  return t1;
};

$.Rectangle$ = function() {
  return new $.Rectangle(null, null, null, null);
};

$.Point2$ = function(x, y) {
  return new $.Point2(x, y);
};

$.Size$ = function(width, height) {
  return new $.Size(width, height);
};

$.UndockInitiator$ = function(element, listener, thresholdPixels) {
  return new $.UndockInitiator(element, listener, thresholdPixels, null, null, null, null, false);
};

$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.Primitives__throwFormatException.call$1 = $.Primitives__throwFormatException;
$.Primitives__throwFormatException.$name = "Primitives__throwFormatException";
$.$$throw.call$1 = $.$$throw;
$.$$throw.$name = "$$throw";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
Isolate.$finishClasses($$);
$$ = {};
$._ManagerStub = {builtin$cls: '_ManagerStub'};
$.List = {builtin$cls: 'List'};
$.Element = {builtin$cls: 'Element'};
$.Match = {builtin$cls: 'Match'};
$.Node = {builtin$cls: 'Node'};
$.String = {builtin$cls: 'String'};
$.LayoutEventListener = {builtin$cls: 'LayoutEventListener'};
$.IDockContainer = {builtin$cls: 'IDockContainer'};
$.ReceivePort = {builtin$cls: 'ReceivePort'};
$.Set = {builtin$cls: 'Set'};
$.bool = {builtin$cls: 'bool'};
$.$int = {builtin$cls: '$int'};
$.CONSTANT2 = new Isolate.$isolateProperties.JSNull();
$.CONSTANT0 = new Isolate.$isolateProperties.JSArray();
$.CONSTANT4 = new Isolate.$isolateProperties.JSNumber();
$.CONSTANT5 = new Isolate.$isolateProperties.JSInt();
$.CONSTANT8 = new Isolate.$isolateProperties.JSDouble();
$.CONSTANT = new Isolate.$isolateProperties.NullThrownError();
$.CONSTANT1 = new Isolate.$isolateProperties.JSString();
$.CONSTANT13 = new Isolate.$isolateProperties.Object();
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CONSTANT14 = Isolate.makeConstantList([]);
$.CONSTANT6 = new Isolate.$isolateProperties.EventStreamProvider("click");
$.CONSTANT3 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CONSTANT12 = new Isolate.$isolateProperties.EventStreamProvider("mouseover");
$.CONSTANT7 = new Isolate.$isolateProperties.EventStreamProvider("mousedown");
$.CONSTANT9 = new Isolate.$isolateProperties.EventStreamProvider("mousemove");
$.CONSTANT10 = new Isolate.$isolateProperties.EventStreamProvider("mouseup");
$.CONSTANT11 = new Isolate.$isolateProperties.EventStreamProvider("mouseout");
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.Dialog_zIndexCounter = 1000;
$.TabHandle_zIndexCounter = 1000;
$.dockIdCounter = 0;
$.$$and = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$and(receiver, a0);
};
$.$$mul = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$mul(receiver, a0);
};
$.$$add = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$add(receiver, a0);
};
$.$$sub = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$sub(receiver, a0);
};
$.$$div = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$div(receiver, a0);
};
$.$$lt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$lt(receiver, a0);
};
$.$$shl = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$shl(receiver, a0);
};
$.$$le = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$le(receiver, a0);
};
$.$$eq = function(receiver, a0) {
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$$gt = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$gt(receiver, a0);
};
$.$$ge = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$ge(receiver, a0);
};
$.add = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).add$1(receiver, a0);
};
$.addAll = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addAll$1(receiver, a0);
};
$.addLast = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).addLast$1(receiver, a0);
};
$.allMatches = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).allMatches$1(receiver, a0);
};
$.clear = function(receiver) {
  return $.getInterceptor$JSArray(receiver).clear$0(receiver);
};
$.contains0 = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$contains(receiver);
};
$.contains = function(receiver, a0) {
  return $.getInterceptor$JSArrayJSString(receiver).contains$1(receiver, a0);
};
$.endsWith = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).endsWith$1(receiver, a0);
};
$.forEach = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).forEach$1(receiver, a0);
};
$.getRange = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).getRange$2(receiver, a0, a1);
};
$.hashCode = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.indexOf0 = function(receiver, a0) {
  return $.getInterceptor$JSArrayJSString(receiver).indexOf$1(receiver, a0);
};
$.indexOf = function(receiver, a0, a1) {
  return $.getInterceptor$JSArrayJSString(receiver).indexOf$2(receiver, a0, a1);
};
$.isEmpty = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$isEmpty(receiver);
};
$.iterator = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$iterator(receiver);
};
$.join = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).join$1(receiver, a0);
};
$.last = function(receiver) {
  return $.getInterceptor$JSArray(receiver).get$last(receiver);
};
$.length = function(receiver) {
  return $.getInterceptor$JSArrayJSString(receiver).get$length(receiver);
};
$.remove = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).remove$1(receiver, a0);
};
$.removeAll = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).removeAll$1(receiver, a0);
};
$.removeMatching = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).removeMatching$1(receiver, a0);
};
$.removeRange = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).removeRange$2(receiver, a0, a1);
};
$.replaceAll = function(receiver, a0, a1) {
  return $.getInterceptor$JSString(receiver).replaceAll$2(receiver, a0, a1);
};
$.split = function(receiver, a0) {
  return $.getInterceptor$JSString(receiver).split$1(receiver, a0);
};
$.toInt = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).toInt$0(receiver);
};
$.toList = function(receiver) {
  return $.getInterceptor$JSArray(receiver).toList$0(receiver);
};
$.toLowerCase = function(receiver) {
  return $.getInterceptor$JSString(receiver).toLowerCase$0(receiver);
};
$.toSet = function(receiver) {
  return $.getInterceptor$JSArray(receiver).toSet$0(receiver);
};
$.toString = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim = function(receiver) {
  return $.getInterceptor$JSString(receiver).trim$0(receiver);
};
$.where = function(receiver, a0) {
  return $.getInterceptor$JSArray(receiver).where$1(receiver, a0);
};
$.$$index = function(receiver, a0) {
  return $.getInterceptor$JSArrayJSString(receiver).$index(receiver, a0);
};
$.$$indexSet = function(receiver, a0, a1) {
  return $.getInterceptor$JSArray(receiver).$indexSet(receiver, a0, a1);
};
$.$$xor = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$xor(receiver, a0);
};
$.$$negate = function(receiver) {
  return $.getInterceptor$JSNumber(receiver).$negate(receiver);
};
$.$$or = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$or(receiver, a0);
};
$.$$tdiv = function(receiver, a0) {
  return $.getInterceptor$JSNumber(receiver).$tdiv(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArray = function(receiver) {
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSArrayJSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSNumber = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
$.getInterceptor$JSString = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return void 0;
  return $.ObjectInterceptor.prototype;
};
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== (void 0);
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "quoteRegExp", "quoteRegExp", "get$quoteRegExp", function() {
  return $.JSSyntaxRegExp$("[-[\\]{}()*+?.,\\\\^$|#\\s]", true, false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''];
  var fields_array = fields ? fields.split(',') : [];
  for (var i = 0; i < fields_array.length; i++) {
    $.$generateAccessor(fields_array[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method) {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table)
    $.defineProperty(Object.prototype, key, table[key]);
})({
  $isJavaScriptIndexingBehavior: function() {
    return false;
  },
  $isCollection: function() {
    return false;
  },
  $isList: function() {
    return false;
  },
  $isMap: function() {
    return false;
  },
  $isDivElement: function() {
    return false;
  },
  $isElement: function() {
    return false;
  },
  $isNode: function() {
    return false;
  },
  toString$0: function() {
    return $.toStringForNativeObject(this);
  },
  get$hashCode: function() {
    return $.hashCodeForNativeObject(this);
  },
  $eq: function(a) {
    return this === a;
  }
});

$.$defineNativeClass("Worker", {
  get$id: function() {
    return this.id;
  },
  set$id: function(i) {
    this.id = i;
  },
  set$onmessage: function(f) {
    this.onmessage = f;
  },
  postMessage$1: function(msg) {
    this.postMessage(msg);
  },
  terminate$0: function() {
    this.terminate();
  }
});

$.$defineNativeClass("HTMLAnchorElement", {"": "host>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLAreaElement", {"": "host>"});

$.$defineNativeClass("HTMLBodyElement", {
  get$on: function() {
    return $.BodyElementEvents$(this);
  }
});

$.$defineNativeClass("HTMLButtonElement", {"": "value="});

$.$defineNativeClass("HTMLCanvasElement", {"": "height=,width="});

$.$defineNativeClass("CharacterData", {"": "length>"});

$.$defineNativeClass("CSSStyleDeclaration", {"": "length>",
  _getPropertyValue$1: function(propertyName) {
    return this.getPropertyValue(propertyName);
  },
  getPropertyValue$1: function(propertyName) {
    var propValue = this._getPropertyValue$1(propertyName);
    return !(propValue == null) ? propValue : "";
  },
  setProperty$3: function(propertyName, value, priority) {
    this.setProperty(propertyName, value, priority);
    if (!!this.setAttribute)
      this.setAttribute(propertyName, value);
  },
  get$clear: function() {
    return this.getPropertyValue$1("clear");
  },
  clear$0: function() {
    return this.get$clear().call$0();
  },
  set$display: function(value) {
    this.setProperty$3("display", value, "");
  },
  get$height: function() {
    return this.getPropertyValue$1("height");
  },
  set$height: function(value) {
    this.setProperty$3("height", value, "");
  },
  set$left: function(value) {
    this.setProperty$3("left", value, "");
  },
  get$marginLeft: function() {
    return this.getPropertyValue$1("margin-left");
  },
  set$marginLeft: function(value) {
    this.setProperty$3("margin-left", value, "");
  },
  get$marginTop: function() {
    return this.getPropertyValue$1("margin-top");
  },
  set$marginTop: function(value) {
    this.setProperty$3("margin-top", value, "");
  },
  get$resize: function() {
    return this.getPropertyValue$1("resize");
  },
  resize$2: function(arg0, arg1) {
    return this.get$resize().call$2(arg0, arg1);
  },
  set$top: function(value) {
    this.setProperty$3("top", value, "");
  },
  get$width: function() {
    return this.getPropertyValue$1("width");
  },
  set$width: function(value) {
    this.setProperty$3("width", value, "");
  },
  set$zIndex: function(value) {
    this.setProperty$3("z-index", value, "");
  }
});

$.$defineNativeClass("HTMLDivElement", {
  $isDivElement: function() {
    return true;
  }
});

$.$defineNativeClass("Document", {"": "$$dom_body:body~",
  get$on: function() {
    return $.DocumentEvents$(this);
  },
  $$dom_createElement$1: function(tagName) {
    return this.createElement(tagName);
  },
  $$dom_getElementById$1: function(elementId) {
    return this.getElementById(elementId);
  },
  $$dom_querySelector$1: function(selectors) {
    return this.querySelector(selectors);
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT7.forTarget$1(this);
  },
  onMouseDown$1: function(arg0) {
    return this.get$onMouseDown().call$1(arg0);
  },
  onMouseDown$2: function(arg0, arg1) {
    return this.get$onMouseDown().call$2(arg0, arg1);
  },
  get$onMouseOut: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  onMouseOut$2: function(arg0, arg1) {
    return this.get$onMouseOut().call$2(arg0, arg1);
  },
  get$onMouseOver: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  onMouseOver$2: function(arg0, arg1) {
    return this.get$onMouseOver().call$2(arg0, arg1);
  },
  get$onMouseUp: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  onMouseUp$2: function(arg0, arg1) {
    return this.get$onMouseUp().call$2(arg0, arg1);
  },
  query$1: function(selectors) {
    if ($.RegExp_RegExp("^#[_a-zA-Z]\\w*$", true, false).hasMatch$1(selectors) === true)
      return this.$$dom_getElementById$1($.CONSTANT1.substring$1(selectors, 1));
    return this.$$dom_querySelector$1(selectors);
  }
});

$.$defineNativeClass("DocumentFragment", {
  get$children: function() {
    if (this._children == null)
      this._children = $.FilteredElementList$(this);
    return this._children;
  },
  get$innerHtml: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$innerHtml")) {
      var e = $.Element_Element$tag("div");
      $.add(e.get$nodes(), this.clone$1(true));
      return e.get$innerHtml();
    } else
      return Object.prototype.get$innerHtml.call(this);
  },
  set$innerHtml: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$innerHtml")) {
      var e, nodes;
      $.clear(this.get$nodes());
      e = $.Element_Element$tag("div");
      e.set$innerHtml(value);
      nodes = $.List_List$from(e.get$nodes());
      $.addAll(this.get$nodes(), nodes);
    } else
      return Object.prototype.set$innerHtml.call(this, value);
  },
  get$on: function() {
    return $.ElementEvents$(this);
  }
});

$.$defineNativeClass("DOMException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("Element", {"": "$$dom_children:children~,id>,innerHtml:innerHTML},$$dom_className:className},clientHeight>,clientWidth>,$$dom_lastElementChild:lastElementChild~,offsetLeft>,offsetTop>,style>",
  get$attributes: function() {
    return $._ElementAttributeMap$(this);
  },
  get$children: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$children")) {
      return $._ChildrenElementList$_wrap(this);
    } else
      return Object.prototype.get$children.call(this);
  },
  set$children: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("set$children")) {
      var copy, children, t1;
      copy = $.List_List$from(value);
      children = this.get$children();
      t1 = $.getInterceptor$JSArray(children);
      t1.clear$0(children);
      t1.addAll$1(children, copy);
    } else
      return Object.prototype.set$children.call(this, value);
  },
  get$classes: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$classes")) {
      return $._ElementCssClassSet$(this);
    } else
      return Object.prototype.get$classes.call(this);
  },
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.ElementEvents$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_getAttribute$1: function($name) {
    return this.getAttribute($name);
  },
  $$dom_hasAttribute$1: function($name) {
    return this.hasAttribute($name);
  },
  $$dom_removeAttribute$1: function($name) {
    return this.removeAttribute($name);
  },
  $$dom_setAttribute$2: function($name, value) {
    return this.setAttribute($name,value);
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT7.forTarget$1(this);
  },
  onMouseDown$1: function(arg0) {
    return this.get$onMouseDown().call$1(arg0);
  },
  onMouseDown$2: function(arg0, arg1) {
    return this.get$onMouseDown().call$2(arg0, arg1);
  },
  get$onMouseOut: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  onMouseOut$2: function(arg0, arg1) {
    return this.get$onMouseOut().call$2(arg0, arg1);
  },
  get$onMouseOver: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  onMouseOver$2: function(arg0, arg1) {
    return this.get$onMouseOver().call$2(arg0, arg1);
  },
  get$onMouseUp: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  onMouseUp$2: function(arg0, arg1) {
    return this.get$onMouseUp().call$2(arg0, arg1);
  },
  $isElement: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLEmbedElement", {"": "height=,width="});

$.$defineNativeClass("EventException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("EventTarget", {
  get$on: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$on")) {
      return $.Events$(this);
    } else
      return Object.prototype.get$on.call(this);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_addEventListener$3")) {
      return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$$dom_removeEventListener$3")) {
      return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
    } else
      return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }
});

$.$defineNativeClass("FileException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFormElement", {"": "length>",
  reset$0: function() {
    return this.reset();
  }
});

$.$defineNativeClass("HTMLCollection", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    var t1 = this.get$length();
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if ($.$$gt(this.get$length(), 0) === true)
      return this.$index($.$$sub(this.get$length(), 1));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLDocument", {
  get$body: function() {
    return $.document().get$$$dom_body();
  }
});

$.$defineNativeClass("XMLHttpRequestException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLIFrameElement", {"": "height=,width="});

$.$defineNativeClass("HTMLImageElement", {"": "height=,width=,x>,y>",
  complete$1: function(arg0) {
    return this.complete.call$1(arg0);
  }
});

$.$defineNativeClass("HTMLInputElement", {"": "height=,pattern>,value=,width=",
  get$on: function() {
    return $.InputElementEvents$(this);
  },
  $isElement: function() {
    return true;
  },
  $isNode: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLLIElement", {"": "value="});

$.$defineNativeClass("Location", {"": "host>",
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLMediaElement", {"": "error>",
  get$on: function() {
    return $.MediaElementEvents$(this);
  }
});

$.$defineNativeClass("MessageEvent", {"": "ports>"});

$.$defineNativeClass("HTMLMeterElement", {"": "value="});

$.$defineNativeClass("MouseEvent", {"": "x>,y>"});

$.$defineNativeClass("NamedNodeMap", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    var t1 = this.get$length();
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if ($.$$gt(this.get$length(), 0) === true)
      return this.$index($.$$sub(this.get$length(), 1));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Node", {"": "$$dom_attributes:attributes~,$$dom_childNodes:childNodes~,$$dom_localName:localName~,$$dom_namespaceUri:namespaceURI~,parent:parentElement~",
  get$nodes: function() {
    return $._ChildNodeListLazy$(this);
  },
  remove$0: function() {
    var t1 = this.parentNode;
    if (!(t1 == null))
      t1.$$dom_removeChild$1(this);
  },
  replaceWith$1: function(otherNode) {
    var $parent, exception;
    try {
      $parent = this.parentNode;
      $parent.$$dom_replaceChild$2(otherNode, this);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return this;
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_appendChild$1: function(newChild) {
    return this.appendChild(newChild);
  },
  clone$1: function(deep) {
    if (Object.getPrototypeOf(this).hasOwnProperty("clone$1")) {
      return this.cloneNode(deep);
    } else
      return Object.prototype.clone$1.call(this, deep);
  },
  contains$1: function(other) {
    return this.contains(other);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  $$dom_removeChild$1: function(oldChild) {
    return this.removeChild(oldChild);
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  $$dom_replaceChild$2: function(newChild, oldChild) {
    return this.replaceChild(newChild,oldChild);
  },
  $isNode: function() {
    return true;
  }
});

$.$defineNativeClass("NodeList", {
  get$length: function() {
    return this.length;
  },
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    throw $.$$throw($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    var t1 = this.get$length();
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if ($.$$gt(this.get$length(), 0) === true)
      return this.$index($.$$sub(this.get$length(), 1));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLObjectElement", {"": "height=,width="});

$.$defineNativeClass("HTMLOptionElement", {"": "value="});

$.$defineNativeClass("HTMLOutputElement", {"": "value="});

$.$defineNativeClass("HTMLParamElement", {"": "value="});

$.$defineNativeClass("HTMLProgressElement", {"": "value="});

$.$defineNativeClass("RadioNodeList", {"": "value="});

$.$defineNativeClass("RangeException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLSelectElement", {"": "length>,value="});

$.$defineNativeClass("ShadowRoot", {"": "innerHtml:innerHTML}",
  clone$1: function(deep) {
    return this.cloneNode(deep);
  }
});

$.$defineNativeClass("SpeechRecognitionError", {"": "error>"});

$.$defineNativeClass("Storage", {
  containsKey$1: function(key) {
    return !(this.$$dom_getItem$1(key) == null);
  },
  $index: function(key) {
    return this.$$dom_getItem$1(key);
  },
  $indexSet: function(key, value) {
    this.$$dom_setItem$2(key, value);
  },
  remove$1: function(key) {
    var value = this.$index(key);
    this.$$dom_removeItem$1(key);
    return value;
  },
  clear$0: function() {
    return this.$$dom_clear$0();
  },
  forEach$1: function(f) {
    var i, key;
    for (i = 0; true; ++i) {
      key = this.$$dom_key$1(i);
      if (key == null)
        return;
      f.call$2(key, this.$index(key));
    }
  },
  get$keys: function() {
    var keys = [];
    this.forEach$1(new $.Storage_keys_anon(keys));
    return keys;
  },
  get$values: function() {
    var values = [];
    this.forEach$1(new $.Storage_values_anon(values));
    return values;
  },
  get$length: function() {
    return this.length;
  },
  get$isEmpty: function() {
    return this.$$dom_key$1(0) == null;
  },
  $$dom_clear$0: function() {
    return this.clear();
  },
  $$dom_getItem$1: function(key) {
    return this.getItem(key);
  },
  $$dom_key$1: function(index) {
    return this.key(index);
  },
  $$dom_removeItem$1: function(key) {
    return this.removeItem(key);
  },
  $$dom_setItem$2: function(key, data) {
    return this.setItem(key,data);
  },
  $isMap: function() {
    return true;
  }
});

$.$defineNativeClass("StorageEvent", {"": "key>"});

$.$defineNativeClass("HTMLTextAreaElement", {"": "value="});

$.$defineNativeClass("UIEvent", {"": "pageX>,pageY>"});

$.$defineNativeClass("Uint8Array", {
  get$length: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$length")) {
      return this.length;
    } else
      return Object.prototype.get$length.call(this);
  },
  $index: function(index) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$index")) {
      return this[index];
    } else
      return Object.prototype.$index.call(this, index);
  },
  $indexSet: function(index, value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("$indexSet")) {
      this[index] = value;
    } else
      return Object.prototype.$indexSet.call(this, index, value);
  },
  get$iterator: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$iterator")) {
      return $.FixedSizeListIterator$(this);
    } else
      return Object.prototype.get$iterator.call(this);
  },
  contains$1: function(element) {
    if (Object.getPrototypeOf(this).hasOwnProperty("contains$1")) {
      return $.IterableMixinWorkaround_contains(this, element);
    } else
      return Object.prototype.contains$1.call(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("forEach$1")) {
      var t1;
      for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
        f.call$1(t1.get$current());
      return;
    } else
      return Object.prototype.forEach$1.call(this, f);
  },
  join$1: function(separator) {
    if (Object.getPrototypeOf(this).hasOwnProperty("join$1")) {
      return $.IterableMixinWorkaround_joinList(this, separator);
    } else
      return Object.prototype.join$1.call(this, separator);
  },
  where$1: function(f) {
    if (Object.getPrototypeOf(this).hasOwnProperty("where$1")) {
      return $.WhereIterable$(this, f);
    } else
      return Object.prototype.where$1.call(this, f);
  },
  toList$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toList$0")) {
      return $.List_List$from(this);
    } else
      return Object.prototype.toList$0.call(this);
  },
  toSet$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("toSet$0")) {
      return $.HashSet_HashSet$from(this);
    } else
      return Object.prototype.toSet$0.call(this);
  },
  get$isEmpty: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$isEmpty")) {
      var t1 = this.get$length();
      if (typeof t1 !== "number")
        return this.get$isEmpty$bailout(1, t1);
      return t1 === 0;
    } else
      return Object.prototype.get$isEmpty.call(this);
  },
  get$isEmpty$bailout: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  add$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("add$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.add$1.call(this, value);
  },
  addLast$1: function(value) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addLast$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addLast$1.call(this, value);
  },
  addAll$1: function(iterable) {
    if (Object.getPrototypeOf(this).hasOwnProperty("addAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
    } else
      return Object.prototype.addAll$1.call(this, iterable);
  },
  clear$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("clear$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
    } else
      return Object.prototype.clear$0.call(this);
  },
  indexOf$2: function(element, start) {
    if (Object.getPrototypeOf(this).hasOwnProperty("indexOf$2")) {
      return $.Lists_indexOf(this, element, start, this.get$length());
    } else
      return Object.prototype.indexOf$2.call(this, element, start);
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("get$last")) {
      if ($.$$gt(this.get$length(), 0) === true)
        return this.$index($.$$sub(this.get$length(), 1));
      throw $.$$throw($.StateError$("No elements"));
    } else
      return Object.prototype.get$last.call(this);
  },
  removeLast$0: function() {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeLast$0")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeLast$0.call(this);
  },
  remove$1: function(object) {
    if (Object.getPrototypeOf(this).hasOwnProperty("remove$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.remove$1.call(this, object);
  },
  removeAll$1: function(elements) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeAll$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeAll$1.call(this, elements);
  },
  removeMatching$1: function(test) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeMatching$1")) {
      throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
    } else
      return Object.prototype.removeMatching$1.call(this, test);
  },
  removeRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("removeRange$2")) {
      throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
    } else
      return Object.prototype.removeRange$2.call(this, start, rangeLength);
  },
  getRange$2: function(start, rangeLength) {
    if (Object.getPrototypeOf(this).hasOwnProperty("getRange$2")) {
      return $.Lists_getRange(this, start, rangeLength, []);
    } else
      return Object.prototype.getRange$2.call(this, start, rangeLength);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("Uint8ClampedArray", {
  $index: function(index) {
    return this[index];
  },
  $indexSet: function(index, value) {
    this[index] = value;
  },
  get$iterator: function() {
    return $.FixedSizeListIterator$(this);
  },
  contains$1: function(element) {
    return $.IterableMixinWorkaround_contains(this, element);
  },
  get$contains: function() {
    return new $.BoundClosure$1(this, "contains$1");
  },
  forEach$1: function(f) {
    var t1;
    for (t1 = this.get$iterator(); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
    return;
  },
  join$1: function(separator) {
    return $.IterableMixinWorkaround_joinList(this, separator);
  },
  where$1: function(f) {
    return $.WhereIterable$(this, f);
  },
  toList$0: function() {
    return $.List_List$from(this);
  },
  toSet$0: function() {
    return $.HashSet_HashSet$from(this);
  },
  get$isEmpty: function() {
    var t1 = this.get$length();
    if (typeof t1 !== "number")
      return this.get$isEmpty$bailout1(1, t1);
    return t1 === 0;
  },
  get$isEmpty$bailout1: function(state0, t1) {
    return $.$$eq(t1, 0);
  },
  add$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addLast$1: function(value) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  addAll$1: function(iterable) {
    throw $.$$throw($.UnsupportedError$("Cannot add to immutable List."));
  },
  clear$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot clear immutable List."));
  },
  indexOf$2: function(element, start) {
    return $.Lists_indexOf(this, element, start, this.get$length());
  },
  indexOf$1: function(element) {
    return this.indexOf$2(element, 0);
  },
  get$last: function() {
    if ($.$$gt(this.get$length(), 0) === true)
      return this.$index($.$$sub(this.get$length(), 1));
    throw $.$$throw($.StateError$("No elements"));
  },
  removeLast$0: function() {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  remove$1: function(object) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeAll$1: function(elements) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeMatching$1: function(test) {
    throw $.$$throw($.UnsupportedError$("Cannot remove from immutable List."));
  },
  removeRange$2: function(start, rangeLength) {
    throw $.$$throw($.UnsupportedError$("Cannot removeRange on immutable List."));
  },
  getRange$2: function(start, rangeLength) {
    return $.Lists_getRange(this, start, rangeLength, []);
  },
  $isList: function() {
    return true;
  },
  $isCollection: function() {
    return true;
  },
  $isJavaScriptIndexingBehavior: function() {
    return true;
  }
});

$.$defineNativeClass("HTMLVideoElement", {"": "height=,width="});

$.$defineNativeClass("DOMWindow", {
  get$on: function() {
    return $.WindowEvents$(this);
  },
  get$parent: function() {
    return $._convertNativeToDart_Window(this.parent);
  },
  $$dom_addEventListener$3: function(type, listener, useCapture) {
    return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  close$0: function() {
    return this.close();
  },
  $$dom_removeEventListener$3: function(type, listener, useCapture) {
    return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
  },
  get$onClick: function() {
    return $.CONSTANT6.forTarget$1(this);
  },
  get$onMouseDown: function() {
    return $.CONSTANT7.forTarget$1(this);
  },
  onMouseDown$1: function(arg0) {
    return this.get$onMouseDown().call$1(arg0);
  },
  onMouseDown$2: function(arg0, arg1) {
    return this.get$onMouseDown().call$2(arg0, arg1);
  },
  get$onMouseMove: function() {
    return $.CONSTANT9.forTarget$1(this);
  },
  get$onMouseOut: function() {
    return $.CONSTANT11.forTarget$1(this);
  },
  onMouseOut$2: function(arg0, arg1) {
    return this.get$onMouseOut().call$2(arg0, arg1);
  },
  get$onMouseOver: function() {
    return $.CONSTANT12.forTarget$1(this);
  },
  onMouseOver$2: function(arg0, arg1) {
    return this.get$onMouseOver().call$2(arg0, arg1);
  },
  get$onMouseUp: function() {
    return $.CONSTANT10.forTarget$1(this);
  },
  onMouseUp$2: function(arg0, arg1) {
    return this.get$onMouseUp().call$2(arg0, arg1);
  }
});

$.$defineNativeClass("XPathException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("HTMLFrameSetElement", {
  get$on: function() {
    return $._HTMLFrameSetElementEvents$(this);
  }
});

$.$defineNativeClass("SVGFEBlendElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEColorMatrixElement", {"": "values>,height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEComponentTransferElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFECompositeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEConvolveMatrixElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDiffuseLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEDisplacementMapElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEFloodElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEGaussianBlurElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMergeElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEMorphologyElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEOffsetElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFEPointLightElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFESpecularLightingElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFESpotLightElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFETileElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFETurbulenceElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGFilterElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGForeignObjectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGImageElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGMaskElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGPatternElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGRectElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGElement", {
  get$classes: function() {
    if (this._cssClassSet == null)
      this._cssClassSet = $._AttributeClassSet$(this);
    return this._cssClassSet;
  },
  get$children: function() {
    return $.FilteredElementList$(this);
  },
  set$children: function(value) {
    var children, t1;
    children = this.get$children();
    t1 = $.getInterceptor$JSArray(children);
    t1.clear$0(children);
    t1.addAll$1(children, value);
  },
  get$innerHtml: function() {
    var container, cloned;
    container = $.Element_Element$tag("div");
    cloned = this.clone$1(true);
    $.addAll(container.get$children(), cloned.get$children());
    return container.get$innerHtml();
  },
  set$innerHtml: function(svg) {
    var container = $.Element_Element$tag("div");
    container.set$innerHtml("<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children($.$$index(container.get$children(), 0).get$children());
  },
  get$$$dom_children: function() {
    throw $.$$throw($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function() {
    return this.id;
  }
});

$.$defineNativeClass("SVGException", {
  toString$0: function() {
    return this.toString();
  }
});

$.$defineNativeClass("SVGSVGElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGTextPositioningElement", {"": "x>,y>"});

$.$defineNativeClass("SVGUseElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGCursorElement", {"": "x>,y>"});

$.$defineNativeClass("SVGFEDropShadowElement", {"": "height>,width>,x>,y>"});

$.$defineNativeClass("SVGGlyphRefElement", {"": "x=,y="});

// 85 dynamic classes.
// 205 classes
// 20 !leaf
(function() {
  var v0_MouseEvent = "MouseEvent|WheelEvent", v1_TextPositioningElement = "SVGTextPositioningElement|SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTRefElement", v2_MediaElement = "HTMLMediaElement|HTMLVideoElement|HTMLAudioElement", v3_SvgElement = [v1_TextPositioningElement, "SVGElement|SVGStyledElement|SVGAElement|SVGTextContentElement|SVGTextPathElement|SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEDiffuseLightingElement|SVGFEFloodElement|SVGFEDisplacementMapElement|SVGFEImageElement|SVGFEConvolveMatrixElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEGaussianBlurElement|SVGFETurbulenceElement|SVGFilterElement|SVGFETileElement|SVGFESpecularLightingElement|SVGImageElement|SVGForeignObjectElement|SVGGElement|SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement|SVGFEMergeElement|SVGMarkerElement|SVGMaskElement|SVGPathElement|SVGLineElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGStopElement|SVGSVGElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGFEDropShadowElement|SVGGlyphRefElement|SVGMissingGlyphElement|SVGAnimationElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement|SVGAnimateColorElement|SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEDistantLightElement|SVGFEPointLightElement|SVGFEMergeNodeElement|SVGFESpotLightElement|SVGMetadataElement|SVGScriptElement|SVGStyleElement|SVGViewElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCursorElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGMPathElement|SVGHKernElement|SVGVKernElement"].join("|"), v4_Element = [v2_MediaElement, v3_SvgElement, "Element|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement|HTMLAppletElement|HTMLBaseFontElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLFrameSetElement|HTMLMarqueeElement|HTMLElement|HTMLAnchorElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFormElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement"].join("|"), v5_DocumentFragment = "DocumentFragment|ShadowRoot", v6_CharacterData = "CharacterData|Text|CDATASection|Comment", v7_Document = "Document|HTMLDocument|SVGDocument", v8_Node = [v4_Element, v5_DocumentFragment, v6_CharacterData, v7_Document, "Node|ProcessingInstruction|Attr|DocumentType|EntityReference|Notation"].join("|");
  $.dynamicSetMetadata([["HTMLCollection", "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"], ["CharacterData", v6_CharacterData], ["HTMLMediaElement", v2_MediaElement], ["Document", v7_Document], ["DocumentFragment", v5_DocumentFragment], ["MouseEvent", v0_MouseEvent], ["UIEvent", [v0_MouseEvent, "UIEvent|TextEvent|TouchEvent|CompositionEvent|SVGZoomEvent|KeyboardEvent"].join("|")], ["Uint8Array", "Uint8Array|Uint8ClampedArray"], ["SVGTextPositioningElement", v1_TextPositioningElement], ["SVGElement", v3_SvgElement], ["Element", v4_Element], ["Node", v8_Node], ["NodeList", "NodeList|RadioNodeList"], ["EventTarget", [v8_Node, "EventTarget|DOMWindow"].join("|")]]);
})();

$.main.call$0 = $.main;

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState !== 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
function generateAccessor(field, prototype) {
  var len = field.length;
  var lastCharCode = field.charCodeAt(len - 1);
  var needsAccessor = (lastCharCode & 63) >= 60;
  if (needsAccessor) {
    var needsGetter = (lastCharCode & 3) > 0;
    var needsSetter = (lastCharCode & 2) == 0;
    var renaming = (lastCharCode & 64) != 0;
    var accessorName = field = field.substring(0, len - 1);
    if (renaming) {
      var divider = field.indexOf(":");
      accessorName = field.substring(0, divider);
      field = field.substring(divider + 1);
    }
    if (needsGetter) {
      var getterString = "return this." + field + ";";
      prototype["get$" + accessorName] = new Function(getterString);
    }
    if (needsSetter) {
      var setterString = "this." + field + " = v;";
      prototype["set$" + accessorName] = new Function("v", setterString);
    }
  }
  return field;
};
Isolate.$isolateProperties.$generateAccessor = generateAccessor;
Isolate.$defineClass = function(cls, fields, prototype) {
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateAccessor(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  constructor.builtin$cls = cls;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      var fields = desc[''], supr;
      if (typeof fields == 'string') {
        var s = fields.split(';'); supr = s[0];
        fields = s[1] == '' ? [] : s[1].split(',');
      } else {
        supr = desc['super'];
      }
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, fields, desc);
      if (supr) Isolate.$pendingClasses[cls] = supr;
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (!member) continue;          if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var getter = new Function("{ return $." + fieldName + ";}");
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } finally {
          if (result === sentinelUndefined) {
            if ($[fieldName] === sentinelInProgress) {
              $[fieldName] = null;
            }
          }
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}
//@ sourceMappingURL=dock_spawn_demo_ide.dart.js.map
